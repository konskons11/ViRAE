%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Supplementary_figure_1.pdf
%%Creator: (Adobe Acrobat 22.1.0)
%%For: kostaskons94
%%CreationDate: 04/12/2023, 19:40
%%BoundingBox: 0 0 842 595
%%HiResBoundingBox: 0 0 842 595
%%CropBox: 0 0 842 595
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1225 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.425dc87, 2021/10/27-16:20:32        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2023-12-03T13:42:40Z"
   xmp:CreatorTool="PowerPoint"
   xmp:ModifyDate="2023-12-03T15:47:29+02:00"
   xmp:MetadataDate="2023-12-03T15:47:29+02:00"
   pdf:Keywords=""
   pdf:Producer="macOS Version 10.14.6 (Build 18G9323) Quartz PDFContext"
   xmpMM:DocumentID="uuid:06cc4d1f-5613-794e-845f-9db5d282f86a"
   xmpMM:InstanceID="uuid:733983a7-2ab3-854b-bf56-71f67823d83f">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>kostaskons94</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Supplementary_figure_1</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -595 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 595 li
842 595 li
842 0 li
cp
clp
12 14 mo
829.92 14 li
829.92 580 li
12 580 li
cp
false sop
0 0 0 0 cmyk
f
13 14 mo
831 14 li
831 580 li
13 580 li
cp
f
gsave
12 580 mo
830 580 li
830 14 li
12 14 li
cp
clp
430.315 318.099 mo
463.41 318.099 li
463.41 321.244 li
430.315 321.243 li
cp
461.837 314.955 mo
477.568 319.671 li
461.837 324.388 li
cp
.164492 1 1 .0814832 cmyk
f
430.315 305.408 mo
463.41 305.408 li
463.41 308.553 li
430.315 308.553 li
cp
461.837 302.264 mo
477.568 306.98 li
461.837 311.697 li
cp
f
430.315 293.653 mo
463.41 293.653 li
463.41 296.797 li
430.315 296.797 li
cp
461.837 290.509 mo
477.568 295.225 li
461.837 299.942 li
cp
f
430.315 330.226 mo
463.41 330.226 li
463.41 333.371 li
430.315 333.37 li
cp
461.837 327.082 mo
477.568 331.798 li
461.837 336.515 li
cp
f
210.835 318.023 mo
243.93 318.023 li
243.93 321.168 li
210.835 321.168 li
cp
242.357 314.879 mo
258.088 319.595 li
242.357 324.312 li
cp
f
210.835 305.332 mo
243.93 305.332 li
243.93 308.477 li
210.835 308.476 li
cp
242.357 302.188 mo
258.088 306.904 li
242.357 311.621 li
cp
f
210.835 293.577 mo
243.93 293.577 li
243.93 296.722 li
210.835 296.722 li
cp
242.357 290.433 mo
258.088 295.149 li
242.357 299.866 li
cp
f
210.835 330.15 mo
243.93 330.15 li
243.93 333.295 li
210.835 333.295 li
cp
242.357 327.006 mo
258.088 331.722 li
242.357 336.439 li
cp
f
696.615 203.906 mo
696.615 244.103 li
115.357 244.103 li
116.93 242.531 li
116.93 267.005 li
113.784 267.005 li
113.784 240.958 li
695.042 240.958 li
693.469 242.531 li
693.469 203.906 li
cp
120.076 265.433 mo
115.357 281.155 li
110.638 265.433 li
cp
f
402.317 215.927 mo
402.317 50.9426 li
413.514 50.9426 li
413.514 54.0865 li
403.89 54.0865 li
405.463 52.5145 li
405.463 215.927 li
cp
411.941 47.7975 mo
427.672 52.5145 li
411.941 57.2315 li
cp
f
186.982 37.3091 mo
220.53 37.3091 li
220.53 40.4541 li
186.982 40.4531 li
cp
218.957 34.1651 mo
234.687 38.8811 li
218.957 43.5981 li
cp
.749721 .679194 .670497 .901457 cmyk
f
46.0489 16.5978 mo
186.982 16.5978 li
186.982 61.1648 li
46.0489 61.1648 li
cp
.111269 .0303044 .00289921 0 cmyk
f
46.0489 16.5978 mo
187.023 16.5978 li
187.023 61.1478 li
46.0489 61.1478 li
cp
.749721 .679194 .670497 .901457 cmyk
12700 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
gsave
[8.26e-05 0 0 8.25e-05 46.0489 16.5978 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.313 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000005bc6670
676d000000000000067800000d2b676c796600000000000039fc000029f6
6865616400000000000013a4000000366868656100000000000013dc0000
0024686d74780000000000001400000000886c6f63610000000000001488
000000466d61787000000000000014d0000000206e616d65000000000000
14f000000020707265700000000000001510000024eb6764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000051a
001500a0fff8ff77fff803480066015401cc00ac00a200b4008c0101006e
00000000000000000000011f000a04e2001400b4fff6035c00140028fdda
0568fea2ffef405a868574737271706f6e6d6c6b6a696867666564625f5e
5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f3e
3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a0908
07060504030201002c4523466020b02660b004262348482d2c4523462361
20b02661b004262348482d2c45234660b0206120b04660b004262348482d
2c4523462361b0206020b02661b02061b004262348482d2c45234660b040
6120b06660b004262348482d2c4523462361b0406020b02661b04061b004
262348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320
b08d44235920b0ed51582320b04d44235920b0042651582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b02823
70b10228453ab10200080d2d2c2045b00325456164b050515845441b2121
592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b000
8b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a03458a
8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b
525845441b2121592d2c01b005251023208af500b0016023edec2d2c01b0
05251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b001
600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2c45234560234560234560
23766818b08062202d2cb00426b00426b00425b0042545234520b0032660
62636820b0032661658a2344442d2c2045b0005458b040442045b0406144
1b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b0
1423421b2121592d2c4b515820b0032545695358441b2121591b2121592d
2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a60442d
2c45234560442d2c4b235158b90033ffe0b134201bb3330034005944442d
2cb0164358b00326458a586466b01f601b64b020606620581b21b04059b0
01615923586559b02923442310b029e01b2121212121592d2cb0164358b0
04254564b020606620581b21b04059b0016123586559b0292344b00425b0
0725082058021b0359b0052510b004252046b0042523423cb0072510b006
252046b00425b0016023423c2058011b0059b0052510b00425b029e0b007
2510b00625b029e0b00425b00725082058021b0359b00425b003254348b0
0625b00325b0016043481b2159212121212121212d2cb0164358b0042545
64b020606620581b21b04059b0016123581b6559b0292344b00525b00825
082058021b0359b0042510b005252046b0042523423cb00425b0072508b0
072510b006252046b00425b0016023423c2058011b0059b0042510b00525
b029e0b02920456544b0072510b00625b029e0b00525b00825082058021b
0359b00525b003254348b00425b0072508b00625b00325b0016043481b21
59212121212121212d2c02b00425202046b004252342b0052508b0032545
48212121212d2c02b0032520b0042508b0022543482121212d2c45232045
1820b00050205823652359236820b040505821b04059235865598a60442d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d2c
b002435458b0462b1b21212121592d2cb002435458b0472b1b212121592d
2cb002435458b0482b1b21212121592d2cb002435458b0492b1b21212159
2d2c2320b000508a8a64b10003255458b0401bb10103255458b005438b59
b04f2b5923b0622b2321235865592d2cb108000c215460432d2c01462346
6023466123201020468a61b8ff80628ab140408a704560683a2d2c208a23
49648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b2020202436042b12401885458
b2022002436042004b014b5258b2020802436042591bb940000080885458
b202040243604259b94000008063b80100885458b202080243604259b940
00010063b80200885458b202100243604259b12601885158b94000020063
b80400885458b202400243604259b94000040063b80800885458b2028002
43604259b12801885158b94000080063b81000885458ba00020100000243
604259595959595959b10002435458400a0540084009400c020d021bb101
02435458b2054008ba010000090100b30c010d011bb18002435258b20540
08b80180b109401bb901000002435258b2054008ba0180000901401bb901
800002435258b2054008b80200b109401bb2054008ba0100000901005959
59b9400000808855b94000020063b8040088555a58b30c000d011bb30c00
0d0159595942424242422d2c451868234b51582320452064b04050587c59
688a6059442d2cb00016b00225b0022501b001233e00b002233eb1010206
0cb00a236542b00b234201b001233f00b002233fb10102060cb006236542
b0072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b0
042510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58
b0092b5920b005254ab0042547b004254760b0062547b0806361b00225b0
005558b00325b00725496359b0082558001b0159b00425b0062549b00925
5cb009255a58b0092b59b0072546b0806361b0032520b0005558631b2159
612320b0005558b080631b21b08059b0592bb006255c586959b004252020
10b00048233ab0062658001b0159b0052658b003252f598a12233221212d
2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b0
072559b00225b00225070cb005256323b00625636020b940000400635358
21b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1b
b00426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab0
0b2eb00525b0052507595920b0005558b00525b0052587b00725b007250b
b0092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b008
25b00b254923b00625b0062587b00a2510b00b25c15920b00051b8005223
78b00161b00225b00725b0072507b00a25b00d254961b08062b00525b005
250bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b0
0625b0062507b00925b00c2549b0032554b8ffa723792121212121212121
212121212d2c23b0005458b9400000001bb900004000598ab0005458b940
0000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9000040
00590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b0
5b2b2d2cb00426b00426080db00426b00426080db05b2b2d2cb0022563b0
206066b00225b82000626023622d2c204569442d2c234ab1024e2b2d2c23
4ab1014e2b2d2c238a4a234564b0022564b002256164b003435258212064
59b1024e2b23b000505865592d2c238a4a234564b0022564b002256164b0
0343525821206459b1014e2b23b000505865592d2c20b003254ab1024e2b
8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b8a
103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b004
252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b003
25466061b08062208a2010233a232010233a2d2cb0032547b003254760b0
052547b0806361b00225b00625496323b005254ab080632058621b2159b0
042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e2b
208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb08050
20605920606020b001515821211b20b005515821206661b0402361b10003
2550b00325b00325505a5820b00325618a535821b000591b21591bb00754
582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab000
5358b0001b8a8a238ab00159b004254620666120b00526b0062649b00526
b00526b0702b236165b02060206661b02061652d2cb0022546208a20b000
505821b1024e2b1b452321596165b00225103b2d2cb0042620b802006220
b80200638a236120b05d602bb00525118a128a20398a58ba005d10000004
266356602b23212010204620b1024e2b23611b2321208a201049b1024e2b
593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb15d
0725602bb00525b00525b00525b00525b06f2bba005d1000000826635660
2b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb00217
38b00052b00225b001525a58b00425b0062549b00325b00525496020b040
5258211bb000525820b0025458b00425b00425b00725b0072549b0021738
1bb00425b00425b00425b0062549b0021738595959595921212121212d2c
b12801885158b94000040063b8080088545c1bb001592d2cb12801885158
b94000040063b8080088545c1bb001592d000001000000063333a1099dfd
5f0f3cf50019080000000000bbeb7ccc00000000d5968a66fbfafd8009ec
083600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec000100000000000000000000000000000022040e000001cf000004a1
0023045a00ac0444006103e800ac03ad00ac020400ac052a00ac054c0063
045800ac03ad0047048a002203e6001e03d5005c043400990362005a0434
006003fb005d0271002503c400350434009901d6008501d6009906640099
043400990438005a0434009902ca00990321005102ae002104340094039f
002203170001000000bf00bf016c023a02d2036a03e6043904e4056d062e
0721079f081b08ed099f0a4a0af90bb80c4d0d5d0df30e790ec40fbf1062
110111b0123a132113b3145614cb14fb0000000100000022043a00170108
000800020010002f00870000123602350004000100000001001200010000
00000006000e00004e494e4c584a2b43616c69627269b10903415302c802
c60038001f02c702c60038001f02dd003802da005502d9003802d7005502
d8003802d7005502d6003802d5005502d4003802d3005502d2003802d100
5502bf003802be005502bd003802bc0055000402db003402db005402db00
03003402db005402db006402db00a402db00d402db0005006b02d5000100
0b02d10001001402c2004402c2006402c2007402c2009402c2000500a402
be000100a402bc000100200284b40918014a20b80283b40918014a20b802
82b40918014a20b80281b40918014a20b80280b40918014a20b8027fb409
18014a20b8027eb40918014a20b8027db40918014a20b8027cb40918014a
20b8027bb40918014a20b8027ab40918014a20b80279b40918014a20b802
78b40918014a20b80277b40918014a20b80276b40918014a20b80275b409
18014a20b80274b40918014a20b80273b40918014a20b80271b40918014a
20b80270b40918014a20b8026fb40918014a20b8026eb40918014a20b802
6db40918014a20b8026cb40918014a20b8026bb40918014a20b8026ab409
18014a20b80269b40918014a20b80268b40918014a20b80267b40918014a
20b80266b40918014a20b80265b40918014a20b80264b40918014a20b802
63b40918014a20b80262b40918014a20b80261b40918014a20b80260b409
18014a20b8025fb40918014a20b8025eb40918014a20b8025db40918014a
20b8025cb40918014a20b8025bb40918014a20b8025ab40918014a20b802
59b40918014a20b80258b40918014a20b80257b40918014a20b80256b409
18014a20b80255b40918014a20b80254b40918014a20b80253b40918014a
20b80252b40918014a20b80251b40918014a20b80250b40918014a20b802
4fb40918014a20b8024eb40918014a20b8024db40918014a20b8024cb409
18014a20b8024bb40918014a20b8024ab40918014a20b80249b40918014a
20b80248b40918014a20b80247b40918014a20b80246b40918014a20b802
45b40918014a20b80244b40918014a20b80243b40918014a20b80242b409
18014a20b80241b40918014a20b80240b40918014a20b8023fb40918014a
20b8023eb40918014a20b8023db40918014a20b8023cb40918014a20b802
3bb40918014a20b8023ab40918014a20b80239b40918014a20b80238b409
18014a20b80237b40918014a20b80236b40918014a20b80235b40918014a
20b80234b40918014a20b80233b40918014a20b80232b40918014a20b802
31b40918014a20b80230b40918014a20b8022fb40918014a20b8022eb409
18014a20b8022db40918014a20b8022cb40918014a20b8022bb40918014a
20b8022ab40918014a20b80229b40918014a20b80228b40918014a20b802
27b40918014a20b80226b40918014a20b80225b40918014a20b80224b409
18014a20b80223b40918014a20b80222b40918014a20b80221b40918014a
20b80220b40918014a20b8021fb40918014a20b8021eb40918014a20b802
1db40918014a20b8021cb40918014a20b8021bb40918014a20b8021ab409
18014a20b80219b40918014a20b80218b40918014a20b80217b40918014a
20b80216b40918014a20b80215b40918014a20b80214b40918014a20b802
13b40918014a20b80212b40918014a20b80211b40918014a20b80210b409
18014a20b8020fb40918014a20b8020eb40918014a20b8020db40918014a
20b8020cb40918014a20b8020bb40918014a20b8020ab40918014a20b802
09b40918014a20b80208b40918014a20b80207b40918014a20b80206b409
18014a20b80205b40918014a20b80204b40918014a20b80203b40918014a
20b80202b40918014a20b80201b40918014a20b80200b40918014a20b801
ffb40918014a20b801feb40918014a20b801fdb40918014a20b801fcb409
18014a20b801fbb40918014a20b801fab40918014a20b801f9b40918014a
20b801f8b40918014a20b801f7b40918014a20b801f6b40918014a20b801
f5b40918014a20b801f4b40918014a20b801f3b40918014a20b801f2b409
18014a20b801f1b40918014a20b801f0b40918014a20b801efb40918014a
20b801eeb40918014a20b801edb40918014a20b801ecb40918014a20b801
ebb40918014a20b801eab40918014a20b801e9b40918014a20b801e8b409
18014a20b801e7b40918014a20b801e6b40918014a20b801e5b40918014a
20b801e4b40918014a20b801e3b40918014a20b801e2b40918014a20b801
e1b40918014a20b801e0b40918014a20b801dfb40918014a20b801deb409
18014a20b801ddb40918014a20b801dcb40918014a20b801dbb40918014a
20b801dab40918014a20b801d9b40918014a20b801d8b40918014a20b801
d7b40918014a20b801d6b40918014a20b801d5b40918014a20b801d4b409
18014a20b801d3b40918014a20b801d2b40918014a20b801d1b40918014a
20b801d0b40918014a20b801cfb40918014a20b801ceb40918014a20b801
cdb40918014a20b801ccb40918014a20b801cbb40918014a20b801cab409
18014a20b801c9b40918014a20b801c8b40918014a20b801c7b40918014a
20b801c6b40918014a20b801c5b40918014a20b801c4b40918014a20b801
c3b40918014a20b801c2b40918014a20b801c1b40918014a20b801c0b409
18014a20b801bfb40918014a20b801beb40918014a20b801bdb40918014a
20b801bcb40918014a20b801bbb40918014a20b801bab40918014a20b801
b9b40918014a20b801b8b40918014a20b801b7b40918014a20b801b6b409
18014a20b801b5b40918014a20b801b4b40918014a20b801b3b40918014a
20b801b2b40918014a20b801b1b40918014a20b801b0b40918014a20b801
afb40918014a20b801aeb40918014a20b801adb40918014a20b801acb409
18014a20b801abb40918014a20b801aab40918014a20b801a9b40918014a
20b801a8b40918014a20b801a7b40918014a20b801a6b40918014a20b801
a5b40918014a20b801a4b40918014a20b801a3b40918014a20b801a2b409
18014a20b801a1b40918014a20b801a0b40918014a20b8019fb40918014a
20b8019eb40918014a20b8019db40918014a20b8019cb40918014a20b801
9bb40918014a20b8019ab40918014a20b80199b40918014a20b80198b409
18014a20b80197b40918014a20b80196b40918014a20b80195b40918014a
20b80194b40918014a20b80193b40918014a20b80192b40918014a20b801
91b40918014a20b80190b40918014a20b8018fb40918014a20b8018eb409
18014a20b8018db40918014a20b8018cb40918014a20b8018bb40918014a
20b8018ab40918014a20b80189b40918014a20b80188b40918014a20b801
87b40918014a20b80186b40918014a20b80185b40918014a20b80184b409
18014a20b80183b40918014a20b80182b40918014a20b80181b40918014a
20b80180b40918014a20b8017fb40918014a20b8017eb40918014a20b801
7db40918014a20b8017cb40918014a20b8017bb40918014a20b8017ab409
18014a20b80179b40918014a20b80178b40918014a20b80177b40918014a
20b80176b40918014a20b80175b40918014a20b80174b40918014a20b801
73b40918014a20b80172b40918014a20b80171b40918014a20b80170b409
18014a20b8016fb40918014a20b8016eb40918014a20b8016db40918014a
20b8016cb40918014a20b8016bb40918014a20b8016ab40918014a20b801
69b40918014a20b80168b40918014a20b80167b40918014a20b80166b409
18014a20b80165b40918014a20b80164b40918014a20b80163b40918014a
20b80162b40918014a20b80161b40918014a20b80160b40918014a20b801
5fb40918014a20b8015eb40918014a20b8015db40918014a20b8015cb409
18014a20b8015bb40918014a20b8015ab40918014a20b80159b40918014a
20b80158b40918014a20b80157b40918014a20b80156b40918014a20b801
55b40918014a20b80154b40918014a20b80153b40918014a20b80152b409
18014a20b80150b40918014a20b8014fb40918014a20b8014eb40918014a
20b8014cb40918014a20b8014bb40918014a20b8014ab40918014a20b801
49b40918014a20b80148b40918014a20b80147b40918014a20b80146b409
18014a20b80145b40918014a20b80144b40918014a20b80143b30918014a
b80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb802
80b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb2
1e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d43
1fb80277b21d431fb80276b21d431fb80275b21d411fb80274b21d431fb8
0273b21d431fb80272b21d411fb80271b21d421fb80270b21d421fb8026f
b21d421fb8026eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c
451fb8026ab21c451fb80269b21c451fb80268b21c451fb80267b21c451f
b80266b21c441fb80265b21c451fb80264b21c451fb80263b21c451fb802
62b21c451fb80261b21c451fb80260b21c451fb8025fb21c451fb8025eb2
1c441fb8025db21c451fb8025cb21c451fb8025bb21c451fb8025ab21c45
1fb80259b21c451fb80258b21c451fb80257b21c451fb80256b21c451fb8
0255b21c451fb80254b21c451fb80253b21c451fb80252b21c451fb80251
b21c451fb80250b21c451fb8024fb21c451fb8024eb21c451fb8024db21c
451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb80249b21b491f
b80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb802
44b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b2
1b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b
1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb8
0237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b21b491fb80233
b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b
4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1f
b8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb802
26b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b2
1b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c
1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb8
0219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215
b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a
4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1f
b8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb802
08b21a4f1fb80207b21a4f1fb80206b219501fb80205b219511fb80204b2
19511fb80203b219501fb80202b219511fb80201b219511fb80200b21951
1fb801ffb219511fb801feb219501fb801fdb219511fb801fcb219511fb8
01fbb219511fb801fab219501fb801f9b219511fb801f8b219511fb801f7
b219511fb801f6b219511fb801f5b218541fb801f4b218531fb801f3b218
541fb801f2b218541fb801f1b218541fb801f0b218531fb801efb218541f
b801eeb218541fb801edb218541fb801ecb218531fb801ebb218531fb801
eab218541fb801e9b218541fb801e8b218541fb801e7b218541fb801e6b2
18531fb801e5b218541fb801e4b218531fb801e3b218541fb801e2b21854
1fb801e1b218541fb801e0b218531fb801dfb218531fb801deb218541fb8
01ddb218541fb801dcb218541fb801dbb218541fb801dab218531fb801d9
b218541fb801d8b218541fb801d7b217571fb801d6b217561fb801d5b217
561fb801d4b217571fb801d3b217571fb801d2b217571fb801d1b217571f
b801d0b217561fb801cfb217561fb801ceb217571fb801cdb217571fb801
ccb217571fb801cbb217571fb801cab217561fb801c9b217561fb801c8b2
17571fb801c7b217571fb801c6b217571fb801c5b217571fb801c4b21757
1fb801c3b217561fb801c2b217571fb801c1b217571fb801c0b217571fb8
01bfb217561fb801beb217561fb801bdb217571fb801bcb217571fb801bb
b217571fb801bab217571fb801b9b217571fb801b8b217561fb801b7b217
571fb801b6b217571fb801b5b217571fb801b4b217571fb801b3b2163f1f
b801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801
aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2
163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b
1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb8
01a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019d
b2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b216
5b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1f
b80194b2163e1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb801
90b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2
163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b
1fb80187b2165b1fb80186b215611fb80185b215621fb80184b215621fb8
0183b215661fb80182b215661fb80181b215551fb80180b215451fb8017f
b215361fb8017eb215361fb8017db215611fb8017cb215621fb8017bb215
621fb8017ab215641fb80179b215661fb80178b215661fb80177b215661f
b80176b215661fb80175b215661fb80174b215661fb80173b215451fb801
72b215621fb80171b215621fb80170b215631fb8016fb215641fb8016eb2
15661fb8016db215661fb8016cb215661fb8016bb215661fb8016ab21566
1fb80169b215621fb80168b215621fb80167b215611fb80166b215641fb8
0165b215641fb80164b215661fb80163b215661fb80162b215661fb80161
b215661fb80160b215661fb8015fb215661fb8015eb215551fb8015db215
451fb8015cb215451fb8015bb215361fb8015ab215611fb80159b215621f
b80158b215621fb80157b215631fb80156b215641fb80155b215661fb801
54b215661fb80153b215661fb80152b215661fb80151b214401fb80150b2
14551fb8014fb214561fb8014eb214831fb8014db2142d1fb8014cb21440
1fb8014bb214401fb8014ab214411fb80149b214401fb80148b214401fb8
0147b214411fb80146b2147e1fb80145b214871fb80144b2147f1fb80143
b214801fb80142b212461fb80141b212461fb80140b212461fb8013fb212
461fb8013eb212441fb8013db212461fb8013cb211591fb8013bb211591f
b8013ab2115b1fb80139b2115b1fb80138b211471fb80137b211581fb801
36b2115a1fb80135b2115b1fb80134b2115b1fb80133b2112c1fb80132b2
11471fb80131b211551fb80130b211571fb8012fb211571fb8012eb21158
1fb8012db211591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb8
0129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2115b1fb80125
b211561fb80124b211561fb80123b211571fb80122b211581fb80121b211
591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1f
b8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb801
18b2105e1fb80117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2
105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f
1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8
010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107
b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f1fb80103b210
5f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f
631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641f
f60f641ff50f641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f
641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f641fe80f641f
e70f641fe60e671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e
681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681f
d80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d
2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1f
c90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d
311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c
731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c721fb40c731f
b30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b
7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1f
a40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b
7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f
950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a
671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255805581ab8055
7f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a
557bab7a557955775578ab7755ba028600660285403c5576ab7555047514
75747503f47501ab750144750130750102007510752075030c7455725573
ab7255007250728072b072043bb072e072020072010ab8ffc0b3721b1e46
b8ffc0407c720d104671556f5570ab6f556e666d556a03251f6938675568
ab67556638645565ab645563386255613860555f385d555eab5d555c385a
555bab5a55593858555703251f5638545555ab54555338515552ab51554f
384e554e03251f4d384b554cab4b554a38485549ab485547384655450338
1f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b
04001bb01bc01b03120f1a1f1a02290f1901434f19016f197f198f19030f
18cf18024018292c460f17cf17df17ef1704134017292e46001610162016
0315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc040
1f162326460f15010f151f150245ef150186000301200101000110012001
0308b8ffc0b401151f4603bd0100010000050001019000542b4bb8080052
4bb008505bb00188b02553b00188b040515ab00688b000555a5b58b10101
8e59b101024354b0144b515a58b101018e59858d8d001d424bb01d5358b2
03a0a01d42594bb0805358b20340401d42594bb0ff5358b20300001d4259
2b5e7375732b58403d0011e011f0110315bf10cf10020f0f010f0fff0f02
400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f0d1f
0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f0b02
400b3f4346400b2d30460003012001010001100120010308b8ffc0b30115
1f462b5e7375732b2b745e732b2b5e73742b73742b7374745e735901755e
73742b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73
755e732b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb100024354
5841ff0284006402830064028200640281006402800064027f0064027e00
64027d0064027c0064027b0064027a006402790064027800640277006402
7600640275006402740064027300640271006402700064026f0064026e00
64026d0064026c0064026b0064026a006402690064026800640267006402
660064026500640264006402630064026200640261006402600064025f00
64025e0064025d0064025c0064025b0064025a0064025900640258006402
570064025600640255006402540064025300640252006402510064025000
64024f0064024e0064024d0064024c0064024b0064024a00640249006402
480064024700640246006402450064024400640243006402420064024100
6402400064023f0064023e0064023d0064023c0064023b0064023a006402
390064023800640237006402360064023500640234006402330064023200
640231006402300064022f0064022e0064022d0064022c0064022b006402
2a0064022900640228006402270064022600640225006402240064022300
64022200640221006402200064021f0064021e0064021d0064021c006402
1b0064021a00640219006402180064021700640216006402150064021400
6402130064021200640211006402100064020f0064020e0064020d006402
0c0064020b0064020a006402090064020800640207006402060064020500
64020441ff00640203006402020064020100640200006401ff006401fe00
6401fd006401fc006401fb006401fa006401f9006401f8006401f7006401
f6006401f5006401f4006401f3006401f2006401f1006401f0006401ef00
6401ee006401ed006401ec006401eb006401ea006401e9006401e8006401
e7006401e6006401e5006401e4006401e3006401e2006401e1006401e000
6401df006401de006401dd006401dc006401db006401da006401d9006401
d8006401d7006401d6006401d5006401d4006401d3006401d2006401d100
6401d0006401cf006401ce006401cd006401cc006401cb006401ca006401
c9006401c8006401c7006401c6006401c5006401c4006401c3006401c200
6401c1006401c0006401bf006401be006401bd006401bc006401bb006401
ba006401b9006401b8006401b7006401b6006401b5006401b4006401b300
6401b2006401b1006401b0006401af006401ae006401ad006401ac006401
ab006401aa006401a9006401a8006401a7006401a6006401a5006401a400
6401a3006401a2006401a1006401a00064019f0064019e0064019d006401
9c0064019b0064019a006401990064019800640197006401960064019500
640194006401930064019200640191006401900064018f0064018e006401
8d0064018c0064018b0064018a0064018900640188006401870064018600
640185006441800184006401830064018200640181006401800064017f00
64017e0064017d0064017c0064017b0064017a0064017900640178006401
770064017600640175006401740064017300640172006401710064017000
64016f0064016e0064016d0064016c0064016b0064016a00640169006401
680064016700640166006401650064016400640163006401620064016100
6401600064015f0064015e0064015d0064015c0064015b0064015a006401
590064015800640157006401560064015500640154006401530064015200
6401500064014f0064014e0064014c0064014b0064014a00640149006401
48006401470064014600640145006401440064014300642b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b00737373737373742b2b2b2b2b2b2b2b2b2b185f5e0000>
[10743 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 2162 8 <000100acfffa047e0511003d00a6b0852b58b3270f0f14b8ffe8b310014d
14b8ffe8b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b
014d14b80211401e1e0a2e2e321810014d32180f014d32180d014d32100c
014d32180b014d32b802114010001e38520a2e0f27041922511955065400
3f3f3f1217393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f3331
301b400e38520a2e0f27041922511955065400183f3f3f1217393f303159
25140e022323222e0227012626272316161511140e0223222e0235113436
3333321e0217011e03173326263511343e0233321e0215047e0d151a0d37
1a27232315fe6820411c02020208131f18181f12082c1a521d271f1d1101
3a1d3632311801020108131f191620120847141c12080b1d322702e0397d
3b48964afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4f
ab4f02be070c090404090c07>KAAAAA+Calibri AddT42Char 
1 1140 4 <00010061fff0040c051e00390097b0852b58b31c003b2bb8ffe8b310014d
2bb8fff0b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b
014d2bbe0233000e0018012f00210026012cb2135304bb012a0035003001
2eb10956003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c431301bb12118
b8012fb36c211326b8012cb46c13533504b8012ab36c350930b8012eb26c
095600183f2bc42b3f2bc42b30315925140e0623222e0235343e0233321e
0615140e0223222e0223220e0215141e0233323e0233321e02040c020508
14405f7b497ecb8f4d5396d17f386a5a461b08050304080b080e324f714f
568d64373563905b4d7351340f070a0603b71018120e1429271b54a4f19d
a1fcaf5c15202a1b0e131a12141c1309272f274586c17c7bbd7f41262f26
06111e00>KAAAAA+Calibri AddT42Char 
1 728 3 <000300ac00000401050e001e002b003800f7b0852b58401a1f1810014d1f
100f014d1f100d014d1f180c014d1f200b014d1fb8022e40281a15401001
4d15400f014d15150b2c1810014d2c100f014d2c100d014d2c180c014d2c
200b014d2cba02320000ffc0b50b014d002633b8ffe8b310014d33b8fff0
b30f014d33b8fff0b30d014d33b8fff6b30c014d33b8ffe8b30b014d33b8
0210400da00bc00b020b1a27f431310724b80109b2105134b8010bb10754
003fed3fed12392fed39012f5de12b2b2b2b2b32d42be12b2b2b2b2b1239
2f2b2b39e12b2b2b2b2b31301b400a1a3127f46c3131071024b80109b46c
10510734b8010bb26c075400183f2b3f2b12392f2b3930315901140e0423
212226351134363321321e0215140e02071e0301342e0223231133323e02
13342e0223231133323e0204011f384f637149feae172929170126749463
32162b412a355c4528fefd1a385a4ab2c4435236194e25476b51cefa3b58
432601733d67523e2a151f270482271f2c547a4d2e544738120a35526e02
012f4c351cfe5d233b4ffddd3a583c1ffe381c375200>KAAAAA+Calibri AddT42Char 
1 1996 7 <000100acfffa0158051400150061b0852b58b73f174f17af170300b8ffe8
b310014d00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8
ffe8b30b014d00ba0211000affc0b715014d0a10520555003f3f012f2be1
2b2b2b2b2b31305d1bb31052055500183f3f30315925140e0223222e0235
11343e0233321e02150158081421191822140809152117192114081a080c
070505070c0804da080c070505070c08>KAAAAA+Calibri AddT42Char 

1 0 1 <> KAAAAA+Calibri AddT42Char 
1 3164 11 <00010047ffed0363052100490128b0852b58b90041ffe8b40f10014c41b8
fff0b30d014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d
41b8022c402b32401314014c324011014d243224320c1b180f10014c1b10
0d014d1b1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d
00b8ffc0b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb01
270037000a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c37
113711163cb8010cb5411b05295316b80129b10556003fed3f123939ed11
39392f2f2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b
2be12b2b2b2b2b31301bb1372eb80127b26c110ab80126b76c3711371116
293cb8010cb76c411b0529530516b80129b26c055600183f2b3f1239392b
1139392f2f2b2b30315901140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e060363
4377a15d416f573b170b04080c080e3350714a385d43243252696e685233
3b6991542b574d3c1306040203060b070b2f445d3a3650341a32536a6e6a
5333016b5b8e633216202218251f161d12072228231e375033374e3b3133
3e54714f517f562d0f191f130b111813121c13091c231d1d304225364e3c
32333d537100>KAAAAA+Calibri AddT42Char 
1 2778 10 <000200acfffa040b050e0036004400bdb0852b58401e102e1137080b014d
37100f014d37100c0d014c371810014d37180b014d37b80233b729401001
4d293f11b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8ff
f6b30c014d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040
173db8010bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b
2b32d42be12b2b2b2b2b12393931301bb22e4010b80108b56c404017213d
b8010bb66c21511755055500183f3f3f2b12392f2b3930315925140e0223
222e0227032e03232311140e0223222e023511343633213216171e031514
0e02071e031713161601342627262623231133323e02040b0614241e1a21
140b0477152d3e543b7309132119192114082917011331411a4b734e2723
425c3920342d2814740e08fefd4450193f3391a84463421f1a080c080404
09100c013134573f23fdd9080c070505070c0804ae271f05030d38566f43
41674f3a140e2b3c4e31fee3241d03854c69170706fe4c213b50>KAAAAA+Calibri AddT42Char 
1 382 2 <00020023fffa047e05140022002600dcb0852b58b90024ffe8b40c10014c
23b8ffe8b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8ff
f0401a0b10014c25100b10014c0d100b10014c0c100b10014c40280125b8
fff0402c0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02
af23bf23cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d11
173911123939113310ed3211333130012b5d2b2b2b2b2b2b002b2b1b401e
2423260c25f46c0b0c18221d230a0d0116040c230c230c121d5212550555
00183f3f3f1239392f2f1117391112393911332b32113330315925161606
0623222e02270321030e03232226263637013e0333321e02170723032104
75080110251f1f251309046ffde66a030a13231c1d250f010801b2040d19
271e202a1a0e047b01df01c23d161b0e0403070c09013bfec9090d090405
0e1b1604b20b0e080303080f0b8dfd7b>KAAAAA+Calibri AddT42Char 
1 5268 17 <00020060ffed039c056d0026003900bcb0852b58401f3f3b010b1b39100d
014d390a0c014d391010014d39100f014d39180b014d39bb01f90000002f
ffe0b30d014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d
2fb8ffe8b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a
34b80104b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b
2b2b2b2b323931305d1b400a21460b39271b040e182ab80105b46c184a0e
34b80104b46c0e4d054c00183f3f2b3f2b1217393f30315925140e022322
2e023535060623222e0235343e023332161711343e0233321e0215032626
23220e0215141e0233323e0237039c07111c14151c120847995b638c5728
3262915f4f834007141f1819201209a6437d443f58371915345641213d40
462719080c070404070c08774d564d83b16274bb84474543020b070d0705
05070d07fd4553573c627c404482653d122a4331>KAAAAA+Calibri AddT42Char 
1 4150 14 <0002005cffed033f03ca0033004000f6b0852b5840200f421f422f42030b
0917340c0c014d34100d014d34180b014d34100f10014c34b801f7400e00
27270f00010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8
ffe8b30b014d3ab8ffe8b40f10014c3ab8020840141117c500341034023b
c0340100340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d
04002f3fed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b
5e5d392f10e12b2b2b2b323931305e5d1b400d0b17013417c56c34342e41
222ab8011b40166c00220116042222042e1dea6c2e4a0c3ddc6c0c4d0400
182f3f2b3f2b12392f5f5e5d2b1112392f2b5d3031592514060623222626
3535060623222e0235343e02333335342e0223220e0223222e0235343e04
33321e02150723220e0215141633323637033f101c1b1a1f0e3b91514773
512d3e74a8697c16314e393d6149310c080c0904071b4256663461885426
a48d4464421f5950416f3d180c0c06060c0c5a3f46254666414c704a2546
3450351b1d231d0810190f191d1a231d132c557e54c4172d3f2946534244
>KAAAAA+Calibri AddT42Char 
1 9794 30 <00010021ffef026d04ad003a0089b0852b58b4290011232db8fff0b30f01
4d2db8fff0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b3
0b014d2db801f8400c170d2ded23481d0ded174831b80104b1074d003fed
3fedcd3fed012f33e12b2b2b2b2b32cdc43231301b4011232ded6c23481d
1740170ded6c17480731b80104b26c074d00183f2b3f2b1a10cd3f2b3031
5925140e0423222e02351123222635343e02333335343e0233321e021515
33321e02151406232311141633323e0233321e02026d081020292e174664
401d7e0f1205080d087d0713201819201208e7080c0904120fe737471724
1c1408050905045b1d22100e0906254b734e020e2024131a1107d6070c09
0404090c07d607111a132420fe0a5d5f090a09050e18>KAAAAA+Calibri AddT42Char 
1 4570 15 <00020099ffed03d50571002a003d00b6b0852b58b53f3f010a2136b8fff6
b30c014d36b8fff0b30d014d36b8ffe8b30b014d36b8fff0b40f10014c36
b801f8401b152b120c014d2b200d014d2b180b014d2b1810014d2b100f01
4d2bb8020a400900150a363521040530b80105b6264a1b46104c39b80105
b1054d003fed3f3f3fed121739012fd4e12b2b2b2b2b10e12b2b2b2b3239
31305d1bb70a36352104052630b8010540096c264a1b46104c0539b80105
b26c054d00183f2b3f3f3f2b12173930315901140e0223222e022715140e
0223222e023511343e0233321e0215113e0333321e0207342e0223220e02
0711161633323e0203d53363905d2b4946462708121b15141c1206071320
1819201208284b484828628b5728ae15345640203e404527447c433e5837
1901e775bb844611263a296e080c070404070c080538080c080404080c08
fde5293823104e83b0754582643d122a4232fe9953573c637b00>KAAAAA+Calibri AddT42Char 
1 9332 29 <00010051ffed02ce03ca00490110b0852b58400c2f4b3f4b4f4b7f4baf4b
0541b8fff0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b3
13014d41b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c
1b100d014d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f600
00ffc0400a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2e
dd370aeb115011601170110337113711163cdb411b05294a16e8054d003f
ed3f123939ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b12
39392f2fe12b2b2b2b2b2b31305d1b4025372edd6c110aeb6c0011101120
11030e033711371116293cdb6c411b05294a0516e86c054d00183f2b3f12
39392b1139392f2f5f5e5d2b2b30315901140e0223222e0435343e023332
1e0233323e0235342e0635343e0233321e0615140e0223222e0223220e02
15141e0602ce335e824e30574530160a04060b070b2b3f56382a44321b27
40505551402729527b5224483a291507030303070a06092236492f2a4029
1528405255534027010e456c4a260f171914241f131a10071b201b122336
252634281f222b3e563c3561492c0c1215100c0f16101119100716191613
23301c27352820222a3c5400>KAAAAA+Calibri AddT42Char 
1 5618 18 <0002005dffed039903ca002b003400eab0852b58402a2f363f366f360313
200d014d13200f014d1313212c100c014d2c180b014d2c100d014d2c100f
10014c2cb801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d01
4d04b8ffeeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a
4021212cc78004900402c00401d0040104041c2fdc264a18ea600e700e02
0e09ea1c4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b
5de12b2b2b2b12392f2b2b31305d1b4022042cc76c76040104041c262fdc
6c264a0e18ea6c000e100e020f030e1c09ea6c1c4d00183f2bc45f5e5d2b
3f2b12392f5d2b3031590114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>KAAAAA+Calibri AddT42Char 
1 9056 28 <00010099fffa02a703ca00330086b0852b58b4703501260fb8fff6b30c01
4d0fb8ffe8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f8
4012004013014d004011014d00200d014d001a0ab8012540092b4a260f15
2049154c003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d1bb12b
0ab80125400a6c2b4a260f152049154c00183f3f1239393f2b3031590114
0e0223222e0223220e020711140e0223222e023511343e0233321e021515
3e0333321e0602a70206090808171d24151930353a230812201918201307
06121c17161d100725413a391d0d21241d0c0403010362161e1109090908
142e4c37fdb0080b080404080b080384080b090303090b08833644270f03
080a0a090e1b>KAAAAA+Calibri AddT42Char 
1 4926 16 <0001005affed032003c9003500c8b0852b58b11c00b8ffc0b310014d00b8
ffe0b30d014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f01
4d27b8ffeeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b40
0d2f0e010e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48
312cb80106b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b
2b2b3231301b400c1f19e76c1f400a0d481f1324b80102b76c134a3103eb
6c31b8ffc0b5090d4831092cb80106b26c094d00183f2bc42b2b3f2bc42b
2b30315925140e0623222e0235343e0233321e0615140623222e02232206
15141e0233323e0233321e020320020507193c4b582f6196653541719959
2b51443518090602120d0f273c553a777f21405d3c39563f2b0c070a0703
a21119110d19251d12407bb37585bf7a3b101a22180e131812271f212821
b7ae5783582b242b2308131d>KAAAAA+Calibri AddT42Char 
1 6842 21 <00010099fffa03a005710032009db0852b58b43f34012a13b8ffe8b30b01
4d13b8fff0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f8
40171e0b0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a
00400c014d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239
012f2f2be12b2b2b2b10e12b2b2b2b3931305d1bb32a192d10b801064009
6c2d4a2446194c054c00183f3f3f3f2b123930315925140e0223222e0235
11342e022322060711140e0223222e023511343e0233321e021511363633
321e021503a00812201819201208182e49303e7c44081220191820130707
132018192012084790495a7b4c2119080b080404080b08020f4d5e442458
55fd8b080b080404080b080538080c080404080c08fde54b493d66896100
>KAAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e0097b0852b58bc000d01
520016003a01b5b5154444082d07be014300020020015400080001014340
0f04020db71a1a3f23b735068d031149b8012db43f078d0202003ffddefd
ce2ffddeed12392fed012fdde1dee110f1ce11392f33e1d4e131301b4014
1a0db76c1a1a3f3523b76c3503068d6c03113f49b8012d40096c3f400207
8d6c020200183f2b1ace2bce2f2bce2b12392f2b30315901112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>KAAAAA+Calibri AddT42Char 
KAAAAA+Calibri /CharStrings get begin
/g8 8 def
/g4 4 def
/g3 3 def
/g7 7 def
/g1 1 def
/g11 11 def
/g10 10 def
/g2 2 def
/g17 17 def
/g14 14 def
/g30 30 def
/g15 15 def
/g29 29 def
/g18 18 def
/g28 28 def
/g16 16 def
/g21 21 def
end
KAAAAA+Calibri /Encoding get
dup 33 /g8 put
dup 34 /g4 put
dup 35 /g3 put
dup 36 /g7 put
dup 37 /g1 put
dup 38 /g11 put
dup 39 /g10 put
dup 40 /g2 put
dup 41 /g17 put
dup 42 /g14 put
dup 43 /g30 put
dup 44 /g15 put
dup 45 /g29 put
dup 46 /g18 put
dup 47 /g28 put
dup 48 /g16 put
dup 49 /g21 put
pop
end
%ADOEndSubsetFont
/IFKELO+Calibri /KAAAAA+Calibri findfont ct_VMDictPut/IFKELO+Calibri*1 [33{/.notdef}rp /g8 /g4 /g3 /g7 /g1 /g11 /g10 /g2 /g17 /g14 /g30 /g15 /g29 /g18 /g28 /g16 /g21 206{/.notdef}rp]IFKELO+Calibri nfIFKELO+Calibri*1 [19 0 0 -18.9897 0 0 ]msf80.7996 34.4 mo(!"#$%&'\(%)[12.1903 10.1005 10.2335 4.72338 4.32436 8.65639 10.2334 10.8793 0 ]xsh54.3896 56.2382 mo(\)*+*,*-.%-.*/01)[9.96348 8.88068 6.06873 9.05167 9.96349 9.05167 7.34172 9.43162 4.32056 7.34174 9.43163 9.05167 6.27757 7.98769 0 ]xsh46.0488 67.2013 mo
186.982 67.2013 li
186.982 177.326 li
46.0488 177.326 li
cp
0 0 0 0 cmyk
f
46.0488 67.2013 mo
187.023 67.2013 li
187.023 177.285 li
46.0488 177.285 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 46.0488 67.2013 ]ct
@
grestore newpath
%ADOBeginSubsetFont: MAAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.313 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /MAAAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000005bc6670
676d000000000000067800000d2b676c79660000000000003ad4000050d4
6865616400000000000013a4000000366868656100000000000013dc0000
0024686d74780000000000001400000001186c6f63610000000000001518
0000008e6d61787000000000000015a8000000206e616d65000000000000
15c8000000207072657000000000000015e8000024eb6764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000051a
001500a0fff8ff77fff803480066015401cc00ac00a200b4008c0101006e
00000000000000000000011f000a04e2001400b4fff6035c00140028fdda
0568fea2ffef405a868574737271706f6e6d6c6b6a696867666564625f5e
5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f3e
3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a0908
07060504030201002c4523466020b02660b004262348482d2c4523462361
20b02661b004262348482d2c45234660b0206120b04660b004262348482d
2c4523462361b0206020b02661b02061b004262348482d2c45234660b040
6120b06660b004262348482d2c4523462361b0406020b02661b04061b004
262348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320
b08d44235920b0ed51582320b04d44235920b0042651582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b02823
70b10228453ab10200080d2d2c2045b00325456164b050515845441b2121
592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b000
8b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a03458a
8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b
525845441b2121592d2c01b005251023208af500b0016023edec2d2c01b0
05251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b001
600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2c45234560234560234560
23766818b08062202d2cb00426b00426b00425b0042545234520b0032660
62636820b0032661658a2344442d2c2045b0005458b040442045b0406144
1b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b0
1423421b2121592d2c4b515820b0032545695358441b2121591b2121592d
2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a60442d
2c45234560442d2c4b235158b90033ffe0b134201bb3330034005944442d
2cb0164358b00326458a586466b01f601b64b020606620581b21b04059b0
01615923586559b02923442310b029e01b2121212121592d2cb0164358b0
04254564b020606620581b21b04059b0016123586559b0292344b00425b0
0725082058021b0359b0052510b004252046b0042523423cb0072510b006
252046b00425b0016023423c2058011b0059b0052510b00425b029e0b007
2510b00625b029e0b00425b00725082058021b0359b00425b003254348b0
0625b00325b0016043481b2159212121212121212d2cb0164358b0042545
64b020606620581b21b04059b0016123581b6559b0292344b00525b00825
082058021b0359b0042510b005252046b0042523423cb00425b0072508b0
072510b006252046b00425b0016023423c2058011b0059b0042510b00525
b029e0b02920456544b0072510b00625b029e0b00525b00825082058021b
0359b00525b003254348b00425b0072508b00625b00325b0016043481b21
59212121212121212d2c02b00425202046b004252342b0052508b0032545
48212121212d2c02b0032520b0042508b0022543482121212d2c45232045
1820b00050205823652359236820b040505821b04059235865598a60442d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d2c
b002435458b0462b1b21212121592d2cb002435458b0472b1b212121592d
2cb002435458b0482b1b21212121592d2cb002435458b0492b1b21212159
2d2c2320b000508a8a64b10003255458b0401bb10103255458b005438b59
b04f2b5923b0622b2321235865592d2cb108000c215460432d2c01462346
6023466123201020468a61b8ff80628ab140408a704560683a2d2c208a23
49648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b2020202436042b12401885458
b2022002436042004b014b5258b2020802436042591bb940000080885458
b202040243604259b94000008063b80100885458b202080243604259b940
00010063b80200885458b202100243604259b12601885158b94000020063
b80400885458b202400243604259b94000040063b80800885458b2028002
43604259b12801885158b94000080063b81000885458ba00020100000243
604259595959595959b10002435458400a0540084009400c020d021bb101
02435458b2054008ba010000090100b30c010d011bb18002435258b20540
08b80180b109401bb901000002435258b2054008ba0180000901401bb901
800002435258b2054008b80200b109401bb2054008ba0100000901005959
59b9400000808855b94000020063b8040088555a58b30c000d011bb30c00
0d0159595942424242422d2c451868234b51582320452064b04050587c59
688a6059442d2cb00016b00225b0022501b001233e00b002233eb1010206
0cb00a236542b00b234201b001233f00b002233fb10102060cb006236542
b0072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b0
042510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58
b0092b5920b005254ab0042547b004254760b0062547b0806361b00225b0
005558b00325b00725496359b0082558001b0159b00425b0062549b00925
5cb009255a58b0092b59b0072546b0806361b0032520b0005558631b2159
612320b0005558b080631b21b08059b0592bb006255c586959b004252020
10b00048233ab0062658001b0159b0052658b003252f598a12233221212d
2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b0
072559b00225b00225070cb005256323b00625636020b940000400635358
21b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1b
b00426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab0
0b2eb00525b0052507595920b0005558b00525b0052587b00725b007250b
b0092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b008
25b00b254923b00625b0062587b00a2510b00b25c15920b00051b8005223
78b00161b00225b00725b0072507b00a25b00d254961b08062b00525b005
250bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b0
0625b0062507b00925b00c2549b0032554b8ffa723792121212121212121
212121212d2c23b0005458b9400000001bb900004000598ab0005458b940
0000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9000040
00590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b0
5b2b2d2cb00426b00426080db00426b00426080db05b2b2d2cb0022563b0
206066b00225b82000626023622d2c204569442d2c234ab1024e2b2d2c23
4ab1014e2b2d2c238a4a234564b0022564b002256164b003435258212064
59b1024e2b23b000505865592d2c238a4a234564b0022564b002256164b0
0343525821206459b1014e2b23b000505865592d2c20b003254ab1024e2b
8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b8a
103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b004
252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b003
25466061b08062208a2010233a232010233a2d2cb0032547b003254760b0
052547b0806361b00225b00625496323b005254ab080632058621b2159b0
042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e2b
208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb08050
20605920606020b001515821211b20b005515821206661b0402361b10003
2550b00325b00325505a5820b00325618a535821b000591b21591bb00754
582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab000
5358b0001b8a8a238ab00159b004254620666120b00526b0062649b00526
b00526b0702b236165b02060206661b02061652d2cb0022546208a20b000
505821b1024e2b1b452321596165b00225103b2d2cb0042620b802006220
b80200638a236120b05d602bb00525118a128a20398a58ba005d10000004
266356602b23212010204620b1024e2b23611b2321208a201049b1024e2b
593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb15d
0725602bb00525b00525b00525b00525b06f2bba005d1000000826635660
2b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb00217
38b00052b00225b001525a58b00425b0062549b00325b00525496020b040
5258211bb000525820b0025458b00425b00425b00725b0072549b0021738
1bb00425b00425b00425b0062549b0021738595959595921212121212d2c
b12801885158b94000040063b8080088545c1bb001592d2cb12801885158
b94000040063b8080088545c1bb001592d000001000000063333a1099dfd
5f0f3cf50019080000000000bbeb7ccc00000000d5968a66fbfafd8009ec
083600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec000100000000000000000000000000000046040e000001cf000004a1
0023045a00ac0444006104ec00ac03e800ac03ad00ac050c005b04fc00ac
020400ac035d00ac06d700ac052a00ac054c0063042200ac056200630458
00ac03ad004703e6000f052200aa048a0022071e003d03bf003b03d5005c
043400990362005a0434006003fb005d0271002503c400350434009901d6
008501d6009906640099043400990438005a043400990434006002ca0099
0321005102ae002104340094039d002205b8003503770029039f00220329
005903b50085022400bb0205009701ff002a0317000102730045026d0085
026d007a05750000040e0048040e00ae040e0072040e0067040e0030040e
0065029d003802b1ff4b05b8004803fc004603fc005e03fc004503fc0065
000000bf00bf016c023a02d2034f03e70463052805df0632068c074e07f9
0882090e09c10a820b750be90c820d000da20e000ed20f84102f10de119d
1232134213d8145e14a915a4164716e61795184718d119b81a4a1aed1bb9
1cba1d591dce1e3f1ee11f341f5f1f991fc91ff52046209e217e2242230c
23c724dc25b6268926e227232734279227dd2822286a0000000100000046
043a00170108000800020010002f00870000123602350004000100000001
00120001000000000006000e00005a574a4b465a2b43616c69627269b109
03415302c802c60038001f02c702c60038001f02dd003802da005502d900
3802d7005502d8003802d7005502d6003802d5005502d4003802d3005502
d2003802d1005502bf003802be005502bd003802bc0055000402db003402
db005402db0003003402db005402db006402db00a402db00d402db000500
6b02d50001000b02d10001001402c2004402c2006402c2007402c2009402
c2000500a402be000100a402bc000100200284b40918014a20b80283b409
18014a20b80282b40918014a20b80281b40918014a20b80280b40918014a
20b8027fb40918014a20b8027eb40918014a20b8027db40918014a20b802
7cb40918014a20b8027bb40918014a20b8027ab40918014a20b80279b409
18014a20b80278b40918014a20b80277b40918014a20b80276b40918014a
20b80275b40918014a20b80274b40918014a20b80273b40918014a20b802
71b40918014a20b80270b40918014a20b8026fb40918014a20b8026eb409
18014a20b8026db40918014a20b8026cb40918014a20b8026bb40918014a
20b8026ab40918014a20b80269b40918014a20b80268b40918014a20b802
67b40918014a20b80266b40918014a20b80265b40918014a20b80264b409
18014a20b80263b40918014a20b80262b40918014a20b80261b40918014a
20b80260b40918014a20b8025fb40918014a20b8025eb40918014a20b802
5db40918014a20b8025cb40918014a20b8025bb40918014a20b8025ab409
18014a20b80259b40918014a20b80258b40918014a20b80257b40918014a
20b80256b40918014a20b80255b40918014a20b80254b40918014a20b802
53b40918014a20b80252b40918014a20b80251b40918014a20b80250b409
18014a20b8024fb40918014a20b8024eb40918014a20b8024db40918014a
20b8024cb40918014a20b8024bb40918014a20b8024ab40918014a20b802
49b40918014a20b80248b40918014a20b80247b40918014a20b80246b409
18014a20b80245b40918014a20b80244b40918014a20b80243b40918014a
20b80242b40918014a20b80241b40918014a20b80240b40918014a20b802
3fb40918014a20b8023eb40918014a20b8023db40918014a20b8023cb409
18014a20b8023bb40918014a20b8023ab40918014a20b80239b40918014a
20b80238b40918014a20b80237b40918014a20b80236b40918014a20b802
35b40918014a20b80234b40918014a20b80233b40918014a20b80232b409
18014a20b80231b40918014a20b80230b40918014a20b8022fb40918014a
20b8022eb40918014a20b8022db40918014a20b8022cb40918014a20b802
2bb40918014a20b8022ab40918014a20b80229b40918014a20b80228b409
18014a20b80227b40918014a20b80226b40918014a20b80225b40918014a
20b80224b40918014a20b80223b40918014a20b80222b40918014a20b802
21b40918014a20b80220b40918014a20b8021fb40918014a20b8021eb409
18014a20b8021db40918014a20b8021cb40918014a20b8021bb40918014a
20b8021ab40918014a20b80219b40918014a20b80218b40918014a20b802
17b40918014a20b80216b40918014a20b80215b40918014a20b80214b409
18014a20b80213b40918014a20b80212b40918014a20b80211b40918014a
20b80210b40918014a20b8020fb40918014a20b8020eb40918014a20b802
0db40918014a20b8020cb40918014a20b8020bb40918014a20b8020ab409
18014a20b80209b40918014a20b80208b40918014a20b80207b40918014a
20b80206b40918014a20b80205b40918014a20b80204b40918014a20b802
03b40918014a20b80202b40918014a20b80201b40918014a20b80200b409
18014a20b801ffb40918014a20b801feb40918014a20b801fdb40918014a
20b801fcb40918014a20b801fbb40918014a20b801fab40918014a20b801
f9b40918014a20b801f8b40918014a20b801f7b40918014a20b801f6b409
18014a20b801f5b40918014a20b801f4b40918014a20b801f3b40918014a
20b801f2b40918014a20b801f1b40918014a20b801f0b40918014a20b801
efb40918014a20b801eeb40918014a20b801edb40918014a20b801ecb409
18014a20b801ebb40918014a20b801eab40918014a20b801e9b40918014a
20b801e8b40918014a20b801e7b40918014a20b801e6b40918014a20b801
e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b409
18014a20b801e1b40918014a20b801e0b40918014a20b801dfb40918014a
20b801deb40918014a20b801ddb40918014a20b801dcb40918014a20b801
dbb40918014a20b801dab40918014a20b801d9b40918014a20b801d8b409
18014a20b801d7b40918014a20b801d6b40918014a20b801d5b40918014a
20b801d4b40918014a20b801d3b40918014a20b801d2b40918014a20b801
d1b40918014a20b801d0b40918014a20b801cfb40918014a20b801ceb409
18014a20b801cdb40918014a20b801ccb40918014a20b801cbb40918014a
20b801cab40918014a20b801c9b40918014a20b801c8b40918014a20b801
c7b40918014a20b801c6b40918014a20b801c5b40918014a20b801c4b409
18014a20b801c3b40918014a20b801c2b40918014a20b801c1b40918014a
20b801c0b40918014a20b801bfb40918014a20b801beb40918014a20b801
bdb40918014a20b801bcb40918014a20b801bbb40918014a20b801bab409
18014a20b801b9b40918014a20b801b8b40918014a20b801b7b40918014a
20b801b6b40918014a20b801b5b40918014a20b801b4b40918014a20b801
b3b40918014a20b801b2b40918014a20b801b1b40918014a20b801b0b409
18014a20b801afb40918014a20b801aeb40918014a20b801adb40918014a
20b801acb40918014a20b801abb40918014a20b801aab40918014a20b801
a9b40918014a20b801a8b40918014a20b801a7b40918014a20b801a6b409
18014a20b801a5b40918014a20b801a4b40918014a20b801a3b40918014a
20b801a2b40918014a20b801a1b40918014a20b801a0b40918014a20b801
9fb40918014a20b8019eb40918014a20b8019db40918014a20b8019cb409
18014a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a
20b80198b40918014a20b80197b40918014a20b80196b40918014a20b801
95b40918014a20b80194b40918014a20b80193b40918014a20b80192b409
18014a20b80191b40918014a20b80190b40918014a20b8018fb40918014a
20b8018eb40918014a20b8018db40918014a20b8018cb40918014a20b801
8bb40918014a20b8018ab40918014a20b80189b40918014a20b80188b409
18014a20b80187b40918014a20b80186b40918014a20b80185b40918014a
20b80184b40918014a20b80183b40918014a20b80182b40918014a20b801
81b40918014a20b80180b40918014a20b8017fb40918014a20b8017eb409
18014a20b8017db40918014a20b8017cb40918014a20b8017bb40918014a
20b8017ab40918014a20b80179b40918014a20b80178b40918014a20b801
77b40918014a20b80176b40918014a20b80175b40918014a20b80174b409
18014a20b80173b40918014a20b80172b40918014a20b80171b40918014a
20b80170b40918014a20b8016fb40918014a20b8016eb40918014a20b801
6db40918014a20b8016cb40918014a20b8016bb40918014a20b8016ab409
18014a20b80169b40918014a20b80168b40918014a20b80167b40918014a
20b80166b40918014a20b80165b40918014a20b80164b40918014a20b801
63b40918014a20b80162b40918014a20b80161b40918014a20b80160b409
18014a20b8015fb40918014a20b8015eb40918014a20b8015db40918014a
20b8015cb40918014a20b8015bb40918014a20b8015ab40918014a20b801
59b40918014a20b80158b40918014a20b80157b40918014a20b80156b409
18014a20b80155b40918014a20b80154b40918014a20b80153b40918014a
20b80152b40918014a20b80150b40918014a20b8014fb40918014a20b801
4eb40918014a20b8014cb40918014a20b8014bb40918014a20b8014ab409
18014a20b80149b40918014a20b80148b40918014a20b80147b40918014a
20b80146b40918014a20b80145b40918014a20b80144b40918014a20b801
43b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281
b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e
3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411f
b80278b21d431fb80277b21d431fb80276b21d431fb80275b21d411fb802
74b21d431fb80273b21d431fb80272b21d411fb80271b21d421fb80270b2
1d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d43
1fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb8
0267b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb80263
b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c
451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451f
b8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c451fb802
56b21c451fb80255b21c451fb80254b21c451fb80253b21c451fb80252b2
1c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c45
1fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb8
0249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245
b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b
491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1f
b8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb802
38b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b2
1b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b
1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8
022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227
b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b
4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1f
b8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb802
1ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b2
1a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f
1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8
020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209
b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219
511fb80204b219511fb80203b219501fb80202b219511fb80201b219511f
b80200b219511fb801ffb219511fb801feb219501fb801fdb219511fb801
fcb219511fb801fbb219511fb801fab219501fb801f9b219511fb801f8b2
19511fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b21853
1fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b218531fb8
01efb218541fb801eeb218541fb801edb218541fb801ecb218531fb801eb
b218531fb801eab218541fb801e9b218541fb801e8b218541fb801e7b218
541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3b218541f
b801e2b218541fb801e1b218541fb801e0b218531fb801dfb218531fb801
deb218541fb801ddb218541fb801dcb218541fb801dbb218541fb801dab2
18531fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b21756
1fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b217571fb8
01d1b217571fb801d0b217561fb801cfb217561fb801ceb217571fb801cd
b217571fb801ccb217571fb801cbb217571fb801cab217561fb801c9b217
561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b217571f
b801c4b217571fb801c3b217561fb801c2b217571fb801c1b217571fb801
c0b217571fb801bfb217561fb801beb217561fb801bdb217571fb801bcb2
17571fb801bbb217571fb801bab217571fb801b9b217571fb801b8b21756
1fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b217571fb8
01b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801af
b2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb216
5b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1f
b801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801
a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2
163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b
1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb8
0195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191
b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db216
5b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1f
b80188b2165b1fb80187b2165b1fb80186b215611fb80185b215621fb801
84b215621fb80183b215661fb80182b215661fb80181b215551fb80180b2
15451fb8017fb215361fb8017eb215361fb8017db215611fb8017cb21562
1fb8017bb215621fb8017ab215641fb80179b215661fb80178b215661fb8
0177b215661fb80176b215661fb80175b215661fb80174b215661fb80173
b215451fb80172b215621fb80171b215621fb80170b215631fb8016fb215
641fb8016eb215661fb8016db215661fb8016cb215661fb8016bb215661f
b8016ab215661fb80169b215621fb80168b215621fb80167b215611fb801
66b215641fb80165b215641fb80164b215661fb80163b215661fb80162b2
15661fb80161b215661fb80160b215661fb8015fb215661fb8015eb21555
1fb8015db215451fb8015cb215451fb8015bb215361fb8015ab215611fb8
0159b215621fb80158b215621fb80157b215631fb80156b215641fb80155
b215661fb80154b215661fb80153b215661fb80152b215661fb80151b214
401fb80150b214551fb8014fb214561fb8014eb214831fb8014db2142d1f
b8014cb214401fb8014bb214401fb8014ab214411fb80149b214401fb801
48b214401fb80147b214411fb80146b2147e1fb80145b214871fb80144b2
147f1fb80143b214801fb80142b212461fb80141b212461fb80140b21246
1fb8013fb212461fb8013eb212441fb8013db212461fb8013cb211591fb8
013bb211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137
b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b211
2c1fb80132b211471fb80131b211551fb80130b211571fb8012fb211571f
b8012eb211581fb8012db211591fb8012cb211591fb8012bb2115a1fb801
2ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2
115b1fb80125b211561fb80124b211561fb80123b211571fb80122b21158
1fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8
011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119
b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b210
5f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1f
b80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb801
0cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2
105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f
1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621f
ff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f
641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641f
f00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f
641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681f
e10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e
681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261f
d20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d
6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261f
c30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711f
bc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c
721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1f
ad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b
7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f
9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b
7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f
8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255
805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d40
12060a7c557a557bab7a557955775578ab7755ba028600660285403c5576
ab755504751475747503f47501ab75014475013075010200751075207503
0c7455725573ab7255007250728072b072043bb072e072020072010ab8ff
c0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a0325
1f6938675568ab67556638645565ab645563386255613860555f385d555e
ab5d555c385a555bab5a55593858555703251f5638545555ab5455533851
5552ab51554f384e554e03251f4d384b554cab4b554a38485549ab485547
3846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b
401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f19
7f198f19030f18cf18024018292c460f17cf17df17ef1704134017292e46
0016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b31631
3546b8ffc0401f162326460f15010f151f150245ef150186000301200101
0001100120010308b8ffc0b401151f4603bd010001000005000101900054
2b4bb80800524bb008505bb00188b02553b00188b040515ab00688b00055
5a5b58b101018e59b101024354b0144b515a58b101018e59858d8d001d42
4bb01d5358b203a0a01d42594bb0805358b20340401d42594bb0ff5358b2
0300001d42592b5e7375732b58403d0011e011f0110315bf10cf10020f0f
010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d
1f0d020f0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02
553f0b4f0b02400b3f4346400b2d30460003012001010001100120010308
b8ffc0b301151f462b5e7375732b2b745e732b2b5e73742b73742b737474
5e735901755e73742b2b2b2b5e732b5e732b7374755e735e735e73755e73
2b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b5e73755e732b2b5e735f73737373742b2b2b2b2b2b5e73742b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2bb1000243545841ff028400640283006402820064028100640280006402
7f0064027e0064027d0064027c0064027b0064027a006402790064027800
640277006402760064027500640274006402730064027100640270006402
6f0064026e0064026d0064026c0064026b0064026a006402690064026800
640267006402660064026500640264006402630064026200640261006402
600064025f0064025e0064025d0064025c0064025b0064025a0064025900
640258006402570064025600640255006402540064025300640252006402
51006402500064024f0064024e0064024d0064024c0064024b0064024a00
640249006402480064024700640246006402450064024400640243006402
4200640241006402400064023f0064023e0064023d0064023c0064023b00
64023a006402390064023800640237006402360064023500640234006402
330064023200640231006402300064022f0064022e0064022d0064022c00
64022b0064022a0064022900640228006402270064022600640225006402
24006402230064022200640221006402200064021f0064021e0064021d00
64021c0064021b0064021a00640219006402180064021700640216006402
1500640214006402130064021200640211006402100064020f0064020e00
64020d0064020c0064020b0064020a006402090064020800640207006402
06006402050064020441ff00640203006402020064020100640200006401
ff006401fe006401fd006401fc006401fb006401fa006401f9006401f800
6401f7006401f6006401f5006401f4006401f3006401f2006401f1006401
f0006401ef006401ee006401ed006401ec006401eb006401ea006401e900
6401e8006401e7006401e6006401e5006401e4006401e3006401e2006401
e1006401e0006401df006401de006401dd006401dc006401db006401da00
6401d9006401d8006401d7006401d6006401d5006401d4006401d3006401
d2006401d1006401d0006401cf006401ce006401cd006401cc006401cb00
6401ca006401c9006401c8006401c7006401c6006401c5006401c4006401
c3006401c2006401c1006401c0006401bf006401be006401bd006401bc00
6401bb006401ba006401b9006401b8006401b7006401b6006401b5006401
b4006401b3006401b2006401b1006401b0006401af006401ae006401ad00
6401ac006401ab006401aa006401a9006401a8006401a7006401a6006401
a5006401a4006401a3006401a2006401a1006401a00064019f0064019e00
64019d0064019c0064019b0064019a006401990064019800640197006401
960064019500640194006401930064019200640191006401900064018f00
64018e0064018d0064018c0064018b0064018a0064018900640188006401
870064018600640185006441800184006401830064018200640181006401
800064017f0064017e0064017d0064017c0064017b0064017a0064017900
640178006401770064017600640175006401740064017300640172006401
71006401700064016f0064016e0064016d0064016c0064016b0064016a00
640169006401680064016700640166006401650064016400640163006401
6200640161006401600064015f0064015e0064015d0064015c0064015b00
64015a006401590064015800640157006401560064015500640154006401
5300640152006401500064014f0064014e0064014c0064014b0064014a00
64014900640148006401470064014600640145006401440064014300642b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b00737373737373742b2b2b2b2b2b2b2b2b2b185f5e00
00>
[15977 4717 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 5380 18 <00010047ffed0363052100490128b0852b58b90041ffe8b40f10014c41b8
fff0b30d014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d
41b8022c402b32401314014c324011014d243224320c1b180f10014c1b10
0d014d1b1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d
00b8ffc0b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb01
270037000a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c37
113711163cb8010cb5411b05295316b80129b10556003fed3f123939ed11
39392f2f2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b
2be12b2b2b2b2b31301bb1372eb80127b26c110ab80126b76c3711371116
293cb8010cb76c411b0529530516b80129b26c055600183f2b3f1239392b
1139392f2f2b2b30315901140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e060363
4377a15d416f573b170b04080c080e3350714a385d43243252696e685233
3b6991542b574d3c1306040203060b070b2f445d3a3650341a32536a6e6a
5333016b5b8e633216202218251f161d12072228231e375033374e3b3133
3e54714f517f562d0f191f130b111813121c13091c231d1d304225364e3c
32333d537100>MAAAAA+Calibri AddT42Char 
1 8636 28 <0002005dffed039903ca002b003400eab0852b58402a2f363f366f360313
200d014d13200f014d1313212c100c014d2c180b014d2c100d014d2c100f
10014c2cb801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d01
4d04b8ffeeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a
4021212cc78004900402c00401d0040104041c2fdc264a18ea600e700e02
0e09ea1c4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b
5de12b2b2b2b12392f2b2b31305d1b4022042cc76c76040104041c262fdc
6c264a0e18ea6c000e100e020f030e1c09ea6c1c4d00183f2bc45f5e5d2b
3f2b12392f5d2b3031590114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>MAAAAA+Calibri AddT42Char 
1 7168 24 <0002005cffed033f03ca0033004000f6b0852b5840200f421f422f42030b
0917340c0c014d34100d014d34180b014d34100f10014c34b801f7400e00
27270f00010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8
ffe8b30b014d3ab8ffe8b40f10014c3ab8020840141117c500341034023b
c0340100340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d
04002f3fed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b
5e5d392f10e12b2b2b2b323931305e5d1b400d0b17013417c56c34342e41
222ab8011b40166c00220116042222042e1dea6c2e4a0c3ddc6c0c4d0400
182f3f2b3f2b12392f5f5e5d2b1112392f2b5d3031592514060623222626
3535060623222e0235343e02333335342e0223220e0223222e0235343e04
33321e02150723220e0215141633323637033f101c1b1a1f0e3b91514773
512d3e74a8697c16314e393d6149310c080c0904071b4256663461885426
a48d4464421f5950416f3d180c0c06060c0c5a3f46254666414c704a2546
3450351b1d231d0810190f191d1a231d132c557e54c4172d3f2946534244
>MAAAAA+Calibri AddT42Char 
1 12430 39 <00010099fffa02a703ca00330086b0852b58b4703501260fb8fff6b30c01
4d0fb8ffe8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f8
4012004013014d004011014d00200d014d001a0ab8012540092b4a260f15
2049154c003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d1bb12b
0ab80125400a6c2b4a260f152049154c00183f3f1239393f2b3031590114
0e0223222e0223220e020711140e0223222e023511343e0233321e021515
3e0333321e0602a70206090808171d24151930353a230812201918201307
06121c17161d100725413a391d0d21241d0c0403010362161e1109090908
142e4c37fdb0080b080404080b080384080b090303090b08833644270f03
080a0a090e1b>MAAAAA+Calibri AddT42Char 
1 7944 26 <0001005affed032003c9003500c8b0852b58b11c00b8ffc0b310014d00b8
ffe0b30d014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f01
4d27b8ffeeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b40
0d2f0e010e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48
312cb80106b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b
2b2b3231301b400c1f19e76c1f400a0d481f1324b80102b76c134a3103eb
6c31b8ffc0b5090d4831092cb80106b26c094d00183f2bc42b2b3f2bc42b
2b30315925140e0623222e0235343e0233321e0615140623222e02232206
15141e0233323e0233321e020320020507193c4b582f6196653541719959
2b51443518090602120d0f273c553a777f21405d3c39563f2b0c070a0703
a21119110d19251d12407bb37585bf7a3b101a22180e131812271f212821
b7ae5783582b242b2308131d>MAAAAA+Calibri AddT42Char 
1 9860 31 <00010099fffa03a005710032009db0852b58b43f34012a13b8ffe8b30b01
4d13b8fff0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f8
40171e0b0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a
00400c014d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239
012f2f2be12b2b2b2b10e12b2b2b2b3931305d1bb32a192d10b801064009
6c2d4a2446194c054c00183f3f3f3f2b123930315925140e0223222e0235
11342e022322060711140e0223222e023511343e0233321e021511363633
321e021503a00812201819201208182e49303e7c44081220191820130707
132018192012084790495a7b4c2119080b080404080b08020f4d5e442458
55fd8b080b080404080b080538080c080404080c08fde54b493d66896100
>MAAAAA+Calibri AddT42Char 

1 0 1 <> MAAAAA+Calibri AddT42Char 
1 11724 37 <00020099fe9403d503ca002a003d00b1b0852b58b53f3f0121360ab8fff0
b30d014d0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0a
b801f84017152b200d014d2b120c014d2b180f10014c2b180b014d2bb802
0a400900150a363521040530b80105b6264a1b49104f39b80105b1054d00
3fed3f3f3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d1bb7
0a36352104052630b8010540096c264a1b49104f0539b80105b26c054d00
183f2b3f3f3f2b12173930315901140e0223222e022711140e0223222e02
3511343e0233321e0215153e0333321e0207342e0223220e020711161633
323e0203d53363925e2844414024081220191820130706121c14151b1207
294c4d512d628a5728ae15335640203e404627447a433e59371a01e976bc
834710223423fe3e080c080404080c0804e9090b080303080b09792a3e29
154c84af754581643c13294331fe9a53583c647c>MAAAAA+Calibri AddT42Char 
1 10578 34 <00010099fffa05d003ca0050011eb0852b58401b12100b014d13180b014d
26100b0c014c27180b0c014c7052014613b8fff6b30c014d13b8ffe8b30b
014d13b8fff0b310014d13b8fff0b30f014d13b8ffeab30d014d13b801f8
401e1e160d014d1e1e320a0a0c014d0a100d014d0a180b014d0a100f1001
4c0ab801f9b7504011014d503e27b8fff6b30c014d27b8ffe8b30b014d27
b8fff0b310014d27b8fff0b30f014d27b8fff0b30d014d27bb01f8003200
100106b24b4a24b80106400d414a3e462d38492d4c194c054c003f3f3f3f
1239393fed3fed012fe12b2b2b2b2b39d42be12b2b2b2b11392f2be12b2b
2b2b2b3931305d002b2b2b2b1bb14b10b80106b46c4b4a4124b80106400e
6c414a3e462d38492d4c194c054c00183f3f3f3f1239393f2b3f2b303159
25140e0223222e023511342e022322060711140e0223222e023511342e02
2322060711140e0223222e023511343e0233321e021515363633321e0217
3e0333321e021505d00812201819201308142c442e397345081320181721
1307162c432e397444081220191820130706121c17161d10074c8f493859
4430102d514b47245776491f19080b080404080b080223395e44245855fd
8b080b080404080b080223395e44245855fd8b080b080404080b08038408
0b090303090b0877554f1a2f412831442a133d66894c>MAAAAA+Calibri AddT42Char 
1 13168 41 <00010021ffef026d04ad003a0089b0852b58b4290011232db8fff0b30f01
4d2db8fff0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b3
0b014d2db801f8400c170d2ded23481d0ded174831b80104b1074d003fed
3fedcd3fed012f33e12b2b2b2b2b32cdc43231301b4011232ded6c23481d
1740170ded6c17480731b80104b26c074d00183f2b3f2b1a10cd3f2b3031
5925140e0423222e02351123222635343e02333335343e0233321e021515
33321e02151406232311141633323e0233321e02026d081020292e174664
401d7e0f1205080d087d0713201819201208e7080c0904120fe737471724
1c1408050905045b1d22100e0906254b734e020e2024131a1107d6070c09
0404090c07d607111a132420fe0a5d5f090a09050e18>MAAAAA+Calibri AddT42Char 
1 12706 40 <00010051ffed02ce03ca00490110b0852b58400c2f4b3f4b4f4b7f4baf4b
0541b8fff0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b3
13014d41b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c
1b100d014d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f600
00ffc0400a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2e
dd370aeb115011601170110337113711163cdb411b05294a16e8054d003f
ed3f123939ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b12
39392f2fe12b2b2b2b2b2b31305d1b4025372edd6c110aeb6c0011101120
11030e033711371116293cdb6c411b05294a0516e86c054d00183f2b3f12
39392b1139392f2f5f5e5d2b2b30315901140e0223222e0435343e023332
1e0233323e0235342e0635343e0233321e0615140e0223222e0223220e02
15141e0602ce335e824e30574530160a04060b070b2b3f56382a44321b27
40505551402729527b5224483a291507030303070a06092236492f2a4029
1528405255534027010e456c4a260f171914241f131a10071b201b122336
252634281f222b3e563c3561492c0c1215100c0f16101119100716191613
23301c27352820222a3c5400>MAAAAA+Calibri AddT42Char 
2 202 52 <00010001fee7030a05be00150017b0852b58b11005002f2f31301bb11005
00182f2f303159170e0323222e0237013e0333321e0207a8040d141d1519
21120406025d040d131e151920120405f10d0f0804070d130d067b0d0f09
03070c140d00>MAAAAA+Calibri AddT42Char 
1 12074 38 <00020060fe94039c03ca002a003d00b7b0852b58401b3f3f011f0b2b100d
014d2b0a0c014d2b180b014d2b100f10014c2bbb01f9002a0033ffeeb30c
014d33b8fff0b30f014d33b8ffeab30d014d33b8ffe8b310014d33b8ffe8
b30b014d33b8020a400a1525490b3d2b1f04102eb80105b21a4a38b80104
b3104d054f003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b32
3931305d1b400a25490b3d2b1f04101a2eb80105b46c1a4a1038b80104b4
6c104d054f00183f3f2b3f2b1217393f30315901140e0223222e0235110e
0323222e0235343e0233321e021735343e0233321e021503262623220e02
15141e0233323e0237039c09122018191f1407294a484927628a57283263
915f284645472a08121c15141c1107a6437d443f58371915345641213d40
4627feb4080c080404080c0801cd2939230f4d83b16274bb844711253b29
6d090b080303080b09fef553573c627c404582643d122a433100>MAAAAA+Calibri AddT42Char 
1 13460 42 <00010094ffed039c03bc003200b8b0852b58401f3f34010b27100d014d27
0a0c014d27080b014d27100f10014c27100b014d27b801f9b6004011014d
001fb8fff0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8
b30b014d1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49
270b05194924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b
2b2bd42be12b2b2b2b2b3931305d1b40092d49270b0519490e24b80105b4
6c0e4d054c00183f3f2b3f1239393f30315925140e0223222e0235350606
23222e023511343e0233321e021511141e023332363711343e0233321e02
15039c07121d15171d11064d964d5a7b4c210714201818201308172f4830
3e7b4507141f191820120919080b080404080b0877554e3c678962022208
0b090303090b08fdf44f5f432558550275080b090303090b0800>MAAAAA+Calibri AddT42Char 
1 10160 32 <00020085fffa0151052f0015002100a7b0852b58b73f234f236f230316b8
ffe8b30d014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d
16b8fff0b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d
15b8fff6b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b6
0a1f400f014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4
e12b2b2b2b2b2b31305d1bb1191fb8013eb56c191049054c00183f3fc62b
30315925140e0223222e023511343e0233321e0215131406232226353436
333216013e08122019182013070713201819201208132c3b3a2b2c3b3a2b
19080b080404080b080384070c080404080c0701303a2a29393a2a29>MAAAAA+Calibri AddT42Char 
1 15810 49 <000200bbfff7018d0395001300270032b0852b58b10014b8027bb70a1e23
194c050f48003fcd3fcd012f33e13231301bb623194c05400f4800183f1a
cd3fcd30315901140e0223222e0235343e0233321e0211140e0223222e02
35343e0233321e02018d0919281f20281809091828201f2819090919281f
20281809091828201f2819090320202c1b0b0b1b2c20222d1b0b0b1b2dfd
28212c1b0b0b1b2c21212d1a0c0c1a2d>MAAAAA+Calibri AddT42Char 
1 6404 21 <00010022fffa0468051400240086b0852b58401d24080b014d2824011a08
0b014d261a01281701260d012c19012c180119b8ffe8b40f10014c19b8ff
e8b40c0d014c18b8ffe8b40f10014c18b8ffe840120c0d014c1918191826
251f52180512520555003f3f12393f11120139392f2f2b2b2b2b3130005d
5d015d5d5d2b5d2b1bb71f5218051252055500183f3f12393f303159250e
0323222e0427012626363633321e02170133013e0333321616060702b704
0e19271d162118110c0703fe5908011228221c2112090401730101690308
14241e1f240d03081e0b0e0803010405080b0804b2161b0e0403080d0afb
bf043f0b0e0803050e1b1600>MAAAAA+Calibri AddT42Char 
1 11406 36 <0002005affed03de03ca0013002700c9b0852b58401c3f29012812012911
01260d01260c012608012607012a03012902011eb8ffe8b310014d1eb8ff
f0b30f014d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1e
b8020a401e2f0a010a141810014d14100f014d14200d014d14120c014d14
180b014d14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b801
02b1054d003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d
5d5d5d5d5d5d5d5d1bb10f19b80101b46c0f4a0523b80102b26c054d0018
3f2b3f2b30315901140e0223222e0235343e0233321e0207342e0223220e
0215141e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e
6a4f496944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427e
b47c49826239345f824d4a826139345e8200>MAAAAA+Calibri AddT42Char 
1 8286 27 <00020060ffed039c056d0026003900bcb0852b58401f3f3b010b1b39100d
014d390a0c014d391010014d39100f014d39180b014d39bb01f90000002f
ffe0b30d014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d
2fb8ffe8b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a
34b80104b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b
2b2b2b2b323931305d1b400a21460b39271b040e182ab80105b46c184a0e
34b80104b46c0e4d054c00183f3f2b3f2b1217393f30315925140e022322
2e023535060623222e0235343e023332161711343e0233321e0215032626
23220e0215141e0233323e0237039c07111c14151c120847995b638c5728
3262915f4f834007141f1819201209a6437d443f58371915345641213d40
462719080c070404070c08774d564d83b16274bb84474543020b070d0705
05070d07fd4553573c627c404482653d122a4331>MAAAAA+Calibri AddT42Char 
1 11080 35 <00010099fffa03a003ca003200b8b0852b58400f12100b014d13100b014d
3f34012a13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8
fff6b30c014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d01
4d0b100f014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b8
0106400a2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b
2b2b10e12b2b2b2b2b3931305d002b2b1bb12d10b80106400b6c2d4a2a19
2449194c054c00183f3f3f12393f2b30315925140e0223222e023511342e
022322060711140e0223222e023511343e0233321e021515363633321e02
1503a00812201819201208182e49303e7c44081220191820130706121c17
161d10074c974d5a7b4c2119080b080404080b08020f4d5e44245855fd8b
080b080404080b080384080b090303090b0877554f3d66896000>MAAAAA+Calibri AddT42Char 
1 10428 33 <00010099fffa013e057100150051b0852b58b73f174f176f170300b8fff0
b30d014d00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00
b801f8b40a1046054c003f3f012fe12b2b2b2b31305d1bb31046054c0018
3f3f30315925140e0223222e023511343e0233321e0215013e0812201918
201307071320181920120819080b080404080b080538080c080404080c08
>MAAAAA+Calibri AddT42Char 
1 15026 46 <00010022fe94037c03bc00240071b0852b58b9001bfff040350b014d371b
01291b0118180b014d261801260e360e022709011a400b014d3a1a011938
0b014d3b19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b
5d2b015d5d5d2b5d5d2b1b400c1f49190a13490a4b044f004b00183f3f3f
3f12393f3031592103060623222e023713262627012634363633321e0217
0133133e023332161614070233780631321a201102067c091003febf0810
241e1e22140905010103f8061122201c241106feb51011050c140e013904
120a035c15180e0503080f0dfd2e02d6130b05050e181200>MAAAAA+Calibri AddT42Char 
1 4994 17 <000200acfffa040b050e0036004400bdb0852b58401e102e1137080b014d
37100f014d37100c0d014c371810014d37180b014d37b80233b729401001
4d293f11b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8ff
f6b30c014d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040
173db8010bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b
2b32d42be12b2b2b2b2b12393931301bb22e4010b80108b56c404017213d
b8010bb66c21511755055500183f3f3f2b12392f2b3930315925140e0223
222e0227032e03232311140e0223222e023511343633213216171e031514
0e02071e031713161601342627262623231133323e02040b0614241e1a21
140b0477152d3e543b7309132119192114082917011331411a4b734e2723
425c3920342d2814740e08fefd4450193f3391a84463421f1a080c080404
09100c013134573f23fdd9080c070505070c0804ae271f05030d38566f43
41674f3a140e2b3c4e31fee3241d03854c69170706fe4c213b50>MAAAAA+Calibri AddT42Char 
1 9316 30 <00030035fe93038903c8003e004e005f0116b0852b584015122d47100f01
4d47080c014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d
3fb8ffe0b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707
b8ffe0b310014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040
340b014d0058100f014d58201012014c582a25400b12014c250f30070338
4ada0c53e81515603803e93c482a2042d9384a5bd9204f003fed3fed1239
3fed1112392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b11
12173910cd2b10cd2b2b2b10cd2b2b2b10cd31301b40270f300703380c4a
da6c0c151553e86c151560383c03e96c3c482a203842d96c384a205bd96c
204f00183f2b3f2b12393f2b1112392f2b10c62b12173930315901140623
23161615140e0223222627060615141617171e0315140e0223222e023534
3e0237262635343637262635343e023332161721321601342623220e0215
141633323e0213342627270e0315141633323e020389130f81231c325d80
4e37631b12174136eb4370522e346ba6716d99622c10213120312f32251f
24345c814c29471f01101111fefe655d30472f17655b31482f17535f51e9
2029180984764b653e1b0374231f24572f4e78532c1d16122e1e232e020a
02213d593b3e70553125405934213e383319194c2c3d6026255d424d7a54
2d090821fef15c672038492859661f3748fd5e3a3f0208192d2928154143
1d303e00>MAAAAA+Calibri AddT42Char 
1 3740 13 <000100acfffa047e0511003d00a6b0852b58b3270f0f14b8ffe8b310014d
14b8ffe8b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b
014d14b80211401e1e0a2e2e321810014d32180f014d32180d014d32100c
014d32180b014d32b802114010001e38520a2e0f27041922511955065400
3f3f3f1217393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f3331
301b400e38520a2e0f27041922511955065400183f3f3f1217393f303159
25140e022323222e0227012626272316161511140e0223222e0235113436
3333321e0217011e03173326263511343e0233321e0215047e0d151a0d37
1a27232315fe6820411c02020208131f18181f12082c1a521d271f1d1101
3a1d3632311801020108131f191620120847141c12080b1d322702e0397d
3b48964afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4f
ab4f02be070c090404090c07>MAAAAA+Calibri AddT42Char 
1 382 2 <00020023fffa047e05140022002600dcb0852b58b90024ffe8b40c10014c
23b8ffe8b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8ff
f0401a0b10014c25100b10014c0d100b10014c0c100b10014c40280125b8
fff0402c0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02
af23bf23cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d11
173911123939113310ed3211333130012b5d2b2b2b2b2b2b002b2b1b401e
2423260c25f46c0b0c18221d230a0d0116040c230c230c121d5212550555
00183f3f3f1239392f2f1117391112393911332b32113330315925161606
0623222e02270321030e03232226263637013e0333321e02170723032104
75080110251f1f251309046ffde66a030a13231c1d250f010801b2040d19
271e202a1a0e047b01df01c23d161b0e0403070c09013bfec9090d090405
0e1b1604b20b0e080303080f0b8dfd7b>MAAAAA+Calibri AddT42Char 
2 298 53 <0001004501b4022e023d000f0020b0852b58b400070bed04002fed012fcd
31301bb4040bed6c0400182f2b303159011406232122263534363321321e
02022e1211fe5e1212121201a2080d090501f9271e1f26261e06111a>MAAAAA+Calibri AddT42Char 
1 3006 10 <000100acfffa0158051400150061b0852b58b73f174f17af170300b8ffe8
b310014d00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8
ffe8b30b014d00ba0211000affc0b715014d0a10520555003f3f012f2be1
2b2b2b2b2b31305d1bb31052055500183f3f30315925140e0223222e0235
11343e0233321e02150158081421191822140809152117192114081a080c
070505070c0804da080c070505070c08>MAAAAA+Calibri AddT42Char 
1 9018 29 <00010025fffa02860578003c0088b0852b58b2161000b8ffe0b40b014d00
1bb8fff0b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b3
0b014d1bb801f9b2302a25b8ffd040121011014c250aed36471a26ed3048
204c1048003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c431301b40
11360aed6c36471a3026ed6c3048204c104800183f3f3f2b323f2b303159
01140e0223222e0223220e02151533321e02151406232311140e0223222e
02351123222635343e02333335343e0233321e0402860405080607151e29
1b2534200ec9080b0905120fc908132018182013087f101004080c087f23
486d4a2342240c0803050f13170e05090b091833513a6207111a132420fc
eb080b080404080b0803152024131a11075d5e8756290d0f0c131b00>MAAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e0097b0852b58bc000d01
520016003a01b5b5154444082d07be014300020020015400080001014340
0f04020db71a1a3f23b735068d031149b8012db43f078d0202003ffddefd
ce2ffddeed12392fed012fdde1dee110f1ce11392f33e1d4e131301b4014
1a0db76c1a1a3f3523b76c3503068d6c03113f49b8012d40096c3f400207
8d6c020200183f2b1ace2bce2f2bce2b12392f2b30315901112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>MAAAAA+Calibri AddT42Char 
MAAAAA+Calibri /CharStrings get begin
/g18 18 def
/g28 28 def
/g24 24 def
/g39 39 def
/g26 26 def
/g31 31 def
/g1 1 def
/g37 37 def
/g34 34 def
/g41 41 def
/g40 40 def
/g52 52 def
/g38 38 def
/g42 42 def
/g32 32 def
/g49 49 def
/g21 21 def
/g36 36 def
/g27 27 def
/g35 35 def
/g33 33 def
/g46 46 def
/g17 17 def
/g30 30 def
/g13 13 def
/g2 2 def
/g53 53 def
/g10 10 def
/g29 29 def
end
MAAAAA+Calibri /Encoding get
dup 33 /g18 put
dup 34 /g28 put
dup 35 /g24 put
dup 36 /g39 put
dup 37 /g26 put
dup 38 /g31 put
dup 39 /g1 put
dup 40 /g37 put
dup 41 /g34 put
dup 42 /g41 put
dup 43 /g40 put
dup 44 /g52 put
dup 45 /g38 put
dup 46 /g42 put
dup 47 /g32 put
dup 48 /g49 put
dup 49 /g21 put
dup 50 /g36 put
dup 51 /g27 put
dup 52 /g35 put
dup 53 /g33 put
dup 54 /g46 put
dup 55 /g17 put
dup 56 /g30 put
dup 57 /g13 put
dup 58 /g2 put
dup 59 /g53 put
dup 60 /g10 put
dup 61 /g29 put
pop
end
%ADOEndSubsetFont
/IFKELP+Calibri /MAAAAA+Calibri findfont ct_VMDictPut/IFKELP+Calibri*1 [33{/.notdef}rp /g18 /g28 /g24 /g39 /g26 /g31 /g1 /g37 /g34 /g41 /g40 /g52 /g38 /g42 /g32 /g49 /g21 /g36 /g27 /g35 /g33 /g46 /g17 /g30 /g13 /g2 /g53 /g10 /g29 194{/.notdef}rp]IFKELP+Calibri nfIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf53.5996 80.96 mo(!"#$%&'\(#$#\)"*"$+,-."$/"+0)[4.84999 5.24001 4.98004 3.66999 4.46004 5.50993 2.35999 5.50993 4.98004 3.66999 4.98003 8.38997 5.24001 3.54007 5.24001 3.66999 4.06006 4.06003 5.50995 5.50992 5.24002 3.66998 2.36005 5.24002 4.06006 0 ]xsh%ADOBeginSubsetFont: OAAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /OAAAAA+ArialMT
Type42DictBegin
[<000100000008000800080008676c79660000000000000138000000566865
6164000000000000008c000000366868656100000000000000c400000024
686d747800000000000000e8000000086c6f636100000000000000f00000
00066d61787000000000000000f8000000206e616d650000000000000118
0000002067646972000000000000000000000000000100000006cccde15c
077f5f0f3cf5081b080000000000a2e3272a00000000cd50d516faaffd67
1000085100000009000100000000000000010000073efe4e00431000faaf
fa7a10000001000000000000000000000000000000020600010002cd006d
00000015002b000000010000000202b5003c00ca000700020010002f0001
000000000000000500020000000100120001000000000006000e00005646
4a47474d2b417269616c4d5400>
[87 ] AllocGlyphStorage
]def 
76 12 
PrepFor2015
Type42DictEnd
1 42 1 <0001006d01d0026803cb000b00001334363332161514062322266d956869
959569689502ce69949469699595>OAAAAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>OAAAAA+ArialMT AddT42Char 
OAAAAA+ArialMT /CharStrings get begin
/g1 1 def
end
OAAAAA+ArialMT /Encoding get
dup 33 /g1 put
pop
end
%ADOEndSubsetFont
/IFKELQ+ArialMT /OAAAAA+ArialMT findfont ct_VMDictPut/IFKELQ+ArialMT*1 [33{/.notdef}rp /g1 222{/.notdef}rp]IFKELQ+ArialMT nfIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf53.5996 92.9635 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf61.0496 92.9635 mo(1/$2\)"'+*.3/"+'2456)[5.89901 2.35904 3.66899 5.50893 8.38896 5.24901 2.35899 4.06906 3.53906 5.50894 5.50894 2.35904 5.24901 4.06906 2.35898 5.50893 5.50894 2.35904 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf53.5996 105.927 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf61.0496 105.927 mo(7"5#*"3'*2')[5.63699 5.24702 2.35704 4.97704 3.53706 5.24702 5.50694 2.35698 3.53706 5.50693 0 ]xsh%ADOBeginSubsetFont: QAAAAA+Calibri-Italic Initial
ct_T42Dict begin
-0.723 -0.273 1.258 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /QAAAAA+Calibri-Italic
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000005146670
676d00000000000005d000000d24676c7966000000000000252400001204
6865616400000000000012f40000003668686561000000000000132c0000
0024686d74780000000000001350000000386c6f63610000000000001388
0000001e6d61787000000000000013a8000000206e616d65000000000000
13c8000000287072657000000000000013f0000011316764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea7000000000000000000000000004a004c0054005500560057
0059004f004e004f00500051004d005d005f006100630064006500660067
00680069006a006b006c006d006e006d0066006f00700071007200730074
007500760071007400700071007200740075007600780079007a007d0078
0079007a007b007c007d0079007c007a007c007d007e007f00800081007e
007f008000810082007f008000810082007e007f00800081008200830085
008300840085008600870088008900860088008900830084008500860087
008800890083008400850086008700880089008a008b008c008d008e008f
008a008b008c008d008f008a008b008c008d008e008f008a008b008c008d
008e008f0090009500900091009200930094009500980099009a009b009c
00900091009300960097009b009c009f00a2009400960090009100920093
009400950096009700980099009a009b009c009d009e009f00a000a100a2
00a300a600a7009000910092009300940095009600980099009f00bc00bd
00c100c600be00bf00bf00c100c200b900be00c200df00e000e400e700e8
00e9012b0136014700f200f400cf00640066006a006c006d0070006c006d
0069006c0067007300740075007600770078007a007b007c007d007e0081
008400850086008700880089008a0076007a007b007c007e007f00800082
00830084008700880089008a007700850087007900820084008500860087
0088008a0079007a007c007d007e0081008300840086008700880089008b
008c008d008e008f00900091009200940095008b008c008d008e008f0093
009400950093008b008c008d008e00900091009200930094008c008d008e
008f009000910092009300940095009700980099009a009b009c00960097
00980099009a009b009c009a009c009600980099009a009b009c00960097
009b009c009d009e009f00a000a100a2009d009e009f00a000a100a200a1
009d009e009f00a000a100a2009d009e009f00a000a100a200a300a500a3
00a400a500a600a700a300a500a300a400a500a600a700a300a400a500a6
00a700a800a900a800a900aa00ab00ac00a800ab00ac00a800a900aa00ab
00ac00a800a900aa00ab00ac00ad00ae00af00b000b100b300b500b600b7
00b800af00b000b100b300b400b700ad00ae00af00b000b100b200b300b4
00b500b600b700b800ad00ae00af00b000b100b200b300b400b500b600b7
00ba00bb00bc00bd00bf00c000c100c200c300c400ba00bb00bf00c300b9
00ba00bb00bc00bf00c100c200c300ba00bc00bf00c200c700c900cb00cc
00cd00c500c600c700c600c700cb00ce00cf00d100d200db00dc00de00df
00e000e400d600e800e90123012b00d000d1042600d8050e010503c000c2
024e0078042600d702990092000005e4000e4059868574737271706f6e6d
6c6b6a6968676665625f5e5d5c5b5a59585554535251504f4e4d4c4b4a49
4847464544434241403f3e3d3c3b3a39383736352f2e2d2c282625242322
1f181411100f0d0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
042651582320b00d44235921212d2c20204518684420b001602045b04676
688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0
282370b101283e01b0282370b10228453ab10200080d2d2c2045b0032545
6164b050515845441b2121592d2c2045b0004360442d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c4565b0
2c234445b02b23442d2c4b525845441b2121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21b0805158
0c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c642364
8bb81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d
2c4523456023456023456023766818b08062202d2cb00426b00426b00425
b0042545234520b003266062636820b0032661658a2344442d2c2045b000
5458b040442045b04061441b2121592d2c45b1302f4523456160b0016069
442d2c4b5158b02f2370b01423421b2121592d2c4b515820b00325456953
58441b2121591b2121592d2c45b01443b0006063b0016069442d2cb02f45
442d2c452320458a60442d2c45234560442d2c4b235158b90033ffe0b134
201bb3330034005944442d2cb0164358b00326458a586466b01f601b64b0
20606620581b21b04059b001615923586559b02923442310b029e01b2121
212121592d2cb0164358b004254564b020606620581b21b04059b0016123
586559b0292344b00425b00725082058021b0359b0052510b004252046b0
042523423cb0072510b006252046b00425b0016023423c2058011b0059b0
052510b00425b029e0b0072510b00625b029e0b00425b00725082058021b
0359b00425b003254348b00625b00325b0016043481b2159212121212121
212d2cb0164358b004254564b020606620581b21b04059b0016123581b65
59b0292344b00525b00825082058021b0359b0042510b005252046b00425
23423cb00425b0072508b0072510b006252046b00425b0016023423c2058
011b0059b0042510b00525b029e0b02920456544b0072510b00625b029e0
b00525b00825082058021b0359b00525b003254348b00425b0072508b006
25b00325b0016043481b2159212121212121212d2c02b00425202046b004
252342b0052508b003254548212121212d2c02b0032520b0042508b00225
43482121212d2c452320451820b00050205823652359236820b040505821
b04059235865598a60442d2c4b53234b515a5820458a60441b2121592d2c
4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2cb000
214b5458381b2121592d2cb002435458b0462b1b21212121592d2cb00243
5458b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb002
435458b0492b1b212121592d2c2320b000508a8a64b10003255458b0401b
b10103255458b005438b59b04f2b5923b0622b2321235865592d2cb10800
0c215460432d2c014623466023466123201020468a61b8ff80628ab14040
8a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a59
2d2cb012004b014b54422d2cb1020042b123018851b1400188535a58b910
000020885458b202010243604259b12401885158b920000040885458b202
0202436042b12401885458b2022002436042004b014b5258b20208024360
42591bb940000080885458b202040243604259b94000008063b801008854
58b202080243604259b94000010063b80200885458b202100243604259b1
2601885158b94000020063b80400885458b202400243604259b940000400
63b80800885458b202800243604259b12801885158b94000080063b81000
885458ba00020100000243604259595959595959b10002435458400a0540
084009400c020d021bb10102435458b2054008ba010000090100b30c010d
011bb18002435258b2054008b80180b109401bb901000002435258b20540
08ba0180000901401bb901800002435258b2054008b80200b109401bb205
4008ba010000090100595959b9400000808855b94000020063b804008855
5a58b30c000d011bb30c000d0159595942424242422d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d2cb0022563b0206066b00225b82000626023622d2c234ab102
4e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002256164b00343
525821206459b1024e2b23b000505865592d2c238a4a234564b0022564b0
02256164b00343525821206459b1014e2b23b000505865592d2c20b00325
4ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b00325
8ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003
254660b004252eb00425b00425b0042620b000505821b06a1bb06c592bb0
032546b00325466061b08062208a2010233a232010233a2d2cb0032547b0
03254760b0052547b0806361b00225b00625496323b005254ab080632058
621b2159b0042646608a468a4660b02063612d2cb00426b00425b00425b0
0426b06e2b208a2010233a232010233a2d2c2320b001545821b00225b102
4e2bb0805020605920606020b001515821211b20b005515821206661b040
2361b100032550b00325b00325505a5820b00325618a535821b000591b21
591bb00754582066616523211b2121b000595959b1024e2b2d2cb00225b0
04254ab0005358b0001b8a8a238ab00159b004254620666120b00526b006
2649b00526b00526b0702b236165b02060206661b02061652d2cb0022546
208a20b000505821b1024e2b1b452321596165b00225103b2d2cb0042620
b802006220b80200638a236120b05d602bb00525118a128a20398a58ba00
5d10000004266356602b23212010204620b1024e2b23611b2321208a2010
49b1024e2b593b2d2cba005d10000009256356602bb00525b00525b00526
b06d2bb15d0725602bb00525b00525b00525b00525b06f2bba005d100000
08266356602b20b0005258b0502bb00525b00525b00725b00725b00525b0
712bb0021738b00052b00225b001525a58b00425b0062549b00325b00525
496020b0405258211bb000525820b0025458b00425b00425b00725b00725
49b00217381bb00425b00425b00425b0062549b002173859595959592121
2121212d2cb12801885158b94000040063b8080088545c1bb001592d2cb1
2801885158b94000040063b8080088545c1bb001592d0001000000063333
90a432ec5f0f3cf50019080000000000bbeb7ccc00000000d5968a59fa34
fdcb0a14083600020009000200000000000000010000079efdda00000aa0
fa34fa0b0a140800019a000000000000000000000000000e040e000001cf
000004fc0052041d0051041d005103d2004d01d6003f0654003f041d003f
041b004e041dfff802be003f031d00090391007c000000bb00bb01810236
02f103a40431052405d00650071207ab087d0902000000010000000e0120
001600e1000800020010002f008700000a3b019500040001000000010012
0001000000000006001500004f484c4c56462b43616c696272692d497461
6c696300b10903b8027ab21e3e1fb80279b21e3e1fb80278b21e0b1fb802
77b21e0b1fb80276b21e3a1fb80275b21e3a1fb80274b21e3e1fb80273b2
1e3b1fb80272b21e3c1fb80271b21e3c1fb80270b21e3c1fb8026fb21e3d
1fb8026eb21e3d1fb8026db21e3e1fb8026cb21e3e1fb8026bb21d411fb8
026ab21d411fb80269b21d421fb80268b21d431fb80267b21d431fb80266
b21d431fb80265b21d431fb80264b21d431fb80263b21d411fb80262b21d
421fb80261b21d421fb80260b21d431fb8025fb21d431fb8025eb21c451f
b8025db21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb802
59b21c451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b2
1c451fb80254b21c451fb80252b21c451fb80251b21c451fb80250b21c45
1fb8024fb21c451fb8024eb21c441fb8024db21c451fb8024cb21c451fb8
024bb21c451fb8024ab21c451fb80249b21c451fb80248b21c451fb80247
b21c451fb80246b21c451fb80245b21c451fb80244b21b491fb80243b21b
4a1fb80242b21b4a1fb80241b21b4a1fb80240b21b4b1fb8023fb21b4b1f
b8023eb21b4c1fb8023db21b4c1fb8023cb21b4c1fb8023bb21b4c1fb802
3ab21b4c1fb80253b21b4c1fb80239b21b491fb80238b21b491fb80237b2
1b4a1fb80236b21b4a1fb80235b21b4a1fb80234b21b4b1fb80233b21b4b
1fb80232b21b4c1fb80231b21b4c1fb80230b21b4c1fb8022fb21b4c1fb8
022eb21b4c1fb8022db21b491fb8022cb21b4a1fb8022bb21b4b1fb8022a
b21b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b
491fb80225b21b4a1fb80224b21b4a1fb80223b21b4b1fb80222b21b4c1f
b80221b21b4c1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb802
1db21a4e1fb8021cb21a4e1fb8021bb21a4f1fb8021ab21a4f1fb80219b2
1a4f1fb80218b21a4e1fb80217b21a4e1fb80216b21a4f1fb80215b21a4f
1fb80214b21a4f1fb80213b21a4e1fb80212b21a4e1fb80211b21a4f1fb8
0210b21a4e1fb8020fb21a4e1fb8020eb21a4f1fb8020db21a4f1fb8020c
b21a4f1fb8020bb21a4f1fb8020ab21a4f1fb80209b219501fb80208b219
511fb80207b219511fb80206b219511fb80205b219511fb80204b219501f
b80203b219511fb80202b219511fb80201b219511fb80200b219511fb801
ffb219511fb801feb219511fb801fdb219501fb801fcb219511fb801fbb2
19511fb801fab219511fb801f9b219511fb801f8b219511fb801f7b21951
1fb801f6b218531fb801f5b218531fb801f4b218541fb801f3b218541fb8
01f2b218541fb801f1b218541fb801f0b218531fb801efb218531fb801ee
b218541fb801edb218541fb801ecb218541fb801ebb218541fb801eab218
531fb801e9b218531fb801e8b218531fb801e7b218541fb801e6b218541f
b801e5b218541fb801e4b218541fb801e3b218531fb801e2b218531fb801
e1b218541fb801e0b218541fb801dfb218541fb801deb218541fb801ddb2
17561fb801dcb217561fb801dbb217571fb801dab217571fb801d9b21756
1fb801d8b217561fb801d7b217571fb801d6b217571fb801d5b217571fb8
01d4b217571fb801d3b217561fb801d2b217571fb801d1b217561fb801d0
b217561fb801cfb217571fb801ceb217571fb801cdb217571fb801ccb217
571fb801cbb217571fb801cab217561fb801c9b217561fb801c8b217571f
b801c7b217571fb801c6b217571fb801c5b217571fb801c4b2163e1fb801
c3b2163f1fb801c2b2163f1fb801c1b2165b1fb801c0b2165b1fb801bfb2
165b1fb801beb2165b1fb801bdb2165b1fb801bcb2165b1fb801bbb2165b
1fb801bab2163f1fb801b9b2163f1fb801b8b2165b1fb801b7b2165b1fb8
01b6b2165b1fb801b5b2165b1fb801b4b2165b1fb801b3b2165b1fb801b2
b2165b1fb801b1b2163f1fb801b0b2163e1fb801afb2163f1fb801aeb216
3f1fb801adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2165b1f
b801a9b2165b1fb801a8b2163e1fb801a7b2163f1fb801a6b2165b1fb801
a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2
165b1fb801a0b2165b1fb8019fb2165b1fb8019eb215621fb8019db21562
1fb8019cb215631fb8019bb215641fb8019ab215651fb80199b215661fb8
0198b215661fb80197b215661fb80196b215661fb80195b215661fb80194
b215661fb80193b215661fb80192b215611fb80191b215621fb80190b215
631fb8018fb215641fb8018eb215641fb8018db215651fb8018cb215661f
b8018bb215661fb8018ab215631fb80189b215641fb80188b215551fb801
87b215611fb80186b215621fb80185b215621fb80184b215631fb80183b2
15651fb80182b215661fb80181b215661fb80180b215661fb8017fb21566
1fb8017eb215661fb8017db215661fb8017cb215661fb8017bb215661fb8
017ab215451fb80179b215611fb80178b215621fb80177b215621fb80176
b215631fb80175b215641fb80174b215641fb80173b215651fb80172b215
661fb80171b215661fb80170b215661fb8016fb215661fb8016eb215661f
b8016db215661fb8016cb215661fb8016bb215551fb8016ab215451fb801
69b215451fb80168b215361fb80167b215361fb80166b214821fb80165b2
14561fb80164b2147f1fb80163b214551fb80162b214561fb80161b21440
1fb80160b214551fb8015fb214561fb8015eb2147e1fb8015db214831fb8
015cb214851fb8015bb2133d1fb8015ab2131e1fb80159b2131e1fb80158
b2130a1fb80157b2130a1fb80156b2130b1fb80155b2133a1fb80154b213
3a1fb80153b2133a1fb80152b2133b1fb80151b2133c1fb80150b2133c1f
b8014fb212451fb8014eb212461fb8014db212461fb8014cb212451fb801
4bb212451fb8014ab212461fb80149b212461fb80148b212461fb80147b2
12441fb80146b212451fb80145b212461fb80144b212461fb80143b21147
1fb80142b211571fb80141b211581fb80140b211591fb8013fb2115a1fb8
013eb2115a1fb8013db2115b1fb8013cb2115b1fb8013bb2115b1fb8013a
b2115b1fb80139b2112b1fb80138b2112c1fb80137b211391fb80136b211
391fb80135b211461fb80134b211471fb80133b211471fb80132b211551f
b80131b211551fb80130b211561fb8012fb211561fb8012eb211571fb801
2db211571fb8012cb211581fb8012bb211591fb8012ab211591fb80129b2
115a1fb80128b2115a1fb80127b2115b1fb80126b2115b1fb80125b2115b
1fb80124b2115b1fb80123b211591fb80122b2115a1fb80121b211391fb8
0120b211471fb8011fb211561fb8011eb211561fb8011db211591fb8011c
b211591fb8011bb2115b1fb8011ab2115b1fb80119b2115b1fb80118b211
561fb80117b211561fb80116b211571fb80115b211571fb80114b211581f
b80113b2115a1fb80112b2115a1fb80111b2115b1fb80110b2115b1fb801
0fb2115b1fb8010eb2115b1fb8010db2115a1fb8010cb2115b1fb8010bb2
105d1fb8010ab2105e1fb80109b2105f1fb80108b2105f1fb80107b2105f
1fb80106b2105f1fb80105b2105d1fb80104b2105e1fb80103b2105f1fb8
0102b2105f1fb80101b2105f1fb8010040ff105f1fff105d1ffe105f1ffd
105f1ffc105f1ffb105f1ffa105d1ff9105e1ff8105f1ff7105f1ff6105f
1ff5105f1ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee
0f641fed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f64
1fe60f621fe50f621fe40f641fe30f621fe20f621fe10f631fe00f641fdf
0f641fde0f641fdd0f641fdc0f641fdb0f641fda0e671fd90e681fd80e68
1fd70e681fd60e681fd50e671fd40e681fd30e681fd20e681fd10e671fd0
0e681fcf0e681fce0e681fcd0e681fcc0e681fcb0e681fca0e681fc90e68
1fc80d6b1fc70d6c1fc60d2a1fc50d6c1fc40d2c1fc30d6b1fc20d6c1fc1
0d6d1f40ffc00d6a1fbf0d691fbe0d681fbd0d6b1fbc0d311fbb0d311fba
0d311fb90c711fb80c721fb70c731fb60c741fb50c741fb40c741fb30c73
1fb20c741fb10d311fb00d311faf0d311fae0d311fad0d311fac0d311fab
0d311faa0d311fa90b7e1fa80b7a1fa70b791fa60b7a1fa50b7c1fa40b7d
1fa30b7e1fa20b7e1fa10b7e1fa00b7e1f9f0b7e1f9e0b7e1f9d0b7e1f9c
0b7e1f9b0b7e1f9a0b2d1f990b2d1f980aa71f970aa51f960aa71f950aa7
1f940aa71f930aa71f920a681f910a821f900a9b1f8f0a9d1f8e0a9f1f8d
0aa71f8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d
557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab
7a557955775578ab7755ba028900660288403c5576ab7555047514757475
03f47501ab750144750130750102007510752075030c7455725573ab7255
007250728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0
407c720d104671556f5570ab6f556e666d556a03251f6938675568ab6755
6638645565ab645563386255613860555f385d555eab5d555c385a555bab
5a55593858555703251f5638545555ab54555338515552ab51554f384e55
4e03251f4d384b554cab4b554a38485549ab4855473846554503381f001c
101c201c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001b
b01bc01b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18
024018292c460f17cf17df17ef1704134017292e460016101620160315b8
ffc0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0401f1623
26460f15010f151f150245ef1501860003012001010001100120010308b8
ffc0b401151f4603bc01000100000500010190b154532b2b4bb807ff524b
b008505bb00188b02553b00188b040515ab00688b000555a5b58b101018e
59b101024354b0144b515a58b101018e59858d8db1160142001d424bb01d
5358b203a0a01d42594bb0805358b20340401d42594bb0ff5358b2030000
1d4259004bb0ff5358b1160042592b5e7375732b58403e080011e011f011
0315bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff
0e03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc04027
0c5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d30460003012001
0100011001200103085e7375732b2b745e732b2b5e73742b73742b737474
5e735e5901755e73742b2b2b2b5e732b5e732b7374755e735e735e73755e
732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b5e73755e732b2b5e735f73737373742b2b2b2b2b2b5e73742b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00000000>
[4613 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 374 2 <00010052fffa04f20514002f00fcb0852b58ba027d027e00582bb1010243
55584016230c0d220d220d1817240b0a25002f250a172a522423b8012a40
1d400b18252f22041d170a000d0428000c0116030c0c121d521255055528
2b183f3f3f12392f005f5e5d2b1739121739c41a4dfdc43f012fd0c13233
7d87c4c4011810c63332107d87c4c431301bb32a522423b8012a401d400b
18252f22041d170a000d0428000c0116030c0c121d5212550555282b183f
3f3f12392f005f5e5d2b1739121739c41a4dfdc43f3130591bb42a52240c
23b8012a40176c0b18252f22041d170a000d040c0c121d521255055528ba
027d027e00582b2b3f3f3f12392f1739121739c42bc43f303159250e0323
222e02371321030e0323222e0237133e0333321e02070321133e0333321e
020703f8020b15211a182013060372fdb372020a1622181a20120602f801
0c162119182112050167024c68010b16211a182013050219070c07050507
0c07023ffdc1070c070505070c0704dc070c070505070c07fdf90207070c
070505070c07>QAAAAA+Calibri-Italic AddT42Char 
1 2976 9 <0002004effed03d103ca0017002f007cb0852b58ba027f028000582bb101
02435558b90000021f4009001810180213031824b8021e400b0c1df5134a
29e340074d282b183f1a4ded3fed012fedd45f5e5ded31301b400a1df513
4a29e340074d282b183f1a4ded3fed3130591b400d131df56c134a0729e3
6c074d28ba027f028000582b2b3f2b3f2b30315901140e0423222e023534
3e0433321e0207342e0223220e0415141e0233323e0403d11c395877975d
6089582a1b3a5777975d6089592aae15314f383c624d39251216314e383d
614d39251202734a9a8f7e5e372e5880514a9a8e7f5e372f58805a325037
1e2b49626f75383250381e2b4a627074>QAAAAA+Calibri-Italic AddT42Char 
1 2146 7 <0001003ffffa05e703ca005b00e7b0852b58ba027f028000582bb1010243
55584039442d2d2e39171622214e225b005b0b000a0113030a38220b534a
1128f940494a382e21170a00162d0b225b4e44390e333e49334c1c4c054c
282b183f3f3f3f1217393f1a4dfdc43f012f2f2fc45f5e5d113332111239
c4113332c63332113331301b4021534a1128f940494a382e21170a00162d
0b225b4e44390e333e49334c1c4c054c282b183f3f3f3f1217393f1a4dfd
c43f3130591b4022534a114928f96c494a382e21170a00162d0b225b4e44
390e333e49334c1c4c054c28ba027f028000582b2b3f3f3f3f1217393f2b
c43f303159250e0323222e023713363635342623220e0207030e0323222e
023713363635342623220e0207030e0323222e0237133e0333321e020707
3e0333321e02173e0333321e02151406070567010a152118181f1106026f
0507313d326b604a1150020a152118181f1006016f0705323c336a604a11
50020a142118191f110502b50109131d14151b0f0401220f455c6d393c56
371a0314465c6c38435a3818080719080b080404080b08022c1d341a404c
3d6b9356fe6e080b080404080b08022c1e3a193d493d6b9356fe6e080b08
0404080b080385070c080303080c07ac224c402a21394f2f234c3f2a2642
583423442400>QAAAAA+Calibri-Italic AddT42Char 

1 0 1 <> QAAAAA+Calibri-Italic AddT42Char 
1 3926 12 <00010009ffed02eb03ca004600e7b0852b58ba027f028000582bb1010243
5558bc000f01fd003b0034020e402b163b163b1600230f34401b45cf2820
053005400503050acf404a20f928002a102a020c032a2fde401b4d282b18
3f1a4dfdd4005f5e5d2bed3ffdd4005d2bed11123939012fc439392f2f10
ed10ed31301b40240f34401b45cf2820053005400503050acf404a20f928
002a102a020c032a2fde401b4d282b183f1a4dfdd4005f5e5d2bed3ffdd4
005d2bed111239393130591b401b0f34401b0545cf6c05400acf6c404a2a
20f96c2a1b2fde6c1b4d28ba027f028000582b2b3f2bc42b3f2bc42b1112
393930315901140e0223222e0223220e0215141e0415140e0223222e0227
262635343e0433321e0233323e0235342e0435343e0233321e02171602eb
060b0f090c2130432e2c442e1835505d4f353767925a2f5343300d080702
06070a0a070c2237523d374f3419344f5c4f35345f855126473c2c0b0b03
6c0a212016131814192b371e28352a293b533f467957310e161b0c08110c
08161816120b1b1f1b1b2d3c212a352b2a3953404271532e0c12160b0a00
>QAAAAA+Calibri-Italic AddT42Char 
1 770 3 <00020051ffed03e103ca0026003b00c2b0852b58ba027f028000582bb101
02435558b3091d081eb801afb42627263b08b801aeb7000f260113032631
b8021e40171300093b271d26060321492af91a4a36f8400e4d034c282b18
3f3f1a4ded3fed3f121739012fedd45f5e5ddded33113310ed1139393130
1b401600093b271d26060321492af91a4a36f8400e4d034c282b183f3f1a
4ded3fed3f1217393130591b401900093b271d26060321491a2af96c1a4a
0e36f86c0e4d034c28ba027f028000582b2b3f3f2b3f2b3f121739303159
25060623222e0237370e0323222e0235343e043332161737363633321e02
0707262623220e0415141e0233323e0237032c04242a141a100603210d44
5d723b50693e17152f4b6a8c59597f3213042628141b100401d32f6d4436
5743311f0f0b1f362b376f604a1219110e04070b09aa204c402a385c743d
388e948c6f43483f5b100e03080c07ec454533546b726e2c234539233d6c
9258>QAAAAA+Calibri-Italic AddT42Char 
1 3232 10 <0002fff8fe9403d003ca002a003f00ceb0852b58ba027f028000582bb101
02435558400d2135360c0d350d35180d171800b8021e401c2b170c363521
040730f9264a170d182004121b49124f39f840074d282b183f1a4ded3f3f
1217393fed121739012fd4ed2f11331133107d870ec4c411013331301b40
1a0c363521040730f9264a170d182004121b49124f39f840074d282b183f
1a4ded3f3f1217393fed1217393130591b401d0c36352104072630f96c26
4a170d182004121b49124f0739f86c074d28ba027f028000582b2b3f2b3f
3f1217393f2b12173930315901140e0423222e0227030e0323222e023713
363633321e0207073e0333321e0207342e0223220e020707161633323e04
03d016304b6a8b582d4a3e3416550209142119171f120501fd02242a151a
100401220e435d723b4c67401cad0f2135273670604b11212f6c44355743
31210f02843a91948b6c4112202b1afe50080c080404080c0804ea100e03
070c08ab214b412a3457774f2b48341c3c6c9357a5464532546a7270>QAAAAA+Calibri-Italic AddT42Char 
1 1864 6 <0002003ffffa01ef052f00130029009bb0852b58ba027f028000582bb101
02435558b4291f141e00b80262400b0a1f1e1e141f290424190fb80147b6
05402449194c282b183f3f1ade4ded11121739012fd6d4ed113311333130
1bb71e141f290424190fb80147b605402449194c282b183f3f1ade4ded11
1217393130591b40091e141f29042419050fb80147b76c05402449194c28
ba027f028000582b2b3f3f1ace2b11121739303159010e0323222e02373e
0333321e02010e0323222e0237133e0333321e020701e905111c2a1e1d26
12020506121b2a1e1d251302fef7020a142118191f110502b3010a142119
181f11050104cc1c26170a0a17261c1c251909091925fb31080b08040408
0b080384070c080404080c07>QAAAAA+Calibri-Italic AddT42Char 
1 1506 5 <0002004dffed039d03ca002e003c00beb0852b58ba027f028000582bb101
02435558b62a323706040009b8020e400923110c1e031414232fb8020d40
15002306be37372a1e11110c32d12a4a0cdf401e4d282b183f1a4ded3fed
11392f1112392fed012fd4ed12392f173910ed11173931301b401306be37
372a1e11110c32d12a4a0cdf401e4d282b183f1a4ded3fed11392f111239
2fed3130591b40183706be6c37372a1e11110c2a32d16c2a4a1e0cdf6c1e
4d28ba027f028000582b2b3f2b3f2b11392f1112392f2b30315901140e02
2323060615141633323e0233321615140e02070e0323222e0235343e0433
321e0207342623220e020733323e02039d4088d4946a0705636f40664b30
09090904080d080c3d5464325986592c193656779c6254754b22a9504a41
644d371166698d552302e5456e4e2a213e1b646a1316130d0c0a1c1d1a09
0c17130c28537c5441959286663e2a425137333f2d4c65381a2d3c00>QAAAAA+Calibri-Italic AddT42Char 
1 2632 8 <0001003ffffa03b003ca003a00adb0852b58ba027f028000582bb1010243
55584026311a1a1b26040e03000f0114030f0e2515f940364a251b0e041a
0f312608202b49204c094c282b183f3f3f1217393f1a4ded012fc4c45f5e
5d321133c63332113331301b401615f940364a251b0e041a0f312608202b
49204c094c282b183f3f3f1217393f1a4ded3130591b40173615f96c364a
251b0e041a0f312608202b49204c094c28ba027f028000582b2b3f3f3f12
17393f2b30315901140607030e0323222e023713363635342623220e0207
030e0323222e0237133e0333321e0207073e0333321e0203b00807710209
152019181f1105016f0705343d356f5f4b1150020a142118191f110502b5
0109131d14151b0f0401220f445e713d435a381802d6234424fdce080b08
0404080b08022c1f3a163d4b3d6b9356fe6e080b080404080b080385070c
080303080c07ac224c402a294358>QAAAAA+Calibri-Italic AddT42Char 
1 3620 11 <0001003ffffa02f203ca0033009cb0852b58ba027f028000582bb1010243
5558400a2811111d121c001d1c0cb801184010402d4a121c11281d270617
2249174c282b183f3f1217393f1a4ded012f2fc411331133113331301bb9
000c01184010402d4a121c11281d2706172249174c282b183f3f1217393f
1a4ded3130591bb12d0cb8011840106c2d4a121c11281d2706172249174c
28ba027f028000582b2b3f3f1217393f2b30315901140e0423222e022322
0e0207030e0323222e0237133e0333321e0207073e0333321e02171602f2
0304080c0d080813171e1422595647114f020a142118191f110502b3010a
141d14151b0f040121173f4a512711231e170606039c04171e201b12070a
073b688e53fe6f080b080404080b080385070c080303080c07a4294c3922
050709060600>QAAAAA+Calibri-Italic AddT42Char 
1 0 0 <00050000fe7303da050e00030007003b005500560075b0852b58b52d162d
16083c410a01ed00490007016400020020018c0008000101644012040225
370603511b0d117051015144070254003fdddedd5ddeddcd3fdddecd012f
ddedd6ed10fdd6ed1239392f2f31301b400e25370603511b0d1151440740
025400183f1adddedddeddcd3fdddecd303159011121110111211101140e
020707060623222e02373736363333323e0235342e0223220e0223222635
343e02373e0333321e0201140e0207060623222e0235343e023736363332
1e020103dafc5b034ffd06027b1f456e4e24021f1b0e140c050120051f17
083d4f2e130f21352828402f1f070a060205080608293a4422445e3a1afe
b503070b070a2016161a0e0504070c0809201913190e04fe46050efaf205
0efb43046cfb9403313467523605980a0802040606bc1b17253b4621192b
20130f13100c0e05131612060713120b263d4afd8b08171a17070a0a070c
100a0918181608090a060c10fd38>QAAAAA+Calibri-Italic AddT42Char 
QAAAAA+Calibri-Italic /CharStrings get begin
/g2 2 def
/g9 9 def
/g7 7 def
/g1 1 def
/g12 12 def
/g3 3 def
/g10 10 def
/g6 6 def
/g5 5 def
/g8 8 def
/g11 11 def
end
QAAAAA+Calibri-Italic /Encoding get
dup 33 /g2 put
dup 34 /g9 put
dup 35 /g7 put
dup 36 /g1 put
dup 37 /g12 put
dup 38 /g3 put
dup 39 /g10 put
dup 40 /g6 put
dup 41 /g5 put
dup 42 /g8 put
dup 43 /g11 put
pop
end
%ADOEndSubsetFont
/IFKELR+Calibri-Italic /QAAAAA+Calibri-Italic findfont ct_VMDictPut/IFKELR+Calibri-Italic*1 [33{/.notdef}rp /g2 /g9 /g7 /g1 /g12 /g3 /g10 /g6 /g5 /g8 /g11 212{/.notdef}rp]IFKELR+Calibri-Italic nfIFKELR+Calibri-Italic*1 [10 0 0 -9.9946 0 0 ]msf107.32 105.927 mo(!"#"$%&'\(\)*%$"+)[6.55401 5.37401 8.264 5.37401 2.36398 4.06407 5.37407 5.37408 2.36404 4.98396 5.37407 4.06409 2.36397 5.37401 0 ]xshIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf61.0496 117.93 mo(&.\)#4'2$8#4/+\))[5.50594 5.50594 8.38596 4.97604 5.50594 2.35598 5.50593 3.66599 4.98592 4.97604 5.50594 2.35604 4.06606 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf53.5996 130.893 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf61.0496 130.893 mo(79:)[5.63699 6.81696 0 ]xsh79.5296 130.893 mo(;)sh82.6796 130.893 mo(+"-)[4.06406 5.24401 0 ]xsh99.8496 130.893 mo(+*$#*"86'2456)[4.06406 3.53407 3.67399 4.98404 3.53407 5.244 4.98393 4.71404 2.36397 5.50394 5.50394 2.36404 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf53.5996 142.897 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf61.0496 142.897 mo(!/485")[4.84999 2.36004 5.50994 4.97993 2.36003 0 ]xsh86.3496 142.897 mo(;)sh89.4996 142.897 mo("43'5#62.*'2456)[5.24401 5.50394 5.50394 2.36398 2.36404 4.98404 4.71404 5.50392 5.50395 3.53406 2.36398 5.50392 5.50395 2.36403 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf53.6096 155.859 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf61.0596 155.859 mo(<55.\)/4#'2$'<24'*2$$"4*)[2.62199 2.36204 2.36204 5.50194 8.39196 2.36204 5.50194 4.98204 2.36198 5.50192 3.672 2.36198 2.62199 5.50194 5.50194 2.36197 3.54207 5.50192 3.672 3.67198 5.24202 5.50194 0 ]xsh61.0596 167.863 mo(\(5#*=2$\))[5.50594 2.35604 4.97604 3.53606 3.14594 5.50592 3.66599 0 ]xsh234.688 16.6597 mo
379.967 16.6597 li
379.967 61.2267 li
234.688 61.2267 li
cp
.111269 .0303044 .00289921 0 cmyk
f
234.688 16.6597 mo
380.008 16.6597 li
380.008 61.2097 li
234.688 61.2097 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 234.688 16.6597 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELO+Calibri gcheck setglobal} if
1 1748 6 <000100acfffa0354050e00270083b0852b58b10713b8ffe8b310014d13b8
fff0b30f014d13b8fff0b30d014d13b8fff6b30c014d13b8ffe8b30b014d
13b80211b50d1d001e1d07b8010cb313131906b80128b322511955003f3f
ed12392fed012f2fc41139e12b2b2b2b2b3231301bb11307b8010cb56c13
13192206b80128b46c2251195500183f3f2b12392f2b30315901140e0223
211121321e0215140e02232111140e0223222e02351134363321321e0203
54040a0d07fe2601c0070d0a04040a0d07fe400814201a18221408291702
46070d0a0404c4131c1108fe4807101b15131b1109fde5070d070505070d
0704ae271f08121d>IFKELO+Calibri AddT42Char 
1 7142 22 <00020085fffa0151052f0015002100a7b0852b58b73f234f236f230316b8
ffe8b30d014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d
16b8fff0b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d
15b8fff6b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b6
0a1f400f014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4
e12b2b2b2b2b2b31305d1bb1191fb8013eb56c191049054c00183f3fc62b
30315925140e0223222e023511343e0233321e0215131406232226353436
333216013e08122019182013070713201819201208132c3b3a2b2c3b3a2b
19080b080404080b080384070c080404080c0701303a2a29393a2a29>IFKELO+Calibri AddT42Char 
1 7410 23 <00010099fffa013e057100150051b0852b58b73f174f176f170300b8fff0
b30d014d00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00
b801f8b40a1046054c003f3f012fe12b2b2b2b31305d1bb31046054c0018
3f3f30315925140e0223222e023511343e0233321e0215013e0812201918
201307071320181920120819080b080404080b080538080c080404080c08
>IFKELO+Calibri AddT42Char 
1 8388 26 <0002005affed03de03ca0013002700c9b0852b58401c3f29012812012911
01260d01260c012608012607012a03012902011eb8ffe8b310014d1eb8ff
f0b30f014d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1e
b8020a401e2f0a010a141810014d14100f014d14200d014d14120c014d14
180b014d14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b801
02b1054d003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d
5d5d5d5d5d5d5d5d1bb10f19b80101b46c0f4a0523b80102b26c054d0018
3f2b3f2b30315901140e0223222e0235343e0233321e0207342e0223220e
0215141e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e
6a4f496944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427e
b47c49826239345f824d4a826139345e8200>IFKELO+Calibri AddT42Char 
1 10086 31 <00010094ffed039c03bc003200b8b0852b58401f3f34010b27100d014d27
0a0c014d27080b014d27100f10014c27100b014d27b801f9b6004011014d
001fb8fff0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8
b30b014d1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49
270b05194924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b
2b2bd42be12b2b2b2b2b3931305d1b40092d49270b0519490e24b80105b4
6c0e4d054c00183f3f2b3f1239393f30315925140e0223222e0235350606
23222e023511343e0233321e021511141e023332363711343e0233321e02
15039c07121d15171d11064d964d5a7b4c210714201818201308172f4830
3e7b4507141f191820120919080b080404080b0877554e3c678962022208
0b090303090b08fdf44f5f432558550275080b090303090b0800>IFKELO+Calibri AddT42Char 
1 8706 27 <00020099fe9403d503ca002a003d00b1b0852b58b53f3f0121360ab8fff0
b30d014d0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0a
b801f84017152b200d014d2b120c014d2b180f10014c2b180b014d2bb802
0a400900150a363521040530b80105b6264a1b49104f39b80105b1054d00
3fed3f3f3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d1bb7
0a36352104052630b8010540096c264a1b49104f0539b80105b26c054d00
183f2b3f3f3f2b12173930315901140e0223222e022711140e0223222e02
3511343e0233321e0215153e0333321e0207342e0223220e020711161633
323e0203d53363925e2844414024081220191820130706121c14151b1207
294c4d512d628a5728ae15335640203e404627447a433e59371a01e976bc
834710223423fe3e080c080404080c0804e9090b080303080b09792a3e29
154c84af754581643c13294331fe9a53583c647c>IFKELO+Calibri AddT42Char 
1 6000 19 <00010025fffa02860578003c0088b0852b58b2161000b8ffe0b40b014d00
1bb8fff0b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b3
0b014d1bb801f9b2302a25b8ffd040121011014c250aed36471a26ed3048
204c1048003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c431301b40
11360aed6c36471a3026ed6c3048204c104800183f3f3f2b323f2b303159
01140e0223222e0223220e02151533321e02151406232311140e0223222e
02351123222635343e02333335343e0233321e0402860405080607151e29
1b2534200ec9080b0905120fc908132018182013087f101004080c087f23
486d4a2342240c0803050f13170e05090b091833513a6207111a132420fc
eb080b080404080b0803152024131a11075d5e8756290d0f0c131b00>IFKELO+Calibri AddT42Char 
1 8062 25 <00010099fffa03a003ca003200b8b0852b58400f12100b014d13100b014d
3f34012a13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8
fff6b30c014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d01
4d0b100f014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b8
0106400a2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b
2b2b10e12b2b2b2b2b3931305d002b2b1bb12d10b80106400b6c2d4a2a19
2449194c054c00183f3f3f12393f2b30315925140e0223222e023511342e
022322060711140e0223222e023511343e0233321e021515363633321e02
1503a00812201819201208182e49303e7c44081220191820130706121c17
161d10074c974d5a7b4c2119080b080404080b08020f4d5e44245855fd8b
080b080404080b080384080b090303090b0877554f3d66896000>IFKELO+Calibri AddT42Char 
IFKELO+Calibri /CharStrings get begin
/g6 6 def
/g22 22 def
/g23 23 def
/g26 26 def
/g31 31 def
/g27 27 def
/g19 19 def
/g25 25 def
end
IFKELO+Calibri /Encoding get
dup 50 /g6 put
dup 51 /g22 put
dup 52 /g23 put
dup 53 /g26 put
dup 54 /g31 put
dup 55 /g27 put
dup 56 /g19 put
dup 57 /g25 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELO+Calibri*1 [33{/.notdef}rp /g8 /g4 /g3 /g7 /g1 /g11 /g10 /g2 /g17 /g14 /g30 /g15 /g29 /g18 /g28 /g16 /g21 /g6 /g22 /g23 /g26 /g31 /g27 /g19 /g25 198{/.notdef}rp]IFKELO+Calibri nfIFKELO+Calibri*1 [19 0 0 -18.9897 0 0 ]msf249.166 34.4 mo(234+./%56+76+%58%)[8.6526 4.32068 4.32065 6.08774 9.43161 6.56259 4.32056 9.96347 9.96347 6.29675 9.96347 9.96347 6.29675 4.32056 9.96344 5.76447 0 ]xsh258.78 56.485 mo(393+3*4%-.*/01)[4.32639 9.96918 4.32635 6.28345 4.32635 9.03839 4.32635 4.32626 7.34744 9.43732 9.03836 6.28329 7.99338 0 ]xsh234.688 67.2629 mo
379.966 67.2629 li
379.966 204.15 li
234.688 204.15 li
cp
0 0 0 0 cmyk
f
234.688 67.2629 mo
380.008 67.2629 li
380.008 204.097 li
234.688 204.097 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 234.688 67.2629 ]ct
@
grestore newpath
%ADOBeginSubsetFont: MAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELP+Calibri gcheck setglobal} if
1 1998 7 <000100acfffa0354050e00270083b0852b58b10713b8ffe8b310014d13b8
fff0b30f014d13b8fff0b30d014d13b8fff6b30c014d13b8ffe8b30b014d
13b80211b50d1d001e1d07b8010cb313131906b80128b322511955003f3f
ed12392fed012f2fc41139e12b2b2b2b2b3231301bb11307b8010cb56c13
13192206b80128b46c2251195500183f3f2b12392f2b30315901140e0223
211121321e0215140e02232111140e0223222e02351134363321321e0203
54040a0d07fe2601c0070d0a04040a0d07fe400814201a18221408291702
46070d0a0404c4131c1108fe4807101b15131b1109fde5070d070505070d
0704ae271f08121d>IFKELP+Calibri AddT42Char 
1 7588 25 <00020099ffed03d50571002a003d00b6b0852b58b53f3f010a2136b8fff6
b30c014d36b8fff0b30d014d36b8ffe8b30b014d36b8fff0b40f10014c36
b801f8401b152b120c014d2b200d014d2b180b014d2b1810014d2b100f01
4d2bb8020a400900150a363521040530b80105b6264a1b46104c39b80105
b1054d003fed3f3f3fed121739012fd4e12b2b2b2b2b10e12b2b2b2b3239
31305d1bb70a36352104052630b8010540096c264a1b46104c0539b80105
b26c054d00183f2b3f3f3f2b12173930315901140e0223222e022715140e
0223222e023511343e0233321e0215113e0333321e0207342e0223220e02
0711161633323e0203d53363905d2b4946462708121b15141c1206071320
1819201208284b484828628b5728ae15345640203e404527447c433e5837
1901e775bb844611263a296e080c070404070c080538080c080404080c08
fde5293823104e83b0754582643d122a4232fe9953573c637b00>IFKELP+Calibri AddT42Char 
2 386 54 <00010085fea701f3058b00230032b0852b58401503100b014d03100f014d
03100c0d014c03151f0b85003f2f012f332b2b2b31301bb21f0b8500183f
2f303159010602151412171616060623222e02272e0335343e02373e0333
321e0201ef5f5d5f5b05010e1d19121a130c033652381c1f395233010910
1c16171c10020562c9fe59d6d7fe5acb0c110b050206080566d1d8dd7171
dcd9d26704060603060a1000>IFKELP+Calibri AddT42Char 
2 4572 69 <00010065005e03b80421001f0021b0852b58b3121c1006002fcdd4cd3130
1bb4121c10400600182f1acdd4cd30315901140e0207010606262635343e
023701012e0335343636161701161603b804060a06fcef0b10090402070e
0b0285fd7f0d0f08020409100b03140a0d023e111b140b03fe7405010e1d
171c22150c05013d0135060b16231d1a1d0d0206fe730527>IFKELP+Calibri AddT42Char 
2 4284 67 <0002005e0138039d0349000d001b003eb0852b58b4000e07150bbc010a00
040011010a0018002fedd6ed012f33cd3231301bb1040bb8010ab46c0418
1811b8010ab16c1800182f2b10c62b303159011406232122263534363321
32161114062321222635343633213216039d170ffd0c0f16141102f41214
170ffd0c0f16141102f412140303281f1f28242222fe57281e1e28252222
>IFKELP+Calibri AddT42Char 
2 1564 58 <000100ae0000039f0517002e010cb0852b584024241e01241d01241c0123
1b01241a01241901261801261701291201291101122010014d30b8ffc040
0d0f024d60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29
b8fff0b30d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e
18200b014d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8
ffc0b310014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b01
4da01101111312b8013fb323522910b80107b10654003fed323ffdcd012f
5d2b2b2b2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d
5d5d5d5d5d5d5d1bb313402312b8013fb56c2352290610b80107b26c0654
00183f2b323f2b1acd30315925140e022321222e0235343e023321110706
06262635343e0237253e0333321e02151133321e02039f060a0d07fd5c07
0c0b0606090d08010efa13170e0503060b09012a040c12181218201206ea
080e090544131a100707101a13121a110903d8950a040d1e171118100c06
bf0304040104070b06fb8f09111a>IFKELP+Calibri AddT42Char 
2 1172 57 <00020048ffed03c705210013002b010bb0852b584019281201291101260d
01260c012608012507012a03012902012db8ffc040250f024d602d011418
10014d14100f014d14160d014d140a0c014d14200b014d14180c014d14bb
022d00000020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8
fff6b30c014d20b8ffe8b60c014d24200120b8022d40090a200030004000
030ab8fff040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00
b8ffc0400a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003f
ed3fed11120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b
2b2b31305d2b5d5d5d5d5d5d5d5d1bb10f1bb8010ab46c0f530525b8010a
b26c055600183f2b3f2b30315901140e0223222e0235343e0233321e0207
342e0423220e0215141e0233323e0403c72f6db0817aa7662b306cb0807b
a7662bb00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b161
57a9f7a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e72
8500>IFKELP+Calibri AddT42Char 
2 724 56 <00040000ffee051f054a00540068007c007d006cb0852b58400a4973341e
78195a070f6eb80103b54e4d29290f39b80106b5444d64ec0f46003fed3f
ed12392f3fed12173931301b400b4973341e78195a070f4e6eb80103b76c
4e4d29290f4439b8010640096c444d0f64ec6c0f4600183f2b3f2b12392f
3f2b12173930315913343e02372e0335343e0233321e0215140e02071e03
173e033535343e0233321e021515140e02071e03333236161615140e0323
222e02270e0323222e0401141e02173e0335342e0223220e0203141e0233
323e02372e03270e03016c1e406749283925102a5d92685881552b265483
5d2250575b2c1420180c07101f19161f14091321311e2d432f1f0a0a120b
0602050c201a14304055392a5d6973433f71604c351d01270f1f2d1f4963
3c1b152e463135492f167423446643294e47401b346760592532432912fe
e1015537635d572c36584c45233e7157332646633d3b625c5b3229595a57
281b454d5029240a0d090402070f0d19386c675e2824301e0c0208181919
1e0f0a080e233c2e223a291716293e4f6203021b383d462b29454040241d
3529181b2d3cfd2834563f23111d29172d6162612e203f3f40038500>IFKELP+Calibri AddT42Char 
2 4434 68 <00010045005d03970426001d0021b0852b58b3170f1905002fcdd4cd3130
1bb4170f19400500182f1acdd4cd30315925140606262701262635343e02
3701361615140e020701011e030397040a0f0bfcec0a0c03070906031117
1103070d0cfd7c02800d0f0803a2191f0d0206018e052624101c120d0201
8c0b182f1d22150b06fec5feca070b152300>IFKELP+Calibri AddT42Char 
2 3332 62 <00010065ffed0396050e003e00fcb0852b58400d27370127360126080126
030140b8ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c
37ba02110028ffc0402810014d28400f014d280e4f326f327f3203321d18
10014d1d100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f02
4d00b8ffc0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c
3af42022012222052c5118b8010bb10556003fed3f12392f5ded10ed1139
2f2b0110d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d
5d1bb41313182c36b8012c40116c223af46c0022010b032222052c510518
b8010bb26c055600183f2b3f12392f5f5e5d2b2b11392f30315901140e02
23222e0635343e0233321e0233323e0235342e0223220623222635113436
3321321e02151406232111363633321e0203964680b16c3c6c54360f0605
0203080b070a2a4769484370512e27517c563d58261c181f1d023d080f0a
051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b1108
191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe9505023561
8a00>IFKELP+Calibri AddT42Char 
2 548 55 <0001007afea701e7058b00210043b0852b58b90012fff0b30b014d12b8ff
f0b30f014d12b8fff0b50c0d014c1200b8ffc0b60b014d001a0a85003f2f
012f2b322b2b2b31301bb21a0a8500183f2f30315901140e02070e032322
26263637361235340227263e0233321e0217161201e71c385136030c131a
121a1d0d01055c5e5e5e0402101c17151c1108026775021971ddd8d16605
080602050b110cca01a7d7d601a7c909100a0603060604cdfe4f>IFKELP+Calibri AddT42Char 
1 13786 43 <00010022fffa037b03bc002c010db0852b58b90023fff840170b0c014c1f
080b0c014c251f011e080b0c014c251e0116b8fff0b30b014d15b8fff0b3
0b014d14b8ffe8b30b014d13b8ffe8b30b014d12b8ffe8b30b014d11b8ff
f040370b014d37110126110127100128050122280b014d3d220124220121
280b014d3f210124210120280b014d3d2001242001270f0176210121b8ff
d04009111548212013014d21b8ffe8400910014d21200f014d21b8ffe8b3
0c014d21b8fff0400c0b014d212849210b1a490b4c003f3f12393f012f2b
2b2b2b2b002b5d31305d5d5d2b5d5d2b5d5d2b015d5d5d5d2b2b2b2b2b2b
5d2b5d2b2b1bb5002101100521b8ffd0400b1115482849210b1a490b4c00
183f3f12393f2b5f5e5d30315901140e0207010e0323222e0227012e0235
343e0233321e0217131737133e0333321e02037b01020302fecd040d1a28
1e1e28190e04fece04050108131f171d23130904fe0403fb020a13211b17
1e1107039f04090a0c07fca90b0e080304080e0a03570c120903080c0702
03080c09fd1a0c0c02e6090c080302080b00>IFKELP+Calibri AddT42Char 
1 15260 47 <00010059000002d703b7002b0060b0852b58b90010fff040160c0d014c26
100c0d014c2f0001003409440902092511b80102b319480f27b80102b105
4b003fed323fed32012f5dcd5d31302b2b1bb2251911b80102b56c19480f
0527b80102b26c054b00183f2b323f2b3230315925140e02232122263535
343e02370121222635343e023321321e021515140e02070121321e0202d7
06080e08fdd6151b04080e0a018dfe7f101304090d0902040b110c070408
0e0afe7501a6080d090646131b11071c21220e16161910026a2125121b11
07060e1611200e18171a10fd9607101b>IFKELP+Calibri AddT42Char 
1 1140 4 <00010061fff0040c051e00390097b0852b58b31c003b2bb8ffe8b310014d
2bb8fff0b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b
014d2bbe0233000e0018012f00210026012cb2135304bb012a0035003001
2eb10956003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c431301bb12118
b8012fb36c211326b8012cb46c13533504b8012ab36c350930b8012eb26c
095600183f2bc42b3f2bc42b30315925140e0623222e0235343e0233321e
0615140e0223222e0223220e0215141e0233323e0233321e02040c020508
14405f7b497ecb8f4d5396d17f386a5a461b08050304080b080e324f714f
568d64373563905b4d7351340f070a0603b71018120e1429271b54a4f19d
a1fcaf5c15202a1b0e131a12141c1309272f274586c17c7bbd7f41262f26
06111e00>IFKELP+Calibri AddT42Char 
1 14708 45 <00010029fffa034b03bc002f00a4b0852b58b90031ffc040110b014d2f08
0b014d2e100b014d3b2e0118b8fff0b60b014d34180117b8fff8b30b014d
16b8fff0b60b014d34160109b8fff0402a0b014d00080b014d3c00013823
01360b010b2010014d0b200c014d0b0b31302949230b111d49114c054c00
3f3f3f1239393f111201392f2b2b3130005d5d015d2b2b5d2b2b5d2b5d2b
2b2b1b400b2949230b111d49114c054c00183f3f3f1239393f3031592516
14060623222e022703030e0323222626363701012626363633321e021713
133e033332161606070103430813271f1e23150b04d8d7040b15221c1d25
1101090118fef708011327201d23140a04cdd0040a111f1b1d25120209fe
f92c0e130c0503070b070165fe9b070b0703050c130e01b701a70e130d04
03060a07feb1014f060a0703040b140ffe5e>IFKELP+Calibri AddT42Char 
1 1694 6 <000100ac0000037c050e002c00aeb0852b58b11a27b8ffe8b310014d27b8
fff0b30f014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d
27b80211400909132013200009001ab80108400d802601c02601d0260126
260619b8010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f
2f1239392f2f10e12b2b2b2b2b3231301bb1261ab80108400b6c00260116
032626060d19b8010cb46c0d510627b8010cb26c065400183f2b3f2b1239
2f5f5e5d2b30315925140e0223212226351134363321321e0215140e0223
211121321e0215140e0223211121321e02037c040a0d08fd931729291702
66080d080505080d08fe0601b2080d090404090d08fe4e0201080d0a0447
121b12081f270482271f08121b14121b1108fe6a09101c13121a1007fe31
08111b00>IFKELP+Calibri AddT42Char 
1 1444 5 <000200ac0000048f050e0012001f0098b0852b58401d3f2101131810014d
13100f014d13140d014d13120c014d13180b014d13bb02320000001affe8
b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8
ffe8b30b014d1abb021100090018010cb20e511bb80126b10554003fed3f
ed012fe12b2b2b2b2bd4e12b2b2b2b2b31305d1bb10e18b8010cb46c0e51
051bb80126b26c055400183f2b3f2b30315901140e022321222635113436
3321321e0207342e0223231133323e02048f56a5f0a6feee172929170125
a8e89d51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e8
9969b5844afc113e80c1>IFKELP+Calibri AddT42Char 
IFKELP+Calibri /CharStrings get begin
/g7 7 def
/g25 25 def
/g54 54 def
/g69 69 def
/g67 67 def
/g58 58 def
/g57 57 def
/g56 56 def
/g68 68 def
/g62 62 def
/g55 55 def
/g43 43 def
/g47 47 def
/g4 4 def
/g45 45 def
/g6 6 def
/g5 5 def
end
IFKELP+Calibri /Encoding get
dup 62 /g7 put
dup 63 /g25 put
dup 64 /g54 put
dup 65 /g69 put
dup 66 /g67 put
dup 67 /g58 put
dup 68 /g57 put
dup 69 /g56 put
dup 70 /g68 put
dup 71 /g62 put
dup 72 /g55 put
dup 73 /g43 put
dup 74 /g47 put
dup 75 /g4 put
dup 76 /g45 put
dup 77 /g6 put
dup 78 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELP+Calibri*1 [33{/.notdef}rp /g18 /g28 /g24 /g39 /g26 /g31 /g1 /g37 /g34 /g41 /g40 /g52 /g38 /g42 /g32 /g49 /g21 /g36 /g27 /g35 /g33 /g46 /g17 /g30 /g13 /g2 /g53 /g10 /g29 /g7 /g25 /g54 /g69 /g67 /g58 /g57 /g56 /g68 /g62 /g55 /g43 /g47 /g4 /g45 /g6 /g5 177{/.notdef}rp]IFKELP+Calibri nfIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf242.238 80.96 mo(>/5*"$/48'%243/*/24+0)[4.84999 2.36005 2.36003 3.54007 5.24001 3.67001 2.36002 5.50995 4.97992 2.35999 4.46005 5.50992 5.50995 5.50995 2.36002 3.54007 2.36005 5.50995 5.50992 4.06009 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf242.238 92.9635 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf249.688 92.9635 mo(9.\)?"$'2='$"#3+)[6.81696 5.50696 8.38693 5.50696 5.24701 3.66699 2.35696 5.50696 3.14691 2.35696 3.66699 5.24701 4.97705 5.50693 0 ]xsh249.688 106.166 mo(@ABCDDDDD')[3.14594 5.246 5.24603 5.37604 5.37604 5.37604 5.37604 5.37604 5.37604 0 ]xsh297.928 106.166 mo(E')[7.21008 0 ]xsh307.498 106.166 mo(FBCGDDDDDD)[5.24402 5.24402 5.37402 5.37402 5.37405 5.37402 5.37405 5.37402 5.37405 0 ]xsh360.978 106.166 mo(H)shIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf242.238 117.93 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf249.688 117.93 mo(:I"$#8"'$"#3'+/J",5"48*&)[6.02995 4.71994 5.24002 3.66998 4.98004 4.97995 5.23999 2.35999 3.66998 5.24002 4.98004 5.50995 2.35999 4.06006 2.36002 4.20004 5.24002 4.06003 2.36005 5.23999 5.50995 4.97992 3.5401 0 ]xsh249.688 131.133 mo(@ABCDD')[3.14594 5.24602 5.246 5.37604 5.37604 5.37604 0 ]xsh281.808 131.133 mo(E'FBGDDH)[7.21008 2.35995 5.24002 5.24002 5.37003 5.37003 5.37006 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf242.248 143.136 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf249.698 143.136 mo(K24*"L*)[5.63705 5.50691 5.50696 3.53705 5.24701 4.58701 0 ]xsh283.258 143.136 mo(;)sh286.408 143.136 mo(?#+"3'+"#$%&'2=)[5.50595 4.97601 4.06607 5.24603 5.50592 2.35599 4.06607 5.246 4.97604 3.66599 4.45605 5.50592 2.35599 5.50592 0 ]xsh249.698 156.099 mo(I/$.+)[4.71896 2.35904 3.66898 5.50894 0 ]xsh270.018 156.099 mo(;)sh273.168 156.099 mo($"5#*"3'+#\)\(5"+)[3.67099 5.241 2.36105 4.98105 3.54105 5.24103 5.51093 2.36099 4.06107 4.98105 8.39096 5.51093 2.36105 5.241 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf242.258 168.103 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf249.708 168.103 mo(ML%5.+/24'2='N9:'#43)[5.11307 4.59297 4.45306 2.36304 5.50293 4.06308 2.36304 5.50293 5.50293 2.36298 5.50293 3.14294 2.36298 6.42303 6.81296 6.03296 2.36298 4.98303 5.50296 0 ]xsh249.708 181.066 mo(2I"$$"\($"+"4*"3'I/$.+"+'/4)[5.50594 4.71594 5.24603 3.66599 3.66599 5.246 5.50595 3.66599 5.246 4.06607 5.246 5.50595 3.53607 5.246 5.50592 2.35602 4.71594 2.35605 3.66599 5.50592 4.0661 5.246 4.06607 2.35596 2.35605 0 ]xsh249.708 193.069 mo(*&"'"L#\)/4"3'+#\)\(5"+)[3.53906 5.50896 5.24899 2.35898 5.24902 4.58899 4.97903 8.38895 2.35904 5.50894 5.24902 5.50894 2.35898 4.06906 4.97903 8.38895 5.50894 2.35904 5.24902 0 ]xsh379.966 37.3091 mo
413.514 37.3091 li
413.514 40.4541 li
379.966 40.4531 li
cp
411.941 34.1651 mo
427.671 38.8811 li
411.941 43.5981 li
cp
.164492 1 1 .0814832 cmyk
f
427.672 16.5978 mo
563.379 16.5978 li
563.379 61.1648 li
427.672 61.1648 li
cp
.111269 .0303044 .00289921 0 cmyk
f
427.672 16.5978 mo
563.418 16.5978 li
563.418 61.1478 li
427.672 61.1478 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 427.672 16.5978 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELO+Calibri gcheck setglobal} if
1 10412 32 <00010022fe94037c03bc00240071b0852b58b9001bfff040350b014d371b
01291b0118180b014d261801260e360e022709011a400b014d3a1a011938
0b014d3b19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b
5d2b015d5d5d2b5d5d2b1b400c1f49190a13490a4b044f004b00183f3f3f
3f12393f3031592103060623222e023713262627012634363633321e0217
0133133e023332161614070233780631321a201102067c091003febf0810
241e1e22140905010103f8061122201c241106feb51011050c140e013904
120a035c15180e0503080f0dfd2e02d6130b05050e181200>IFKELO+Calibri AddT42Char 
IFKELO+Calibri /CharStrings get begin
/g32 32 def
end
IFKELO+Calibri /Encoding get
dup 58 /g32 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELO+Calibri*1 [33{/.notdef}rp /g8 /g4 /g3 /g7 /g1 /g11 /g10 /g2 /g17 /g14 /g30 /g15 /g29 /g18 /g28 /g16 /g21 /g6 /g22 /g23 /g26 /g31 /g27 /g19 /g25 /g32 197{/.notdef}rp]IFKELO+Calibri nfIFKELO+Calibri*1 [19 0 0 -18.9897 0 0 ]msf455.465 34.4 mo(2.+01%\)*+*%)[8.37329 9.34232 6.05545 7.99335 9.96921 4.32626 9.96918 8.86737 6.05542 9.03839 0 ]xsh452.501 56.2382 mo(85/%*9*4:-3-)[5.36926 9.96725 6.54739 4.32434 9.05548 9.96729 9.05548 4.32446 8.35248 7.34552 4.32446 0 ]xsh427.672 67.2011 mo
563.38 67.2011 li
563.38 203.843 li
427.672 203.843 li
cp
0 0 0 0 cmyk
f
427.672 67.2011 mo
563.418 67.2011 li
563.418 203.792 li
427.672 203.792 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 427.672 67.2011 ]ct
@
grestore newpath
%ADOBeginSubsetFont: MAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELP+Calibri gcheck setglobal} if
1 3172 11 <000100ac0000034b0514001a0061b0852b58b90015ffe8b310014d15b8ff
f0b30f014d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15
b80211b400090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b3130
1bb30f520615b8012bb26c065400183f2b3f30315925140e022321222635
11343e0233321e02151121321e02034b04090d09fdc41729081422181921
140801d0090d09044b141b13091f2704ae080c070505070c08fba109111c
>IFKELP+Calibri AddT42Char 
1 6098 20 <000100aaffed04790514002b00b5b0852b58401d602d01201810014d2010
0f014d20100d014d200a0c014d20180b014d20b802104011004015014d00
4013014d004011014d0016b8ffe8b310014d16b8fff0b30f014d16b8fff0
b30d014d16b8fff6b30c014d16b8ffe8b30b014d16ba0210000affc0b315
014d0ab8ffc0400913014d0a265210521bb80129b10556003fed3f3f012f
2b2be12b2b2b2b2bd42b2b2be12b2b2b2b2b31305d1bb526521052051bb8
0129b26c055600183f2b3f3f30315901140e0223222e023511343e023332
1e021511141e0233323e023511343e0233321e021504794580b8756bb07e
440814201a182213082c5375494b75512b081421191821130901de76b980
423e79b6770323080c070505070c08fcf25a86592d2c5882570317080c07
0505070c0800>IFKELP+Calibri AddT42Char 
2 4096 66 <00010046006c03b60416002f0033b0852b58b22a241eb8010cb20c061200
2f33cdfdcd3331301bb32a24121eb8010cb46c0c40061200182f331acd2b
cd3330315901140e02232111140e0223222e02351121222e0235343e0233
2111343e0233321e02151121321e0203b6060a0e08feb808111c15141d11
08feb8090d0a06060a0d08014908111d14151c11080149080d0b05024013
1b1208fe94080b080505080b08016c08121b13121b1208016c080d090505
090d08fe9408121b>IFKELP+Calibri AddT42Char 
1 14194 44 <00010035fffa058403bc00450131b0852b58b90047ffc0403d0f014d3808
0c014d29380137080c014d252e01262101262001261f01261e01261d0127
1c012804012903013a3b013b3a013b2d013c2c01102015014d10b8ffe0b3
10014d10b8ffe0400a0d014d10200c014d100fb8ffe0b310014d0fb8ffe0
400c0d014d0f200c014d0f414910b8ffe040200f014d3f104f106f107f10
04104012164810334925493a902c012c200f014d2cb8ffc0401013164867
2c772c02452c012c174c094c003f3fd55d5d2b2b5dc43f3fcd2b5d2b3f01
2f2b2b2b2f2b2b2b2b3130005d5d5d5d015d5d5d5d5d5d5d5d5d2b5d2b2b
1b401d41490f101f103f104f10040c10401216481040334925493a502c01
032cb8ffc04012131648262c362c02022c010d042c174c094c00183f3fd5
5f5e5d5d2b5f5dc43f3f1acd2b5e5d3f30315901140607010e0323222e02
27032707030e0323222e022701262635343e0233321e0217131737133e03
33321e0217131737133e0333321e0205840405fef7030d17281e1f2a190c
03bd0202af030d1a291e1f27190c03fef90504081320171c22120803d902
02c70209121f19181f120802d70201d6020913211a181d1107039f07140f
fca90b0e080304080e0a028d0909fd730b0e080304080e0a03570f140709
0b070203070d09fd1a090902e6090d070303070c08fd18090902e6090d07
0302080a>IFKELP+Calibri AddT42Char 
2 3754 63 <00020038fff10265029600130027003eb0852b58401214001e0a10190119
af0f7f1f230123af0582003fed713fed71012fc1d4c131301b400c0f19af
6c0f7f0523af6c058200183f2b3f2b30315901140e0223222e0235343e02
33321e0207342e0223220e0215141e0233323e02026522466b484968421f
21446b494f6b401a8c10213625233421101323352228331f0d01474d7e59
322e577d50497c5a34365b7a4938573a1d1c385338445b35151e3b53>IFKELP+Calibri AddT42Char 
2 3754 63 <00020038fff10265029600130027003eb0852b58401214001e0a10190119
af0f7f1f230123af0582003fed713fed71012fc1d4c131301b400c0f19af
6c0f7f0523af6c058200183f2b3f2b30315901140e0223222e0235343e02
33321e0207342e0223220e0215141e0233323e02026522466b484968421f
21446b494f6b401a8c10213625233421101323352228331f0d01474d7e59
322e577d50497c5a34365b7a4938573a1d1c385338445b35151e3b53>IFKELP+Calibri AddT42Char 
2 3932 64 <0001ff4bffdc036e053500150038b0852b58b90013ffc0b40f10014c13b8
ffc0b40b014d1308b8ffc0b510014d081005002f2f012f2b2f2b2b31301b
b1100500182f2f303159070e03232226263637013e033332161606072205
0e141c14161b0b03080384050e151b15151b0c03080809090703080d130c
0509080b0603070e140b>IFKELP+Calibri AddT42Char 
2 4062 65 <ffff0048ffdc057005350027003f001002870027003f030b000000070040
017c0000>IFKELP+Calibri AddT42Char 
2 86 51 <0001002a037501730578001b001bb0852b58b20b1747003fcd31301bb30b
40174700183f1acd30315901140e0207070e0323222e02371335343e0233
321e020173060e171189050d13191311170a0104850b18241a1924170b05
261f332f2d18ce070c070303070c0901137f1a20120606122000>IFKELP+Calibri AddT42Char 
1 5866 19 <0001000ffffa03d7050e00220080b0852b58b718400d014d181100b8ffc0
b40d014d0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06
b8fff6b30c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612
b80128b31d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b31301b
b2061d12b80128b46c1d510c5500183f3f2b3230315901140e0223211114
0e0223222e02351121222e0235343e023321321e0203d704090d08fe9408
14211918221408fe94080d080505080d080384080d090404c4131c1108fb
9e080c070505070c08046208111c13131d120808121d>IFKELP+Calibri AddT42Char 
1 4636 16 <00020063ff41058705210027003b00beb0852b58401d0a2112281810014d
28100f014d28140d014d28120c014d28180b014d28b80232400a00201c30
1c801c031c32b8ffe8b310014d32b8fff0b30f014d32b8ffecb30d014d32
b8ffeeb30c014d32b8ffe8b30b014d32b80233b412210a0d2db80129b417
53250437b8012bb10d56003fedd4cd3fed123939012fe12b2b2b2b2bd45d
c4e12b2b2b2b2b12393931301bb4210a0d172db8012940096c1753254004
0d0d37b8012bb26c0d5600183f2b10d41acd3f2b12393930315905140e02
23222e0227060623222e0235343e0233321e0215140e02071e0501342e02
23220e0215141e0233323e020587050a0c06145974843e31966392d58b44
4a94de948bd38f4813293e2a496e48281408feac275b987070985f29265a
9772719a5e2872171f1106213f5a3c1e2c56a6f7a09af9af5f56a5f29d51
9484702d3c43220f132302e06ebc8b4e538dba6872bf8c4d548fbd00>IFKELP+Calibri AddT42Char 
IFKELP+Calibri /CharStrings get begin
/g11 11 def
/g20 20 def
/g66 66 def
/g44 44 def
/g65 65 def
/g51 51 def
/g19 19 def
/g16 16 def
end
IFKELP+Calibri /Encoding get
dup 79 /g11 put
dup 80 /g20 put
dup 81 /g66 put
dup 82 /g44 put
dup 83 /g65 put
dup 84 /g51 put
dup 85 /g19 put
dup 86 /g16 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELP+Calibri*1 [33{/.notdef}rp /g18 /g28 /g24 /g39 /g26 /g31 /g1 /g37 /g34 /g41 /g40 /g52 /g38 /g42 /g32 /g49 /g21 /g36 /g27 /g35 /g33 /g46 /g17 /g30 /g13 /g2 /g53 /g10 /g29 /g7 /g25 /g54 /g69 /g67 /g58 /g57 /g56 /g68 /g62 /g55 /g43 /g47 /g4 /g45 /g6 /g5 /g11 /g20 /g66 /g44 /g65 /g51 /g19 /g16 169{/.notdef}rp]IFKELP+Calibri nfIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf435.223 80.96 mo(9"%"++#$6'=/5"+0)[6.81696 5.24701 4.45706 5.24701 4.06705 4.06708 4.97702 3.66699 4.71704 2.35696 3.14694 2.35703 2.35706 5.24701 4.06705 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf435.223 92.9635 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf442.673 92.9635 mo(!<O1:'!!P'Q'O!P'$79:)[4.85001 2.61996 4.45999 5.90002 6.02994 2.35999 4.85001 4.84998 6.69 2.35999 5.23999 2.35999 4.45999 4.85001 6.68997 2.35995 3.66998 5.64001 6.81995 0 ]xsh442.673 105.927 mo(3#*#?#+"')[5.50595 4.97601 3.53607 4.97604 5.50595 4.97604 4.06607 5.246 0 ]xsh483.833 105.927 mo(@$"\)2I"3'$79:+)[3.14594 3.67599 5.246 8.38596 5.50595 4.71594 5.24603 5.50592 2.35596 3.67603 5.63599 6.81598 6.02594 0 ]xsh442.673 117.93 mo(R/*&'AC)[7.47195 2.36206 3.54205 5.50195 2.36197 5.242 0 ]xsh474.523 117.93 mo(S'#\)?/8.2.+')[7.47195 2.362 4.98203 8.39197 5.50192 2.36206 4.9819 5.50195 5.50195 5.50189 4.06207 0 ]xsh533.513 117.93 mo(9T+H)[6.81696 2.617 4.06708 0 ]xsh442.663 130.893 mo(@)sh445.813 130.893 mo(!<O1:'$79:'$"='>:!U:H)[4.85001 2.61996 4.45999 5.90002 6.02994 2.35999 3.66998 5.64001 6.81995 6.02994 2.35999 3.67001 5.23999 3.14993 2.35999 4.85001 6.02997 4.84998 5.10999 6.02997 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf435.223 142.897 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf442.673 142.897 mo(79:)[5.63699 6.81696 0 ]xsh461.153 142.897 mo(;)sh464.303 142.897 mo(+"-)[4.06406 5.24402 0 ]xsh481.473 142.897 mo(3#*#'\("$'+#\)\(5")[5.50595 4.97601 3.53607 4.97604 2.35599 5.50595 5.24597 3.66602 2.35596 4.0661 4.97601 8.38599 5.50592 2.35602 0 ]xsh442.673 155.859 mo(@79:)[3.14594 5.63599 6.81598 0 ]xsh464.303 155.859 mo(;)sh467.453 155.859 mo(+"-)[4.06406 5.24402 0 ]xsh484.623 155.859 mo(>:!UVH)[4.85001 6.02994 4.85001 5.10999 7.08005 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf435.233 167.863 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf442.683 167.863 mo(!*.3/"3'I/$#5')[4.85001 3.54007 5.50992 5.50995 2.36005 5.23999 5.50995 2.35999 4.71994 2.36005 3.67001 4.98001 2.36005 0 ]xsh498.003 167.863 mo(8"4"+',)[4.98093 5.24103 5.50095 5.24097 4.0611 2.36096 0 ]xsh442.683 181.066 mo(8"42\)"')[4.98093 5.24103 5.50092 5.50095 8.39096 5.241 0 ]xsh479.913 181.066 mo(\("$'+#\)\(5")[5.50595 5.246 3.66599 2.35599 4.06607 4.97601 8.38599 5.50592 2.35602 0 ]xsh442.683 193.069 mo(@)sh445.833 193.069 mo(I/$.+'$"='>:!U:H)[4.71896 2.35904 3.66898 5.50894 4.06906 2.35898 3.66901 5.24899 3.14893 2.35901 4.849 6.02893 4.849 5.10901 6.02893 0 ]xsh563.379 37.3091 mo
596.927 37.3091 li
596.927 40.4541 li
563.379 40.4531 li
cp
595.354 34.1651 mo
611.085 38.8811 li
595.354 43.5981 li
cp
.164492 1 1 .0814832 cmyk
f
611.085 16.9241 mo
786.477 16.9241 li
786.477 61.1651 li
611.085 61.1651 li
cp
.111269 .0303044 .00289921 0 cmyk
f
611.085 16.9241 mo
786.527 16.9241 li
786.527 61.1479 li
611.085 61.1479 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 611.085 16.9241 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELO+Calibri gcheck setglobal} if
1 7560 24 <00010099fffa05d003ca0050011eb0852b58401b12100b014d13180b014d
26100b0c014c27180b0c014c7052014613b8fff6b30c014d13b8ffe8b30b
014d13b8fff0b310014d13b8fff0b30f014d13b8ffeab30d014d13b801f8
401e1e160d014d1e1e320a0a0c014d0a100d014d0a180b014d0a100f1001
4c0ab801f9b7504011014d503e27b8fff6b30c014d27b8ffe8b30b014d27
b8fff0b310014d27b8fff0b30f014d27b8fff0b30d014d27bb01f8003200
100106b24b4a24b80106400d414a3e462d38492d4c194c054c003f3f3f3f
1239393fed3fed012fe12b2b2b2b2b39d42be12b2b2b2b11392f2be12b2b
2b2b2b3931305d002b2b2b2b1bb14b10b80106b46c4b4a4124b80106400e
6c414a3e462d38492d4c194c054c00183f3f3f3f1239393f2b3f2b303159
25140e0223222e023511342e022322060711140e0223222e023511342e02
2322060711140e0223222e023511343e0233321e021515363633321e0217
3e0333321e021505d00812201819201308142c442e397345081320181721
1307162c432e397444081220191820130706121c17161d10074c8f493859
4430102d514b47245776491f19080b080404080b080223395e44245855fd
8b080b080404080b080223395e44245855fd8b080b080404080b08038408
0b090303090b0877554f1a2f412831442a133d66894c>IFKELO+Calibri AddT42Char 
1 10646 33 <00010001fee7030a05be00150017b0852b58b11005002f2f31301bb11005
00182f2f303159170e0323222e0237013e0333321e0207a8040d141d1519
21120406025d040d131e151920120405f10d0f0804070d130d067b0d0f09
03070c140d00>IFKELO+Calibri AddT42Char 
IFKELO+Calibri /CharStrings get begin
/g24 24 def
/g33 33 def
end
IFKELO+Calibri /Encoding get
dup 59 /g24 put
dup 60 /g33 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELO+Calibri*1 [33{/.notdef}rp /g8 /g4 /g3 /g7 /g1 /g11 /g10 /g2 /g17 /g14 /g30 /g15 /g29 /g18 /g28 /g16 /g21 /g6 /g22 /g23 /g26 /g31 /g27 /g19 /g25 /g32 /g24 /g33 195{/.notdef}rp]IFKELO+Calibri nfIFKELO+Calibri*1 [19 0 0 -18.9897 0 0 ]msf620.893 34.4 mo(/'!\(%059+*;39*+359%)[6.55499 10.222 12.1979 10.8869 4.33197 7.84705 9.95587 9.78485 6.06116 9.04407 15.0669 4.33209 9.95587 8.87311 6.28912 4.33203 9.95593 9.95581 0 ]xsh629.842 56.485 mo(<%013;./*%*9*4:-3-)[7.34161 4.32056 7.98767 9.9635 4.32068 15.0745 9.43164 6.16357 9.0517 4.32056 9.05164 9.9635 9.0517 4.32062 8.34869 7.34174 4.32068 0 ]xsh611.084 67.2628 mo
786.476 67.2628 li
786.476 204.149 li
611.084 204.149 li
cp
0 0 0 0 cmyk
f
611.084 67.2628 mo
786.527 67.2628 li
786.527 204.097 li
611.084 204.097 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 611.084 67.2628 ]ct
@
grestore newpath
%ADOBeginSubsetFont: MAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELP+Calibri gcheck setglobal} if
1 728 3 <000300ac00000401050e001e002b003800f7b0852b58401a1f1810014d1f
100f014d1f100d014d1f180c014d1f200b014d1fb8022e40281a15401001
4d15400f014d15150b2c1810014d2c100f014d2c100d014d2c180c014d2c
200b014d2cba02320000ffc0b50b014d002633b8ffe8b310014d33b8fff0
b30f014d33b8fff0b30d014d33b8fff6b30c014d33b8ffe8b30b014d33b8
0210400da00bc00b020b1a27f431310724b80109b2105134b8010bb10754
003fed3fed12392fed39012f5de12b2b2b2b2b32d42be12b2b2b2b2b1239
2f2b2b39e12b2b2b2b2b31301b400a1a3127f46c3131071024b80109b46c
10510734b8010bb26c075400183f2b3f2b12392f2b3930315901140e0423
212226351134363321321e0215140e02071e0301342e0223231133323e02
13342e0223231133323e0204011f384f637149feae172929170126749463
32162b412a355c4528fefd1a385a4ab2c4435236194e25476b51cefa3b58
432601733d67523e2a151f270482271f2c547a4d2e544738120a35526e02
012f4c351cfe5d233b4ffddd3a583c1ffe381c375200>IFKELP+Calibri AddT42Char 
1 6656 22 <0001003dfffa06e00514003c008ab0852b58b3263c0132b8fff840430b0c
014c2532012f080b0c014c282f0125100b0c014c25250122180b0c014c29
220118200b0c014c2d31012d30012d24012d230137522a5223300b03121d
5212550555003f3f3f1217393f3f31305d5d5d5d012b5d2b5d2b5d2b5d2b
5d1b400f37522a5223300b03121d521255055500183f3f3f1217393f3f30
3159250e0323222e02270123030e0323222e0227012626363633321e0217
0133013e0333321e02170133013e03333216160607058304101c291e1f2b
1c0e04fef102fa030e1a2920212c1c0f03feaa06011126201f2413070201
23010114030914251e1c21140903012902011d030613231d1e2310010526
0e1109040409110e03d1fc2f0e1109040409110e04ab171a0e0403080e0b
fbc4043a0b0f080404080f0bfbc6043b0a0f0804050e1a17>IFKELP+Calibri AddT42Char 
2 1968 59 <000100720000039c0521003e00cab0852b58400d2936012b1e01291d0126
1e0140b8ffc040170f024d604001161810014d16100c0d014c16200b014d
16b8022db633253325330039b8ffe8b310014d39ba027f000bffc0b30c01
4d0bb8ffe0400b0f014d0b1138392020391bb8012eb63316062e531039b8
0128b10654003fed323f123939ed11392f123939012f2b2be12bcd39392f
2f10e12b2b2b31305d2b005d015d5d5d1bb71138392020392e1bb8012e40
096c3316062e53100639b80128b26c065400183f2b323f1239392b11392f
12393930315925140e022321222e0235343e0237133e0335342e0223220e
0223222e0235343e0633321e0215140e02070721321e02039c05090f09fd
350e150f07030a0f0cfb576939121c3550343d6149310c070b0704020508
183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c130907101e1614
1e17170d010a5c9278622b2b4d3a2222282208121e150f16100e15242318
355c7a453e7b8faf72d609121b00>IFKELP+Calibri AddT42Char 
2 2342 60 <00010067ffed0392052100580147b0852b58b9005affc0401c0f024d605a
01310810014d31100f014d31100c0d014c31200b014d31b80235400a4e53
264e4e1813014d40b8ffe840260f014d26200f014d40264e4e2640030e1b
0810014d1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8
022db500080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b3
0f014d0eb8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ff
c0b30f014d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf3
202005495316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b
5d2b2b012f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910
e12b2b2b2b31305d2b1b400c0f3b010b033b113b11164936b8010b400d6c
53202cf36c20200549530516b8010bb26c055600183f2b3f12392f2b392b
1139392f2f5f5e5d30315901140e0223222e0635343633321e0233323e02
35342e022323222e0235343e023333323e0235342e0223220e0223222e02
35343e0633321e0215140e0207151e0303923e74aa6b4171583a0f080603
0e0d0935536f44426444222b53794d7b080f0b07060b0e0971426949271a
3451353a614c320a070b0703020608133a556f405a885b2d203e5a3b436f
502d0172598f6637151d1f0e0e141d15241c202520223e55323758402207
101a1513190f07224059372849361f232823050f1b160f17110e13242318
2e5475473d6951390b020735506b>IFKELP+Calibri AddT42Char 
2 2896 61 <00020030fffa03d30514002a002e0125b0852b58403a252e01262d01272c
01242701242601251c01261b01231a012419012518012517012616012615
01261401261001260f012405012404012b1b0130b8ffc040120f024d6030
012d16180f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c
2e2e10b8fffc401d0f024d101810014d10100f014d10100d014d100a0c01
4d10100b014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8
ffe0400a0b014d0404302f271b2eb8010b400a042b2110100a21520a5500
3f3f12392f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133
cd2b2b2b2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d
5d1bb3271b102eb8010b400b6c042b2110100a21520a5500183f3f12392f
1239332b3232303159011406232311140e0223222e02351121222e023534
3e0237013e0333321e0215113332160123012103d3141292081420191820
1307fdea0c100d0502060a0701d205131e2c1e21311e10921115fea102fe
5b01a701702126fef0080b080404080b08011006101e18131e19170d0312
080c080305080d09fcc62302e9fd3a00>IFKELP+Calibri AddT42Char 
IFKELP+Calibri /CharStrings get begin
/g3 3 def
/g22 22 def
/g59 59 def
/g60 60 def
/g61 61 def
end
IFKELP+Calibri /Encoding get
dup 87 /g3 put
dup 88 /g22 put
dup 89 /g59 put
dup 90 /g60 put
dup 91 /g61 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELP+Calibri*1 [33{/.notdef}rp /g18 /g28 /g24 /g39 /g26 /g31 /g1 /g37 /g34 /g41 /g40 /g52 /g38 /g42 /g32 /g49 /g21 /g36 /g27 /g35 /g33 /g46 /g17 /g30 /g13 /g2 /g53 /g10 /g29 /g7 /g25 /g54 /g69 /g67 /g58 /g57 /g56 /g68 /g62 /g55 /g43 /g47 /g4 /g45 /g6 /g5 /g11 /g20 /g66 /g44 /g65 /g51 /g19 /g16 /g3 /g22 /g59 /g60 /g61 164{/.notdef}rp]IFKELP+Calibri nfIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf618.635 80.96 mo(:4#56+/+'+*"\(+0)[6.02997 5.50989 4.98004 2.36005 4.72003 4.06006 2.36005 4.06006 2.35999 4.06006 3.5401 5.23999 5.50995 4.06006 0 ]xsh618.635 92.9635 mo(CH)[5.37506 0 ]xsh630.175 92.9635 mo(WX:'#5/84'"#%&'79:)[5.76807 9.30798 6.02795 2.35797 4.97803 2.35803 2.35809 4.97791 5.50793 2.35797 5.24805 4.97803 4.45801 5.50793 2.35797 5.638 6.81799 0 ]xsh717.215 92.9635 mo(;)sh720.365 92.9635 mo(+"-)[4.06409 5.24402 0 ]xsh737.535 92.9635 mo(>:!UV'2)[4.84998 6.02997 4.84998 5.11005 7.08002 2.35999 0 ]xsh773.324 92.96 mo(4)sh630.171 106.16 mo(*&"'!<O1:'$79:'$"='>:!U:)[3.53906 5.50897 5.24896 2.35901 4.849 2.61896 4.45898 5.89905 6.02893 2.35901 3.66895 5.63904 6.81891 6.02899 2.35895 3.66901 5.24902 3.14893 2.35895 4.849 6.02899 4.84894 5.10901 0 ]xsh618.631 117.924 mo(YH)[5.37506 0 ]xsh630.171 117.924 mo(WX:'#5/84'"#%&'79:)[5.76807 9.30798 6.02795 2.35797 4.97803 2.35803 2.35809 4.97791 5.50793 2.35797 5.24805 4.97803 4.45801 5.50793 2.35803 5.63794 6.81799 0 ]xsh717.211 117.924 mo(;)sh720.361 117.924 mo(+"-)[4.06409 5.24402 0 ]xsh737.531 117.924 mo(>:!UV'2)[4.84998 6.02997 4.84998 5.11005 7.08002 2.35999 0 ]xsh773.324 117.92 mo(4)sh630.171 131.12 mo(*&"'%2$$"+\(243/48'I/$.+'$"='>:!U:)[3.53906 5.50897 5.24896 2.35901 4.45905 5.50891 3.66901 3.66901 5.24896 4.06909 5.50891 5.50897 5.50891 5.50891 2.35907 5.50891 4.97894 2.35901 4.71893 2.35907 3.66895 5.50897 4.06903 2.35901 3.66901 5.24902 3.14893 2.35895 4.849 6.02893 4.849 5.10901 0 ]xsh618.631 143.124 mo(ZH)[5.37506 0 ]xsh630.171 143.124 mo(N"*"%*'$79:)[6.42303 5.24304 3.54303 5.24304 4.45306 3.54303 2.36298 3.67297 5.63306 6.81293 0 ]xsh683.131 143.124 mo(;)sh686.281 143.124 mo(I/$.+'%&/\)"$/%'$"#3+)[4.71893 2.35907 3.66901 5.50891 4.06909 2.35895 4.45905 5.50897 2.35901 8.38898 5.24896 3.66901 2.35907 4.45905 2.35895 3.66901 5.24902 4.979 5.50897 0 ]xsh630.171 156.086 mo(#+'=2.43'/4'%2\)\)24'?"*R""4'*&")[4.98102 4.0611 2.36096 3.14093 5.51093 5.51093 5.51099 5.51093 2.36096 2.36102 5.51099 2.36096 4.46106 5.51093 8.39093 8.39099 5.51093 5.51093 2.36096 5.51093 5.24103 3.54108 7.47095 5.24103 5.24103 5.51093 2.36102 3.54102 5.51099 0 ]xsh630.171 168.09 mo(#5/84\)"4*+'2='+*"\('C'E'Y)[4.98102 2.36108 2.36102 4.9809 5.51099 8.39093 5.24103 5.51093 3.54108 4.0611 2.36096 5.51093 3.14093 2.36096 4.06104 3.54108 5.24103 5.51093 2.36102 5.37103 2.36096 7.21106 2.36102 0 ]xsh618.631 181.053 mo([H)[5.37506 0 ]xsh630.171 181.053 mo(K#5%.5#*"'$79:'%24*#\)/4#*/24'E)[5.63702 4.97705 2.35706 4.45703 5.50696 2.35706 4.97699 3.53711 5.24701 2.35699 3.66699 5.63696 6.81696 6.02698 2.35693 4.45703 5.50696 5.50696 3.53705 4.97705 8.38696 2.35699 5.50696 4.97705 3.53705 2.35706 5.5069 5.50696 2.35699 0 ]xsh630.171 193.056 mo($79:)[3.67102 5.64099 6.82092 0 ]xsh652.321 193.056 mo(;)sh655.471 193.056 mo(I/$.+'%&/\)"$#'+*#*/+*/%+)[4.71893 2.35907 3.66901 5.50891 4.06909 2.35895 4.45905 5.50897 2.35901 8.38898 5.24896 3.66901 4.97906 2.35895 4.06909 3.53906 4.97906 3.53906 2.35901 4.06909 3.53906 2.35901 4.45905 0 ]xsh19.92 291.888 mo
210.175 291.888 li
210.175 336.129 li
19.92 336.129 li
cp
.111269 .0303044 .00289921 0 cmyk
f
19.92 291.888 mo
210.23 291.888 li
210.23 336.112 li
19.92 336.112 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 19.92 291.888 ]ct
@
grestore newpath
IFKELO+Calibri*1 [19 0 0 -18.9897 0 0 ]msf28.2986 309.2 mo($;74.;.9+*+359%58%+1.%)[4.71958 15.0745 9.96348 4.32067 9.43162 15.0745 9.43163 9.79248 6.06873 8.88068 6.29672 4.32069 9.96346 9.96349 4.32056 9.96346 5.76447 4.32057 6.29672 9.96349 9.43161 0 ]xsh40.0596 331.285 mo(05;7*/.\)%;.+15\)-)[7.83948 9.96726 15.0783 9.96728 9.05547 6.30038 9.43542 9.96729 4.32436 15.0783 9.34042 6.30054 9.96729 9.96725 9.96729 0 ]xsh19.9198 342.227 mo
210.176 342.227 li
210.176 565.935 li
19.9198 565.935 li
cp
0 0 0 0 cmyk
f
19.9198 342.227 mo
210.23 342.227 li
210.23 565.85 li
19.9198 565.85 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 19.9198 342.227 ]ct
@
grestore newpath
%ADOBeginSubsetFont: MAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELP+Calibri gcheck setglobal} if
2 0 50 <00010097fff7016e00e0000b0029b0852b58b10006b8ffc0b60c014d0609
034c003fcd012f2bc131301bb30940034c00183f1acd3031592514062322
26353436333216016e2f3e3c2e2f3e3c2e6d472f2e45472f2e00>IFKELP+Calibri AddT42Char 
1 4082 14 <00020063ffed04e8052100130027009db0852b58401a141810014d14100f
014d14140d014d14120c014d14180b014d14b80233400920003000800003
001eb8ffe8b310014d1eb8fff0b30f014d1eb8ffecb30d014d1eb8ffeeb3
0c014d1eb8ffe8b30b014d1ebb0233000a00190129b20f5323b8012bb105
56003fed3fed012fe12b2b2b2b2bd45de12b2b2b2b2b31301bb10f19b801
29b46c0f530523b8012bb26c055600183f2b3f2b30315901140e0223222e
0235343e0233321e0207342e0223220e0215141e0233323e0204e84a93de
9492d58b444a94de948fd48d45b5275b987070985f29265a9772719a5e28
02969dfcb15f57a6f6a099faaf5f56a5f3a96ebd8b4e548cbb6772c08b4d
548fbc00>IFKELP+Calibri AddT42Char 
1 3352 12 <000100acfffa062b050e003c00d6b0852b584010603e703e020d3030172f
2f0a2e18181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1a
b8fff6b30c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d
0a100f014d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc04019
0b014d002436510b18170d2f18312e061f28511f5512550555003f3f3f3f
12173911333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311
393d2f3333113331305d1b401436510b18170d2f18312e061f28511f5512
55055500183f3f3f3f12173911333f30315925140e0223222e0235112301
0e0323222e0227012311140e0223222e02351134363333321e0217013301
3e033333321e0215062b08141f191721130802fe33030b151d14151e140b
02fe470108142019182013072c1b68203024180901770501860b1a1f2619
6d0f1b130c1a080c070505070c080467fb94070a070304070a06046cfb99
080c070505070c0804a62a240c1a281bfc5703a61e2a190b09131d15>IFKELP+Calibri AddT42Char 
1 6980 23 <0001003b00000394050e0029003fb0852b58b12211b80126b31b510c27b8
0127b10554003fed323fed3231301bb2221b11b80126b56c1b510c0527b8
0127b26c055400183f2b323f2b3230315925140e02232122263535343e02
370121222e0235343e02332132161515140e020701213216039404090d09
fd041a20030a120d0255fdb20a0e090404090e0a02d01b1f040a110efdae
0278111248131b12082023250d16191f1503a608111b12141c12081f2027
10191a1e14fc5e22>IFKELP+Calibri AddT42Char 
IFKELP+Calibri /CharStrings get begin
/g50 50 def
/g14 14 def
/g12 12 def
/g23 23 def
end
IFKELP+Calibri /Encoding get
dup 92 /g50 put
dup 93 /g14 put
dup 94 /g12 put
dup 95 /g23 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELP+Calibri*1 [33{/.notdef}rp /g18 /g28 /g24 /g39 /g26 /g31 /g1 /g37 /g34 /g41 /g40 /g52 /g38 /g42 /g32 /g49 /g21 /g36 /g27 /g35 /g33 /g46 /g17 /g30 /g13 /g2 /g53 /g10 /g29 /g7 /g25 /g54 /g69 /g67 /g58 /g57 /g56 /g68 /g62 /g55 /g43 /g47 /g4 /g45 /g6 /g5 /g11 /g20 /g66 /g44 /g65 /g51 /g19 /g16 /g3 /g22 /g59 /g60 /g61 /g50 /g14 /g12 /g23 160{/.notdef}rp]IFKELP+Calibri nfIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf27.4706 355.76 mo(K2\)\(#$"3'\)"*&23+0)[5.63705 5.50693 8.38696 5.50694 4.97704 3.66699 5.24702 5.50693 2.35698 8.38696 5.24701 3.53707 5.50694 5.50693 5.50694 4.06706 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf27.4706 367.763 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf34.9206 367.763 mo(7:X'\)"*&23'/\\"\\'*&"'$#R'.4\($2%"++"3)[5.63699 6.02695 9.30699 2.35698 8.38696 5.24701 3.53707 5.50694 5.50693 5.50694 2.35697 2.35704 2.61699 5.24701 2.61699 2.35698 3.53706 5.50694 5.24701 2.35698 3.667 4.97702 7.47696 2.35699 5.50693 5.50693 5.50693 3.66699 5.50693 4.45706 5.24701 4.06705 4.06708 5.24701 0 ]xsh34.9206 380.966 mo($"#3+)[3.67099 5.24101 4.98104 5.51094 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf27.4706 392.97 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf34.9206 392.97 mo(WX:'\)"*&23'/\\"\\'*&"'.4\)#\(\("3'$"#3+)[5.76806 9.30799 6.02795 2.35798 8.38796 5.24802 3.53806 5.50793 5.50793 5.50794 2.35797 2.35805 2.61799 5.24801 2.61799 2.35798 3.53806 5.50794 5.24802 2.35798 5.50793 5.50793 8.38797 4.97803 5.50793 5.50793 5.24802 5.50793 2.35797 3.668 5.24802 4.97803 5.50797 0 ]xsh34.9206 405.933 mo(#=*"$'WX:'#5/84\)"4*'24'*&"'!<O1:)[4.98104 3.14093 3.54107 5.24101 3.67099 2.36098 5.77106 9.31099 6.03094 2.36098 4.98104 2.36105 2.36104 4.98093 5.51094 8.39096 5.24101 5.51094 3.54107 2.36098 5.51093 5.51094 2.36098 3.54108 5.51094 5.24101 2.36099 4.85098 2.621 4.46097 5.90103 0 ]xsh34.9206 417.936 mo($79:'$"='>:!U:)[3.67099 5.64099 6.82096 6.03095 2.36098 3.67099 5.241 3.14093 2.36098 4.851 6.03094 4.851 5.11099 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf27.4706 430.899 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf34.9206 430.899 mo(!]7U^M79:'\)"*&23'/\\"\\'*)[4.84999 6.95003 5.64 5.10999 8.90996 5.11006 5.64 6.81996 6.02995 2.35999 8.38995 5.24001 3.54007 5.50994 5.50993 5.50994 2.35999 2.36002 2.62 5.24002 2.62 2.35999 0 ]xsh147.137 430.88 mo(&")[5.50993 0 ]xsh34.9165 442.88 mo(.4\)#\(\("3'$"#3+'#=*"$')[5.50594 5.50594 8.38596 4.97604 5.50594 5.50594 5.24601 5.50594 2.35599 3.66599 5.24602 4.97604 5.50594 4.06606 2.35599 4.97604 3.14592 3.53607 5.24602 3.66599 0 ]xsh132.187 442.88 mo(!2$*^"79:)[4.84999 5.50993 3.67 3.54005 8.90996 5.24002 5.63998 6.81998 0 ]xsh34.9165 455.843 mo(#5/84\)"4*'24'*&"'!<O1:'$79:'$"='>:!U:)[4.98104 2.36104 2.36104 4.98093 5.51094 8.39096 5.24102 5.51094 3.54106 2.36098 5.51093 5.51094 2.36098 3.54107 5.51094 5.24101 2.36098 4.851 2.62099 4.46098 5.90101 6.03094 2.36099 3.67099 5.64099 6.82095 6.03096 2.36098 3.67099 5.24101 3.14093 2.36098 4.851 6.03096 4.851 5.11098 0 ]xshIFKELQ+ArialMT*1 [10 0 0 -9.9946 0 0 ]msf27.4665 467.846 mo(!)shIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf34.9165 467.846 mo(_X:Y'\)"*&23'/\\"\\'*&"'%5"#4'$"#3+'#=*"$)[4.85002 9.31 6.02995 5.38004 2.35998 8.38996 5.24001 3.54007 5.50994 5.50993 5.50994 2.35998 2.36005 2.61999 5.24001 2.61999 2.35999 3.54006 5.50994 5.24001 2.35999 4.46004 2.36005 5.24001 4.98003 5.50995 2.35999 3.66998 5.24001 4.98004 5.50995 4.06006 2.35999 4.98004 3.14993 3.54005 5.24002 0 ]xsh34.9165 480.81 mo(_X:Y'\)#\(\(/48'#43'*$/\)\)/48'?#+"3'24)[4.85002 9.31 6.02995 5.38004 2.35998 8.38996 4.98003 5.50995 5.50993 2.36004 5.50994 4.97993 2.35999 4.98003 5.50994 5.50994 2.35999 3.54006 3.66999 2.36005 8.38995 8.38995 2.36005 5.50993 4.97993 2.35999 5.50993 4.98004 4.06007 5.24001 5.50993 2.35999 5.50992 0 ]xsh34.9165 492.813 mo(*&"'!<O1:'$79:'$"='>:!U:)[3.53907 5.50894 5.24902 2.35898 4.849 2.61899 4.45898 5.89902 6.02895 2.35898 3.66899 5.63899 6.81896 6.02895 2.35899 3.66898 5.24902 3.14893 2.35898 4.849 6.02895 4.849 5.10899 0 ]xsh27.4665 505.776 mo(:4#56+/+'+*"\(+0)[6.02995 5.50994 4.98004 2.36004 4.72003 4.06007 2.36004 4.06006 2.35998 4.06006 3.54007 5.24001 5.50994 4.06006 0 ]xsh27.4665 517.78 mo(CH)[5.37504 0 ]xsh39.0065 517.78 mo(<\)\(5"\)"4*'*&"'%2\)\(#$"3'\)"*&23+)[2.62199 8.39196 5.50194 2.36204 5.24201 8.39196 5.24201 5.50194 3.54206 2.36198 3.54207 5.50194 5.242 2.36198 4.46204 5.50194 8.39195 5.50194 4.98204 3.672 5.242 5.50194 2.36198 8.39195 5.24202 3.54207 5.50194 5.50192 5.50194 0 ]xsh39.0065 530.742 mo(+"\(#$#*"56'24'"#%&'79:)[4.06406 5.24401 5.50394 4.98404 3.67399 4.98404 3.53407 5.244 2.36404 4.71403 2.36398 5.50393 5.50394 2.36397 5.24402 4.98404 4.45404 5.50394 2.36398 5.63399 6.81396 0 ]xsh140.077 530.742 mo(;)sh143.227 530.742 mo(+"-)[4.06407 5.244 0 ]xsh160.396 530.742 mo(>:!UV)[4.84999 6.02995 4.84999 5.11 0 ]xsh27.4665 542.746 mo(YH)[5.37504 0 ]xsh39.0065 542.746 mo(^"#+.$"'\("$=2$\)#4%"')[8.91396 5.24401 4.98404 4.06406 5.50394 3.67399 5.24401 2.36398 5.50394 5.24401 3.674 3.14393 5.50392 3.67399 8.39397 4.98404 5.50394 4.45403 5.24402 0 ]xsh136.666 542.746 mo(2='"#%&)[5.50594 3.14592 2.35597 5.24602 4.97604 4.45604 0 ]xsh39.0065 555.709 mo(\)"*&23)[8.38996 5.24001 3.54007 5.50994 5.50993 0 ]xsh342.878 242.702 mo
403.819 197.392 li
464.761 242.702 li
403.819 288.012 li
cp
0 0 0 0 cmyk
f
342.878 242.685 mo
403.837 197.392 li
464.796 242.685 li
403.837 287.977 li
cp
.749721 .679194 .670497 .901457 cmyk
9525 lw
1 lj
10 ml
gsave
[8.26e-05 0 0 8.25e-05 342.878 242.685 ]ct
@
grestore newpath
%ADOBeginSubsetFont: MAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELP+Calibri gcheck setglobal} if
1 15486 48 <00020085fff60357055e00340048007cb0852b58b900000212b51a1a0f29
2905b801d0b20f0f35b80265400f3f24241f0914b305053009443a4d1fb8
0101b13046003fed3fddce11392fed1112392f012fed332fed332f11332f
ed31301b401224241f090514b36c0505300944403a4d301fb80101b26c30
4600183f2b3f1addce11392f2b1112392f30315901140e02070714062322
2e023503263e023333323e0235342e0223220e0223222e0235343e043332
1e0201140e0223222e0235343e0233321e020357325a7e4d072327151e12
08060109121c1216415c391a204061423a5740290a070b08040614395161
346b9a6430fec40918291e20281909091928201e29180903df5888603605
f10f0f03070c080115171d130729445c32395f4526191e1806111d161819
131f1a123d688cfc3b212b1b0b0b1b2b21212d190b0b192d>IFKELP+Calibri AddT42Char 
IFKELP+Calibri /CharStrings get begin
/g48 48 def
end
IFKELP+Calibri /Encoding get
dup 96 /g48 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELP+Calibri*1 [33{/.notdef}rp /g18 /g28 /g24 /g39 /g26 /g31 /g1 /g37 /g34 /g41 /g40 /g52 /g38 /g42 /g32 /g49 /g21 /g36 /g27 /g35 /g33 /g46 /g17 /g30 /g13 /g2 /g53 /g10 /g29 /g7 /g25 /g54 /g69 /g67 /g58 /g57 /g56 /g68 /g62 /g55 /g43 /g47 /g4 /g45 /g6 /g5 /g11 /g20 /g66 /g44 /g65 /g51 /g19 /g16 /g3 /g22 /g59 /g60 /g61 /g50 /g14 /g12 /g23 /g48 159{/.notdef}rp]IFKELP+Calibri nfIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf381.01 233.84 mo($79:)[3.67099 5.64099 6.82095 0 ]xsh403.16 233.84 mo(;)sh406.31 233.84 mo(I/$.+')[4.71896 2.35904 3.66898 5.50894 4.06906 0 ]xsh384.49 245.844 mo(%&/\)"$#+')[4.45703 5.50696 2.35703 8.38696 5.24701 3.66699 4.97705 4.06705 0 ]xsh383.83 258.807 mo(\($"+"4*'`)[5.50595 3.66599 5.246 4.06607 5.246 5.50595 3.53607 2.35596 0 ]xsh704.988 273.362 mo
821.323 273.362 li
821.323 577.958 li
704.988 577.958 li
cp
0 0 0 0 cmyk
f
704.988 273.362 mo
821.356 273.362 li
821.356 577.843 li
704.988 577.843 li
cp
.749721 .679194 .670497 .901457 cmyk
12700 lw
0 lj
8 ml
gsave
[8.26e-05 0 0 8.25e-05 704.988 273.362 ]ct
@
grestore newpath
%ADOBeginSubsetFont: SAAAAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.348 1.262 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /SAAAAA+Calibri-Bold
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000006886670
676d000000000000074400000913676c7966000000000000280c0000084a
686561640000000000001058000000366868656100000000000010900000
0024686d747800000000000010b40000001c6c6f636100000000000010d0
000000106d61787000000000000010e0000000206e616d65000000000000
110000000028707265700000000000001128000016e16764697200000000
00000000000000000000079e0000fe930000000000000000000000810081
009c00ab00b500ba00c100ca00d300f3010a0060008500bf00e300ea00f2
00fb010001070115011c0129000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe83056d
000d03c0000600170000fffaffe9fea9ffe90000050e000600170000fffa
ffe9fe93050e00170426000600170000fffaffe9ff12ffed050e00170426
000600170000fffaffe9fe93feb8fece060b0010050e0006001002cbfffa
fff001edfffa023f00060010ff36fffafff00287000600100000fffafff0
079efeaffe9f00000000000000000000000000700072007500780079007a
007b007d007e007f008300860087008800890085007f0086008b008c008d
008e008f0090009100920093009400950096009700980099009a009b009c
009d009e009f009200930094009b009c009e009e00960099009a009d009e
00a200a600a900ac00a200a300a400a500a700a800a900aa00ab00ac00ae
00a300a500a700a800aa00ab00ac00ad00ae00a000a100a300a600a700a9
00aa00ac00ad00af00af00b000b100b200b300b400b500af00af00b000b2
00b300b400b500b800c000b600b700b800b900ba00bb00bc00bd00be00bf
00c000c100c200b900ba00bc00bd00bf00c000c100c200b600b700b800b9
00ba00bb00bc00bd00be00bf00c000c100c200c000c100c200c300c400c5
00c600c700c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c7
00c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c500c800c900ca00cb00ce00cf00d000d1
00d200d300d400d500d600d700d900db00de00df00e000e200e300ec00d0
00d100d200d300d400d500d600d700d800d900da00db00dd00de00df00e0
00e100e300e500e900ec00ed00d100d300d400d500d800d900da00dc00e0
00e100e800d000d100d400d600e000e4010800f5010200fb00ff0108008f
009000960092009300990090009100970098009a009d00a400a600a700a8
00a900af009a00a200a300a700a900aa00ab00ac00ad00b000ad009b00aa
00ab00ad00b0009a00aa00ac00ad00ae00af00b100b900bb00bc00bd00be
00c100c200c300c400c500c600c700c800c900ca00cb00ce00b300b400b5
00b600b700b800bc00c200c500c800ca00cb00cd00ce00cf00d000c700b7
00b800b900bb00bc00be00c600c700c800c900cb00cf00d000b200b600b7
00c200c400c500c600c700cb00cc00cd00ce00cf00d000d100d400d500d7
00d800d900da00db00dc00de00df00e000e200e300e500e600d100d300d6
00d700d800da00db00dc00dd00de00df00e000e100e200e300e400e500d1
00d200d400d500da00db00dd00de00df00e000e100e200e600d200d300d4
00d700d800dd00de00e000e100e200e300e400e500e600d200da00e100e9
00ea00ec00e800e900ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e7
00e900ea00ec00ed00ee00ef00f500ee00ef00f000f100f200f300f400f5
00f600ee00f000f200ef00f000f100f200f300f400f500f600ee00ef00f0
00f100f200f300f400f500f600f700f700f800f900fa00fb00fc00fd00f7
00f800f900fa00fb00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff
010001010102010300fe010001010102010300fe00ff0100010101020103
01020103010401050106010701080109010a010c010d010e010f01100107
010401050106010701080109010a010b010d010e010f0110011101040105
0106010701080109010a010b010c010d010e010f01100111010401050106
01070109010e010f011201130114011501170118011a011b011c011d011e
011f01210122011201130114011501170119011b011c011d011e01200121
0123012401250113011401150116011701180119011a011b011c011d011f
01200117011c011d011e012001210129013001770129012b012e012f0130
01310134013501370139012b012d013001320134013a012e01300134013a
014200500062006c00fa05e802cc0114011400a000b10000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000005aa001500a0fff8ff42fea2
fdbc03b6015401cc0108010e00ff00f5006e014000a0055e006b0570fff6
0122fff10547ffec04faffec0131fff4000a03a0036600b400e1044c007c
40465f5e5d5c5b5a59585554535251504f4e4d4c4b4a4948474645444342
41403f3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d
0b0a090807060504030201002c4523466020b02660b004262348482d2c45
2346236120b02661b004262348482d2c45234660b0206120b04660b00426
2348482d2c4523462361b0206020b02661b02061b004262348482d2c4523
4660b0406120b06660b004262348482d2c4523462361b0406020b02661b0
4061b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a
51582320b08d44235920b0ed51582320b04d44235920b0042651582320b0
0d44235921212d2c20204518684420b001602045b04676688a4560442d2c
01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e
01b0282370b10228453ab10200080d2d2c2045b00325456164b050515845
441b2121592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b0
4061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c
8a03458a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23
442d2c4b525845441b2121592d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2d2c00b00743b0
06430b2d2c21210c6423648bb84000622d2c21b08051580c6423648bb820
00621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb2
00802f2b59b002602d2c0c6423648bb84000626023212d2c452345602345
6023456023766818b08062202d2cb00426b00426b00425b0042545234520
b003266062636820b0032661658a2344442d2c2045b0005458b040442045
b04061441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b0
2f2370b01423421b2121592d2c4b515820b0032545695358441b2121591b
2121592d2c45b01443b0006063b0016069442d2cb02f45442d2c45232045
8a60442d2c45234560442d2c4b235158b90033ffe0b134201bb333003400
5944442d2cb0164358b00326458a586466b01f601b64b020606620581b21
b04059b001615923586559b02923442310b029e01b2121212121592d2cb0
164358b004254564b020606620581b21b04059b0016123586559b0292344
b00425b00725082058021b0359b0052510b004252046b0042523423cb007
2510b006252046b00425b0016023423c2058011b0059b0052510b00425b0
29e0b0072510b00625b029e0b00425b00725082058021b0359b00425b003
254348b00625b00325b0016043481b2159212121212121212d2cb0164358
b004254564b020606620581b21b04059b0016123581b6559b0292344b005
25b00825082058021b0359b0042510b005252046b0042523423cb00425b0
072508b0072510b006252046b00425b0016023423c2058011b0059b00425
10b00525b029e0b02920456544b0072510b00625b029e0b00525b0082508
2058021b0359b00525b003254348b00425b0072508b00625b00325b00160
43481b2159212121212121212d2c02b00425202046b004252342b0052508
b003254548212121212d2c02b0032520b0042508b0022543482121212d2c
452320451820b00050205823652359236820b040505821b0405923586559
8a60442d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60
441b2121592d2c4b53234b515a58381b2121592d2cb000214b5458381b21
21592d2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21
2121592d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b
212121592d2c208a08234b538a4b515a5823381b2121592d2c0020b20040
0325b0062649618b3812342d2c014623466023466123201020468a61b8ff
80628ab140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b
52587d1b7a592d2cb012004b014b54422d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b94000020063b80400885458b202400243604259595959592d
2c451868234b51582320452064b04050587c59688a6059442d2cb00016b0
0225b0022501b001233e00b002233eb10102060cb00a236542b00b234201
b001233f00b002233fb10102060cb006236542b0072342b00116012d2c20
b82000628a6023622d2cb0072558001b0159b0042510b00325b0022520b8
ffff545821cd1bed5921b006255cb006255a58b0092b5920b005254ab004
2547b004254760b0062547b0806361b00225b0005558b00325b007254963
59b0082558001b0159b00425b0062549b009255cb009255a58b0092b59b0
072546b0806361b0032520b0005558631b2159612320b0005558b080631b
21b08059b0592bb006255c586959b00425202010b00048233ab006265800
1b0159b0052658b003252f598a12233221212d2cb00625b00a2587b00625
b009254ab0005358b00625b00a251bb00925b0072559b00225b00225070c
b005256323b00625636020b94000040063535821b00426b00426b00a1bb9
4000040063655158b0042665b0042665b00a1bb00426b00426b000b00325
b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b00525075959
20b0005558b00525b0052587b00725b007250bb0092510b00b25b0092620
b8ffff545821cd1bed59b00525b0052507b00825b00b254923b00625b006
2587b00a2510b00b25c15920b00051b800522378b00161b00225b00725b0
072507b00a25b00d254961b08062b00525b005250bb00a252338b00625b0
062587b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c
2549b0032554b8ffa723792121212121212121212121212d2c23b0005458
b9400000001bb900004000598ab0005458b9400000001bb90000400059b0
5b2b2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a08
0d8ab0005458b9400000001bb90000400059b05b2b2d2cb00426b0042608
0db00426b00426080db05b2b2d00000100000006333390900fbf5f0f3cf5
0019080000000000bbeb7ccc00000000d5968a63fbdafd350a1a08500001
0009000200000000000000010000079efdda00000aa0fbdafa860a1a0001
00000000000000000000000000000007040e00000362008d044b004b0407
004a03cb001b044b007e023500a00000009e00ec01870252035703dd0425
000100000007044200170110000800020010002f006000000cf8013f0004
0001000000010012000100000000000600130000454e445048432b43616c
696272692d426f6c64000000b20903eb411d03430001003b03410001008b
0330009b033000020004032f0064032f0074032f00d4032f0004032d032a
0038001f032c032a0038001f032b032ab2381f24bf032a00a4032a00b403
2a0003ffc0032ab2232746b9ffc0032ab21c20464163033c0038033b0055
033a00380339005503380038033700550336003803350055033400380333
005503230038032200550321003803200055002b03400001006b03400001
033d003803220055006b033b000100240331005403310002002403310034
03310054033100f403310004001403270044032700e40327000300040327
002403270044032700740327008403270094032700d4032700f403270008
00a403220001003403200001001403200024032000440320005403200074
032000840320000602f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802
f6b21e2c1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b2
1e2c1fb802f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b
1fb802edb21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb8
02e9b21e2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5
b21e2c1fb802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d
121fb802e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1f
b802dcb21d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802
d8b21d2f1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b2
1d2f1fb802d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f
1fb802cfb21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d121fb8
02cbb21d121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7
b21d2f1fb802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d
2f1fb802c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121f
b802beb21d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802
bab21d2f1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b2
1d2f1fb802b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f
1fb802b1b21c321fb802b0b21c321fb802afb21c331fb802aeb21c331fb8
02adb21c331fb802acb21c331fb802abb21c331fb802aab21c311fb802a9
b21c311fb802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5b21c
321fb802a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c331f
b802a0b21c331fb8029fb21c331fb8029eb21c331fb8029db21c331fb802
9cb21c311fb8029bb21c311fb8029ab21c321fb80299b21c321fb80298b2
1c321fb80297b21c321fb80296b21c321fb80295b21c331fb80294b21c33
1fb80293b21c331fb80292b21c331fb80291b21c331fb80290b21c331fb8
028fb21c331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8028b
b21c321fb8028ab21c321fb80289b21c321fb80288b21c331fb80287b21c
331fb80286b21c331fb80285b21c331fb80284b21c331fb80283b21c331f
b80282b21b341fb80281b21b341fb80280b21b341fb8027fb21b341fb802
7eb21b341fb8027db21b341fb8027cb21b341fb8027bb21b341fb8027ab2
1b341fb80279b21b341fb80278b21b341fb80277b21b341fb80276b21b34
1fb80275b21b341fb80274b21b341fb80273b21b341fb80272b21b341fb8
0271b21b341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8026d
b21a351fb8026cb21a351fb8026bb21a351fb8026ab21a351fb80269b21a
351fb80268b21a351fb80267b21a351fb80266b21a351fb80265b21a351f
b80264b21a351fb80263b21a351fb80262b21a351fb80261b21a351fb802
60b21a351fb8025fb21a351fb8025eb21a351fb8025db21a351fb8025cb2
1a351fb8025bb21a351fb8025ab21a351fb80259b219371fb80258b21937
1fb80257b219371fb80256b219371fb80255b219371fb80254b219371fb8
0253b219371fb80252b219371fb80251b219371fb80250b219371fb8024f
b219371fb8024eb219371fb8024db219371fb8024cb219371fb8024bb219
371fb8024ab219371fb80249b219371fb80248b219371fb80247b219371f
b80246b219371fb80245b219371fb80244b219371fb80243b219371fb802
42b219371fb80241b219371fb80240b219371fb8023fb219371fb8023eb2
19371fb8023db219371fb8023cb219371fb8023bb219371fb8023ab21937
1fb80239b218391fb80238b218391fb80237b218391fb80236b218391fb8
0235b218391fb80234b218391fb80233b218391fb80232b218391fb80231
b218391fb80230b218391fb80301b2182e1fb8022fb218391fb8022eb218
391fb8022db218391fb8022cb218391fb8022bb218391fb8022ab218391f
b80229b218391fb80228b218391fb80227b218391fb80226b218391fb802
25b2173b1fb80224b2173b1fb80223b217321fb80222b2173a1fb80221b2
173b1fb80220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2173b
1fb8021cb2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b1fb8
0218b2173b1fb80217b2173b1fb80216b2173b1fb80215b217321fb80214
b2173a1fb80213b2173b1fb80212b2173b1fb80211b2173b1fb80210b217
3b1fb8020fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb2173b1f
b8020bb2173b1fb8020ab2173b1fb80209b217321fb80208b217321fb802
07b2173b1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb80203b2
173b1fb80202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2173b
1fb801feb2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b1fb8
01fab2173b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb801f6
b2173a1fb801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2b217
3b1fb801f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb2173b1f
b801edb2173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1fb801
e9b2173b1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801e5b2
16231fb801e4b216371fb801e3b216371fb801e2b216381fb801e1b21638
1fb801e0b216431fb801dfb216441fb801deb216441fb801ddb216441fb8
01dcb216451fb801dbb216461fb801dab216461fb801d9b216461fb801d8
b216231fb801d7b216231fb801d6b216381fb801d5b216431fb801d4b216
431fb801d3b216431fb801d2b216441fb801d1b216461fb801d0b216461f
b801cfb216461fb801ceb216461fb801cdb216461fb801ccb216461fb801
cbb216431fb801cab216231fb801c9b216231fb801c8b216371fb801c7b2
16371fb801c6b216381fb801c5b216421fb801c4b216431fb801c3b21644
1fb801c2b216451fb801c1b216461fb801c0b216461fb801bfb216461fb8
01beb216461fb801bdb216461fb801bcb216461fb801bbb216461fb801ba
b216371fb801b9b216381fb801b8b216421fb801b7b216431fb801b6b216
431fb801b5b216431fb801b4b216441fb801b3b216441fb801b2b216441f
b801b1b216451fb801b0b216451fb801afb216451fb801aeb216461fb801
adb216461fb801acb216461fb801abb216461fb801aab216461fb801a9b2
15341fb801a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2154e
1fb801a4b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d1fb8
01a0b2154e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8019c
b215401fb8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198b215
4f1fb80197b2154f1fb80196b215501fb80195b215521fb80194b215521f
b80193b215521fb80192b215411fb80191b2154f1fb80190b215501fb801
8fb215501fb8018eb215511fb8018db215521fb8018cb215521fb8018bb2
15521fb8018ab214581fb80189b214591fb80188b2145c1fb80187b2145d
1fb80186b2144a1fb80185b2145b1fb80184b2145c1fb80183b214591fb8
0182b2145d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c4e1f
c10c4e1fc00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561fae0b
561fad0b561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b561f
a60b561fa50b561fa40b561fa30b561fa20b561fa10b561fa00b561f9f0b
561f9e0a681f9a0a681f990a681f980a681f970a681f960a681f950a681f
940a681f930a681f920a681f910a681f9009681f8f09681f8e09681f8d09
681f8c09681f410902fc02fa0056001f02fb02fa0068001f017fb213321f
b8017eb212371fb80174b212371fb80173b211421fb80172b211421fb801
71b211421fb80170b211421fb8016fb211421fb8016eb211421fb8016db2
11421fb8016cb211421fb8016bb211421fb8016ab211421fb8013cb21142
1fb8013bb210421fb8013ab210421fb80139b210421fb80138b210421fb8
0137b210421fb80136b210421fb80135b210421fb80134b210421fb80133
b210421fb80132b20f451fb80131b20f451fb80130b20f451fb80112b20f
451fb80111b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451f
b8010db20e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb801
09b20e481fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a
1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd
0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b56
1fbd0b561fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213
321fb8017ab211401fb80179b211421fb80178b211421fb80177b211421f
b80176b211421fb80175b211421fb80143b211421fb80142b210421fb801
41b210421fb80140b210421fb8013fb210421fb8013eb210421fb8013db2
0f451fb80115b20f451fb80114b20f451fb80113b20f451fb903030302b2
401fa4be030200b4030200c4030200030300b213321fb8017bb213321fb8
0153b212371fb80152b211401fb80151b211401fb80150b211401fb8014f
b211401fb8014eb211401fb8014db211401fb8014cb211401fb8014bb211
401fb8014ab211401fb80149b211401fb80148b211401fb80147b211401f
b80146b211401fb80145b211401fb80144b211401fb80122b211401fb801
21b210421fb80120b210421fb8011fb210421fb8011eb210421fb8011db2
10421fb8011cb210421fb8011bb210421fb8011ab210421fb80119b21042
1fb80118b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f45
1ffb0f451ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff4
0e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a
1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc9
0c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e
1fb70b561fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fdb212
371fb8017db212371fb8017cb212371fb80169b2112e1fb80168b2112e1f
b80167b211401fb80166b211401fb80165b211401fb80164b211401fb801
63b211401fb80162b211401fb80161b211401fb80160b211401fb8015fb2
11401fb8015eb211401fb8015db211401fb8015cb211401fb8015bb21140
1fb8015ab211401fb80159b211401fb80158b211401fb80157b211401fb8
0156b211401fb80155b211401fb80154b211401fb8012fb211401fb8012e
b210421fb8012db210421fb8012cb210421fb8012bb210421fb8012ab210
421fb80129b210421fb80128b210421fb80127b210421fb80126b210421f
b80125b20f451fb80124b20f451fb80123b20f451fb80105b20f451fb801
04b20f451fb80103b20f451fb80102b20f451fb80101b20e481fb8010040
a20e481fff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c
4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f
84032e1f83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d
030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a7948
775578ab77550b77010c764875555475e475f47503147554756475747594
75d475e47507a475b475c47503b8ffc0401275383b468075907502147574
75020075010fb8ffc04021750b0e467448725573ab725504723472023bf4
7201e07201023072015072607202b8ffc0b372242846b8ffc0403572161a
461072307240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f6f8f
6f02af6fbf6f02406f090d466e486d55df6d0100bc02ff001002ff00c002
ffb2030a6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e675568
ab6755662e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a
555bab5a55592e58555703251f562e545555ab5455532e515552ab51554f
2e4e554e03251f4d2e4b554cab4b554a2e485549ab4855504801472e4655
4503361f001f01001e01001e701e801ef01e040b601d701d02701de01df0
1d03701cf01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f
198f199f19af19050f198f199f19030c7012801202701180110230114011
d011e011040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01
af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d1f
0d40472f0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f
0c5f0c039f0c01400c262946ef0aff0a02400a242746ef09ff0902ff0901
0003012001010001100120010308b8ffc0b401151f4603bd010001000005
0001019000542b4bb807ff524bb008505bb00188b02553b00188b040515a
b00688b000555a5b58b101018e59b101024354b0144b515a58b101018e59
858d8d001d424bb01d5358b203a0a01d42594bb0805358b20340401d4259
4bb0ff5358b20300001d42592b5e73757373742b732b73742b2b73745e73
2b5e7374757374755e73747573015e7374737475757473745e737473002b
2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73745e73
732b2b7374752b2b732b2b73755f75755e732b2b2b5e7373732b7374752b
5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b0073747373747374732b73742b
2b2b2b2b2b2b2b2b732b2b2b73737373185f5e00000000>
[2123 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 316 1 <0001008d000003540514001a0049b10102435558b900150294400b00090f
5215180b0f014c15b8015db240065400183f1aed2b3f012fcded30311b40
090f5215180b0f014c15b8015db240065400183f1aed2b3f30315925140e
02232122263511343e0233321e02151121321e020354050a0f0afdaf212d
0d1e332627321e0d01970a0f0a056e1e291b0c272c04970a100a06060a10
0afbef0b1929>SAAAAA+Calibri-Bold AddT42Char 
1 782 3 <0002004affe903b603d7002b00340103b10102435558b31313212cb80243
b22b3404b80272400a21032c132c021b2cc304b8ffc040170d014d000410
04024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ffe84020
0d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d09f940
1c4d00183f1afd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed5e5d01
2fed32dded12392f30311b4009032c132c021b2cc304b8ffc040170d014d
00041004024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ff
e840200d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d
09f9401c4d00183f1afd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed
5e5d3031590114062321141e0233323e0233321e0215140e0623222e0235
343e0233321e021527362623220e020703b62924fde11b3b5d4142644930
0f090c08030204080d3a5a744277b3783b3e76a96a709f6630f4035b5f30
472f190201fa2e2c395d412213171307122119161f160f0e1817113c7aba
7d77bf85464275a05e206a79243d532f>SAAAAA+Calibri-Bold AddT42Char 
1 1188 4 <0003001bfe9303a203d3003e004e005f0100b10102435558404f0f300703
38234a334ac34a031f4a014ae1c90c01180c010cc953011e530118530153
f1cd150117150100151015020f1515603803f93c482a202c42bc42020042
0142cd384a0f5b0110035bcc40204f00183f1aed5f5e5d3fed5d5d12393f
ed1112392f5e5d5d5ded5d5d5dd65d5ded5d5d12173930311b40550f3007
0338234a334ac34a030b4a011f4a014ae1c90c01180c010cc953011e5301
18530153f1cd150117150100151015021515603803f93c482a203c42cc42
020442010f00420142cd384a0f5b0110035bcc40204f00183f1aed5f5e5d
3fed5d5e5d5d12393fed1112392f5d5d5ded5d5d5dd65d5ded5d5d5d1217
393031590114062323161615140e0223222627060615141617171e031514
0e0223222e0235343e0237262635343637262635343e0233321617213216
01342623220e0215141633323e0213342627270e0315141633323e0203a2
1610691613346189542b4e150c13332ed94c77512b3a74af7572a1672f11
21301f2b2f362b232a376288522a4d21011b1115febd5049253825125047
263825133b483fb31a1f1306655c394e30140360302e183d214e79532b15
0e0d24161d2502080325435e3c4275563224405935213c373217174f2f3b
61272362494e7b552d0a092cfef94850192b391f444f182a37fd562d3002
051323201e10323417262f00>SAAAAA+Calibri-Bold AddT42Char 
1 1710 5 <0001007efffa03d203d70032007fb10102435558b12a13bb0260001e000b
025fb2001e10b8fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d
4a2a192449194c054c00183f3f3f12393f1aed2b2b012fd4ed10ed393031
1bb90010fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d4a2a19
2449194c054c00183f3f3f12393f1aed2b2b30315925140e0223222e0235
11342e022322060711140e0223222e023511343e0233321e021515363633
321e021503d20c1c312425311c0c132439263062350c1d302525301d0c0a
1a291f202a170a4a99535b7d4d22220a0f0a05050a0f0a01fd414a351d46
43fdaf0a0f0a05050a0f0a037c0a0f0a05050a0f0a6750503c678a61>SAAAAA+Calibri-Bold AddT42Char 
1 472 2 <0002004bffe903cc056d002600390093b10102435558b20b1b39bb025e00
00002f0272400a1321460b39271b040e2ab8ffe8b40b0f014c2ab8014940
09184a34180b0f014c34b80149b4400e4d054c00183f3f1aed2b3fed2b12
17393f012fedd4ed323930311b400921460b39271b040e2ab8ffe8b40b0f
014c2ab801494009184a34180b0f014c34b80149b4400e4d054c00183f3f
1aed2b3fed2b1217393f30315925140e0223222e023535060623222e0235
343e023332161711343e0233321e021503262623220e0215141e0233323e
023703cc0a18291e2028190b45975c668d59283362925f4b7a3c0b1d3025
25301c0cfa36633631472b15122944341a31333620220b0f0a04040a0f0b
634a524f86b36377be86483d3b01e30a100b06060b100afd344448315265
35386a53320f22372800>SAAAAA+Calibri-Bold AddT42Char 
1 1978 6 <000200a0fff301ba03af00130027001bb10014b802b8b70a1e23194c050f
48003fcd3fcd012f33ed32303101140e0223222e0235343e0233321e0211
140e0223222e0235343e0233321e0201ba0e2136292936210c0c21362929
36210e0e2136292936210c0c2136292936210e03162a38240f0f24382a2b
3a241010243afd482a39240f0f24392a2a3b240f0f243b00>SAAAAA+Calibri-Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3031011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>SAAAAA+Calibri-Bold AddT42Char 
SAAAAA+Calibri-Bold /CharStrings get begin
/g1 1 def
/g3 3 def
/g4 4 def
/g5 5 def
/g2 2 def
/g6 6 def
end
SAAAAA+Calibri-Bold /Encoding get
dup 33 /g1 put
dup 34 /g3 put
dup 35 /g4 put
dup 36 /g5 put
dup 37 /g2 put
dup 38 /g6 put
pop
end
%ADOEndSubsetFont
/IFKELS+Calibri-Bold /SAAAAA+Calibri-Bold findfont ct_VMDictPut/IFKELS+Calibri-Bold*1 [33{/.notdef}rp /g1 /g3 /g4 /g5 /g2 /g6 217{/.notdef}rp]IFKELS+Calibri-Bold nfIFKELS+Calibri-Bold*1 [10 0 0 -9.9946 0 0 ]msf712.539 287.12 mo(!"#"$%&)[4.45703 5.24707 4.97699 5.24707 5.63702 5.63702 0 ]xsh736.732 314.336 mo
777.099 314.336 li
777.099 317.481 li
736.732 317.481 li
cp
775.526 311.192 mo
791.256 315.908 li
775.526 320.625 li
cp
f
%ADOBeginSubsetFont: MAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELP+Calibri gcheck setglobal} if
1 4356 15 <000200acfffa03c7050e001c0029009fb0852b58b12406b8ffe8b310014d
06b8fff0b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b
014d06b802114017111d1810014d1d100f014d1d100c0d014c1d200b014d
1db80232b2001125b8010ab306060c23b8010bb315510c55003f3fed1239
2fed012fd4e12b2b2b2b10e12b2b2b2b2b3231301bb10625b8010ab56c06
060c1523b8010bb46c15510c5500183f3f2b12392f2b30315901140e0223
2311140e0223222e02351134363321321e0407342e0223231133323e0203
c74077ad789309132119192114082a1a01152a4d696d4c29b53b575d2c9f
9b4e6746240393619c6e3cfe2e080c070505070c0804aa282207173f5c79
574f6a340efdf9284763>IFKELP+Calibri AddT42Char 
IFKELP+Calibri /CharStrings get begin
/g15 15 def
end
IFKELP+Calibri /Encoding get
dup 97 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELP+Calibri*1 [33{/.notdef}rp /g18 /g28 /g24 /g39 /g26 /g31 /g1 /g37 /g34 /g41 /g40 /g52 /g38 /g42 /g32 /g49 /g21 /g36 /g27 /g35 /g33 /g46 /g17 /g30 /g13 /g2 /g53 /g10 /g29 /g7 /g25 /g54 /g69 /g67 /g58 /g57 /g56 /g68 /g62 /g55 /g43 /g47 /g4 /g45 /g6 /g5 /g11 /g20 /g66 /g44 /g65 /g51 /g19 /g16 /g3 /g22 /g59 /g60 /g61 /g50 /g14 /g12 /g23 /g48 /g15 158{/.notdef}rp]IFKELP+Calibri nfIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf737.446 334.64 mo(a)sh742.816 334.64 mo("$'79:)[5.24402 3.67401 2.36395 5.63397 6.81396 0 ]xsh772.576 334.64 mo(;)sh775.726 334.64 mo(+"-)[4.06409 5.24396 0 ]xsh726.636 346.644 mo(+#\)\(5"'2\("$#*/24)[4.06409 4.98401 8.39398 5.50391 2.36407 5.24402 2.36395 5.50391 5.50397 5.24402 3.67395 4.98407 3.53406 2.36407 5.50391 0 ]xsh736.732 356.35 mo
777.099 356.35 li
777.099 359.495 li
736.732 359.495 li
cp
775.526 353.206 mo
791.256 357.922 li
775.526 362.639 li
cp
.164492 1 1 .0814832 cmyk
f
.749721 .679194 .670497 .901457 cmyk
IFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf713.459 305.84 mo(<43/I/3.#5'=/5"')[2.62201 5.50189 5.50195 2.36206 4.72192 2.36206 5.50195 5.50195 4.98199 2.36206 2.362 3.14191 2.36206 2.362 5.242 0 ]xsh772.711 305.84 mo(2\("$#*/24)[5.50592 5.50592 5.24603 3.66602 4.97601 3.53607 2.35602 5.50598 0 ]xsh713.835 475.052 mo
736.131 452.363 li
758.426 475.052 li
736.131 497.741 li
cp
0 0 0 0 cmyk
f
713.835 475.043 mo
736.137 452.363 li
758.439 475.043 li
736.137 497.724 li
cp
.749721 .679194 .670497 .901457 cmyk
9525 lw
1 lj
10 ml
gsave
[8.26e-05 0 0 8.25e-05 713.835 475.043 ]ct
@
grestore newpath
IFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf766.411 471.92 mo(N"%/+/24)[6.42303 5.24304 4.453 2.3631 4.06305 2.36304 5.50293 0 ]xsh766.411 483.923 mo(423")[5.50592 5.50592 5.50598 0 ]xsh714.54 506.032 mo
758.142 506.032 li
758.142 530.1 li
714.54 530.1 li
cp
.111269 .0303044 .00289921 0 cmyk
f
714.54 506.032 mo
758.154 506.032 li
758.154 530.091 li
714.54 530.091 li
cp
.749721 .679194 .670497 .901457 cmyk
12700 lw
0 lj
8 ml
gsave
[8.26e-05 0 0 8.25e-05 714.54 506.032 ]ct
@
grestore newpath
IFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf766.411 521.36 mo(a$2%"++)[5.375 3.67499 5.50494 4.45502 5.245 4.06506 0 ]xsh714.54 541.867 mo
758.142 541.867 li
758.142 565.935 li
714.54 565.935 li
cp
0 0 0 0 cmyk
f
714.54 541.867 mo
758.154 541.867 li
758.154 565.926 li
714.54 565.926 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 714.54 541.867 ]ct
@
grestore newpath
IFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf766.411 551.12 mo(a$2%"++)[5.375 3.67499 5.50494 4.45502 5.245 4.06506 0 ]xsh766.411 563.123 mo(42*"+)[5.50592 5.50592 3.53607 5.24603 0 ]xsh733.151 376.165 mo(a)sh738.521 376.165 mo("$'%2\)\(#$"3)[5.24402 3.67401 2.36395 4.45404 5.50391 8.39398 5.50391 4.98407 3.67401 5.24402 0 ]xsh724.172 388.168 mo(\)"*&23'2\("$#*/24)[8.38995 5.23999 3.5401 5.50995 5.50989 5.50995 2.35999 5.50995 5.50995 5.23999 3.66998 4.98004 3.5401 2.36005 5.50989 0 ]xsh735.846 398.276 mo
776.213 398.276 li
776.213 401.421 li
735.846 401.421 li
cp
774.64 395.132 mo
790.37 399.848 li
774.64 404.565 li
cp
.164492 1 1 .0814832 cmyk
f
735.846 411.083 mo
776.213 411.083 li
776.213 414.228 li
735.846 414.228 li
cp
774.64 407.939 mo
790.37 412.655 li
774.64 417.372 li
cp
f
735.846 423.889 mo
776.213 423.889 li
776.213 427.034 li
735.846 427.033 li
cp
774.64 420.745 mo
790.37 425.461 li
774.64 430.178 li
cp
f
735.846 436.696 mo
776.213 436.696 li
776.213 439.841 li
735.846 439.841 li
cp
774.64 433.552 mo
790.37 438.268 li
774.64 442.985 li
cp
f
477.164 291.888 mo
648.774 291.888 li
648.774 336.129 li
477.164 336.129 li
cp
.111269 .0303044 .00289921 0 cmyk
f
477.164 291.888 mo
648.824 291.888 li
648.824 336.112 li
477.164 336.112 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 477.164 291.888 ]ct
@
grestore newpath
%ADOBeginSubsetFont: UAAAAA+Calibri-Italic Initial
ct_T42Dict begin
-0.723 -0.273 1.258 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /UAAAAA+Calibri-Italic
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000005146670
676d00000000000005d000000d24676c796600000000000024f800000748
6865616400000000000012f40000003668686561000000000000132c0000
0024686d747800000000000013500000001c6c6f6361000000000000136c
000000106d617870000000000000137c000000206e616d65000000000000
139c000000287072657000000000000013c4000011316764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea7000000000000000000000000004a004c0054005500560057
0059004f004e004f00500051004d005d005f006100630064006500660067
00680069006a006b006c006d006e006d0066006f00700071007200730074
007500760071007400700071007200740075007600780079007a007d0078
0079007a007b007c007d0079007c007a007c007d007e007f00800081007e
007f008000810082007f008000810082007e007f00800081008200830085
008300840085008600870088008900860088008900830084008500860087
008800890083008400850086008700880089008a008b008c008d008e008f
008a008b008c008d008f008a008b008c008d008e008f008a008b008c008d
008e008f0090009500900091009200930094009500980099009a009b009c
00900091009300960097009b009c009f00a2009400960090009100920093
009400950096009700980099009a009b009c009d009e009f00a000a100a2
00a300a600a7009000910092009300940095009600980099009f00bc00bd
00c100c600be00bf00bf00c100c200b900be00c200df00e000e400e700e8
00e9012b0136014700f200f400cf00640066006a006c006d0070006c006d
0069006c0067007300740075007600770078007a007b007c007d007e0081
008400850086008700880089008a0076007a007b007c007e007f00800082
00830084008700880089008a007700850087007900820084008500860087
0088008a0079007a007c007d007e0081008300840086008700880089008b
008c008d008e008f00900091009200940095008b008c008d008e008f0093
009400950093008b008c008d008e00900091009200930094008c008d008e
008f009000910092009300940095009700980099009a009b009c00960097
00980099009a009b009c009a009c009600980099009a009b009c00960097
009b009c009d009e009f00a000a100a2009d009e009f00a000a100a200a1
009d009e009f00a000a100a2009d009e009f00a000a100a200a300a500a3
00a400a500a600a700a300a500a300a400a500a600a700a300a400a500a6
00a700a800a900a800a900aa00ab00ac00a800ab00ac00a800a900aa00ab
00ac00a800a900aa00ab00ac00ad00ae00af00b000b100b300b500b600b7
00b800af00b000b100b300b400b700ad00ae00af00b000b100b200b300b4
00b500b600b700b800ad00ae00af00b000b100b200b300b400b500b600b7
00ba00bb00bc00bd00bf00c000c100c200c300c400ba00bb00bf00c300b9
00ba00bb00bc00bf00c100c200c300ba00bc00bf00c200c700c900cb00cc
00cd00c500c600c700c600c700cb00ce00cf00d100d200db00dc00de00df
00e000e400d600e800e90123012b00d000d1042600d8050e010503c000c2
024e0078042600d702990092000005e4000e4059868574737271706f6e6d
6c6b6a6968676665625f5e5d5c5b5a59585554535251504f4e4d4c4b4a49
4847464544434241403f3e3d3c3b3a39383736352f2e2d2c282625242322
1f181411100f0d0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
042651582320b00d44235921212d2c20204518684420b001602045b04676
688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0
282370b101283e01b0282370b10228453ab10200080d2d2c2045b0032545
6164b050515845441b2121592d2c2045b0004360442d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c4565b0
2c234445b02b23442d2c4b525845441b2121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21b0805158
0c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c642364
8bb81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d
2c4523456023456023456023766818b08062202d2cb00426b00426b00425
b0042545234520b003266062636820b0032661658a2344442d2c2045b000
5458b040442045b04061441b2121592d2c45b1302f4523456160b0016069
442d2c4b5158b02f2370b01423421b2121592d2c4b515820b00325456953
58441b2121591b2121592d2c45b01443b0006063b0016069442d2cb02f45
442d2c452320458a60442d2c45234560442d2c4b235158b90033ffe0b134
201bb3330034005944442d2cb0164358b00326458a586466b01f601b64b0
20606620581b21b04059b001615923586559b02923442310b029e01b2121
212121592d2cb0164358b004254564b020606620581b21b04059b0016123
586559b0292344b00425b00725082058021b0359b0052510b004252046b0
042523423cb0072510b006252046b00425b0016023423c2058011b0059b0
052510b00425b029e0b0072510b00625b029e0b00425b00725082058021b
0359b00425b003254348b00625b00325b0016043481b2159212121212121
212d2cb0164358b004254564b020606620581b21b04059b0016123581b65
59b0292344b00525b00825082058021b0359b0042510b005252046b00425
23423cb00425b0072508b0072510b006252046b00425b0016023423c2058
011b0059b0042510b00525b029e0b02920456544b0072510b00625b029e0
b00525b00825082058021b0359b00525b003254348b00425b0072508b006
25b00325b0016043481b2159212121212121212d2c02b00425202046b004
252342b0052508b003254548212121212d2c02b0032520b0042508b00225
43482121212d2c452320451820b00050205823652359236820b040505821
b04059235865598a60442d2c4b53234b515a5820458a60441b2121592d2c
4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2cb000
214b5458381b2121592d2cb002435458b0462b1b21212121592d2cb00243
5458b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb002
435458b0492b1b212121592d2c2320b000508a8a64b10003255458b0401b
b10103255458b005438b59b04f2b5923b0622b2321235865592d2cb10800
0c215460432d2c014623466023466123201020468a61b8ff80628ab14040
8a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a59
2d2cb012004b014b54422d2cb1020042b123018851b1400188535a58b910
000020885458b202010243604259b12401885158b920000040885458b202
0202436042b12401885458b2022002436042004b014b5258b20208024360
42591bb940000080885458b202040243604259b94000008063b801008854
58b202080243604259b94000010063b80200885458b202100243604259b1
2601885158b94000020063b80400885458b202400243604259b940000400
63b80800885458b202800243604259b12801885158b94000080063b81000
885458ba00020100000243604259595959595959b10002435458400a0540
084009400c020d021bb10102435458b2054008ba010000090100b30c010d
011bb18002435258b2054008b80180b109401bb901000002435258b20540
08ba0180000901401bb901800002435258b2054008b80200b109401bb205
4008ba010000090100595959b9400000808855b94000020063b804008855
5a58b30c000d011bb30c000d0159595942424242422d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d2cb0022563b0206066b00225b82000626023622d2c234ab102
4e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002256164b00343
525821206459b1024e2b23b000505865592d2c238a4a234564b0022564b0
02256164b00343525821206459b1014e2b23b000505865592d2c20b00325
4ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b00325
8ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003
254660b004252eb00425b00425b0042620b000505821b06a1bb06c592bb0
032546b00325466061b08062208a2010233a232010233a2d2cb0032547b0
03254760b0052547b0806361b00225b00625496323b005254ab080632058
621b2159b0042646608a468a4660b02063612d2cb00426b00425b00425b0
0426b06e2b208a2010233a232010233a2d2c2320b001545821b00225b102
4e2bb0805020605920606020b001515821211b20b005515821206661b040
2361b100032550b00325b00325505a5820b00325618a535821b000591b21
591bb00754582066616523211b2121b000595959b1024e2b2d2cb00225b0
04254ab0005358b0001b8a8a238ab00159b004254620666120b00526b006
2649b00526b00526b0702b236165b02060206661b02061652d2cb0022546
208a20b000505821b1024e2b1b452321596165b00225103b2d2cb0042620
b802006220b80200638a236120b05d602bb00525118a128a20398a58ba00
5d10000004266356602b23212010204620b1024e2b23611b2321208a2010
49b1024e2b593b2d2cba005d10000009256356602bb00525b00525b00526
b06d2bb15d0725602bb00525b00525b00525b00525b06f2bba005d100000
08266356602b20b0005258b0502bb00525b00525b00725b00725b00525b0
712bb0021738b00052b00225b001525a58b00425b0062549b00325b00525
496020b0405258211bb000525820b0025458b00425b00425b00725b00725
49b00217381bb00425b00425b00425b0062549b002173859595959592121
2121212d2cb12801885158b94000040063b8080088545c1bb001592d2cb1
2801885158b94000040063b8080088545c1bb001592d0001000000063333
90a432ec5f0f3cf50019080000000000bbeb7ccc00000000d5968a59fa34
fdcb0a14083600020009000200000000000000010000079efdda00000aa0
fa34fa0b0a140800019a0000000000000000000000000007040e000001cf
000004ec005803d2004d041d003f041b004e0391007c000000bb00bb0140
01f3029f031f03a40001000000070120001600e1000800020010002f0087
00000a3b0195000400010000000100120001000000000006001500005350
425546432b43616c696272692d4974616c696300b10903b8027ab21e3e1f
b80279b21e3e1fb80278b21e0b1fb80277b21e0b1fb80276b21e3a1fb802
75b21e3a1fb80274b21e3e1fb80273b21e3b1fb80272b21e3c1fb80271b2
1e3c1fb80270b21e3c1fb8026fb21e3d1fb8026eb21e3d1fb8026db21e3e
1fb8026cb21e3e1fb8026bb21d411fb8026ab21d411fb80269b21d421fb8
0268b21d431fb80267b21d431fb80266b21d431fb80265b21d431fb80264
b21d431fb80263b21d411fb80262b21d421fb80261b21d421fb80260b21d
431fb8025fb21d431fb8025eb21c451fb8025db21c451fb8025cb21c451f
b8025bb21c451fb8025ab21c451fb80259b21c451fb80258b21c451fb802
57b21c451fb80256b21c451fb80255b21c451fb80254b21c451fb80252b2
1c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c44
1fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21c451fb8
0249b21c451fb80248b21c451fb80247b21c451fb80246b21c451fb80245
b21c451fb80244b21b491fb80243b21b4a1fb80242b21b4a1fb80241b21b
4a1fb80240b21b4b1fb8023fb21b4b1fb8023eb21b4c1fb8023db21b4c1f
b8023cb21b4c1fb8023bb21b4c1fb8023ab21b4c1fb80253b21b4c1fb802
39b21b491fb80238b21b491fb80237b21b4a1fb80236b21b4a1fb80235b2
1b4a1fb80234b21b4b1fb80233b21b4b1fb80232b21b4c1fb80231b21b4c
1fb80230b21b4c1fb8022fb21b4c1fb8022eb21b4c1fb8022db21b491fb8
022cb21b4a1fb8022bb21b4b1fb8022ab21b4c1fb80229b21b4c1fb80228
b21b4c1fb80227b21b491fb80226b21b491fb80225b21b4a1fb80224b21b
4a1fb80223b21b4b1fb80222b21b4c1fb80221b21b4c1fb80220b21b4c1f
b8021fb21b4c1fb8021eb21b4c1fb8021db21a4e1fb8021cb21a4e1fb802
1bb21a4f1fb8021ab21a4f1fb80219b21a4f1fb80218b21a4e1fb80217b2
1a4e1fb80216b21a4f1fb80215b21a4f1fb80214b21a4f1fb80213b21a4e
1fb80212b21a4e1fb80211b21a4f1fb80210b21a4e1fb8020fb21a4e1fb8
020eb21a4f1fb8020db21a4f1fb8020cb21a4f1fb8020bb21a4f1fb8020a
b21a4f1fb80209b219501fb80208b219511fb80207b219511fb80206b219
511fb80205b219511fb80204b219501fb80203b219511fb80202b219511f
b80201b219511fb80200b219511fb801ffb219511fb801feb219511fb801
fdb219501fb801fcb219511fb801fbb219511fb801fab219511fb801f9b2
19511fb801f8b219511fb801f7b219511fb801f6b218531fb801f5b21853
1fb801f4b218541fb801f3b218541fb801f2b218541fb801f1b218541fb8
01f0b218531fb801efb218531fb801eeb218541fb801edb218541fb801ec
b218541fb801ebb218541fb801eab218531fb801e9b218531fb801e8b218
531fb801e7b218541fb801e6b218541fb801e5b218541fb801e4b218541f
b801e3b218531fb801e2b218531fb801e1b218541fb801e0b218541fb801
dfb218541fb801deb218541fb801ddb217561fb801dcb217561fb801dbb2
17571fb801dab217571fb801d9b217561fb801d8b217561fb801d7b21757
1fb801d6b217571fb801d5b217571fb801d4b217571fb801d3b217561fb8
01d2b217571fb801d1b217561fb801d0b217561fb801cfb217571fb801ce
b217571fb801cdb217571fb801ccb217571fb801cbb217571fb801cab217
561fb801c9b217561fb801c8b217571fb801c7b217571fb801c6b217571f
b801c5b217571fb801c4b2163e1fb801c3b2163f1fb801c2b2163f1fb801
c1b2165b1fb801c0b2165b1fb801bfb2165b1fb801beb2165b1fb801bdb2
165b1fb801bcb2165b1fb801bbb2165b1fb801bab2163f1fb801b9b2163f
1fb801b8b2165b1fb801b7b2165b1fb801b6b2165b1fb801b5b2165b1fb8
01b4b2165b1fb801b3b2165b1fb801b2b2165b1fb801b1b2163f1fb801b0
b2163e1fb801afb2163f1fb801aeb2163f1fb801adb2165b1fb801acb216
5b1fb801abb2165b1fb801aab2165b1fb801a9b2165b1fb801a8b2163e1f
b801a7b2163f1fb801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801
a3b2165b1fb801a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2
165b1fb8019eb215621fb8019db215621fb8019cb215631fb8019bb21564
1fb8019ab215651fb80199b215661fb80198b215661fb80197b215661fb8
0196b215661fb80195b215661fb80194b215661fb80193b215661fb80192
b215611fb80191b215621fb80190b215631fb8018fb215641fb8018eb215
641fb8018db215651fb8018cb215661fb8018bb215661fb8018ab215631f
b80189b215641fb80188b215551fb80187b215611fb80186b215621fb801
85b215621fb80184b215631fb80183b215651fb80182b215661fb80181b2
15661fb80180b215661fb8017fb215661fb8017eb215661fb8017db21566
1fb8017cb215661fb8017bb215661fb8017ab215451fb80179b215611fb8
0178b215621fb80177b215621fb80176b215631fb80175b215641fb80174
b215641fb80173b215651fb80172b215661fb80171b215661fb80170b215
661fb8016fb215661fb8016eb215661fb8016db215661fb8016cb215661f
b8016bb215551fb8016ab215451fb80169b215451fb80168b215361fb801
67b215361fb80166b214821fb80165b214561fb80164b2147f1fb80163b2
14551fb80162b214561fb80161b214401fb80160b214551fb8015fb21456
1fb8015eb2147e1fb8015db214831fb8015cb214851fb8015bb2133d1fb8
015ab2131e1fb80159b2131e1fb80158b2130a1fb80157b2130a1fb80156
b2130b1fb80155b2133a1fb80154b2133a1fb80153b2133a1fb80152b213
3b1fb80151b2133c1fb80150b2133c1fb8014fb212451fb8014eb212461f
b8014db212461fb8014cb212451fb8014bb212451fb8014ab212461fb801
49b212461fb80148b212461fb80147b212441fb80146b212451fb80145b2
12461fb80144b212461fb80143b211471fb80142b211571fb80141b21158
1fb80140b211591fb8013fb2115a1fb8013eb2115a1fb8013db2115b1fb8
013cb2115b1fb8013bb2115b1fb8013ab2115b1fb80139b2112b1fb80138
b2112c1fb80137b211391fb80136b211391fb80135b211461fb80134b211
471fb80133b211471fb80132b211551fb80131b211551fb80130b211561f
b8012fb211561fb8012eb211571fb8012db211571fb8012cb211581fb801
2bb211591fb8012ab211591fb80129b2115a1fb80128b2115a1fb80127b2
115b1fb80126b2115b1fb80125b2115b1fb80124b2115b1fb80123b21159
1fb80122b2115a1fb80121b211391fb80120b211471fb8011fb211561fb8
011eb211561fb8011db211591fb8011cb211591fb8011bb2115b1fb8011a
b2115b1fb80119b2115b1fb80118b211561fb80117b211561fb80116b211
571fb80115b211571fb80114b211581fb80113b2115a1fb80112b2115a1f
b80111b2115b1fb80110b2115b1fb8010fb2115b1fb8010eb2115b1fb801
0db2115a1fb8010cb2115b1fb8010bb2105d1fb8010ab2105e1fb80109b2
105f1fb80108b2105f1fb80107b2105f1fb80106b2105f1fb80105b2105d
1fb80104b2105e1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8
010040ff105f1fff105d1ffe105f1ffd105f1ffc105f1ffb105f1ffa105d
1ff9105e1ff8105f1ff7105f1ff6105f1ff5105f1ff40f621ff30f621ff2
0f631ff10f641ff00f641fef0f641fee0f641fed0f621fec0f621feb0f63
1fea0f641fe90f641fe80f641fe70f641fe60f621fe50f621fe40f641fe3
0f621fe20f621fe10f631fe00f641fdf0f641fde0f641fdd0f641fdc0f64
1fdb0f641fda0e671fd90e681fd80e681fd70e681fd60e681fd50e671fd4
0e681fd30e681fd20e681fd10e671fd00e681fcf0e681fce0e681fcd0e68
1fcc0e681fcb0e681fca0e681fc90e681fc80d6b1fc70d6c1fc60d2a1fc5
0d6c1fc40d2c1fc30d6b1fc20d6c1fc10d6d1f40ffc00d6a1fbf0d691fbe
0d681fbd0d6b1fbc0d311fbb0d311fba0d311fb90c711fb80c721fb70c73
1fb60c741fb50c741fb40c741fb30c731fb20c741fb10d311fb00d311faf
0d311fae0d311fad0d311fac0d311fab0d311faa0d311fa90b7e1fa80b7a
1fa70b791fa60b7a1fa50b7c1fa40b7d1fa30b7e1fa20b7e1fa10b7e1fa0
0b7e1f9f0b7e1f9e0b7e1f9d0b7e1f9c0b7e1f9b0b7e1f9a0b2d1f990b2d
1f980aa71f970aa51f960aa71f950aa71f940aa71f930aa71f920a681f91
0a821f900a9b1f8f0a9d1f8e0a9f1f8d0aa71f8c0aa71f8503251f840338
1f8301381f8255805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d
7b7dab7ddb7d4012060a7c557a557bab7a557955775578ab7755ba028900
660288403c5576ab755504751475747503f47501ab750144750130750102
007510752075030c7455725573ab7255007250728072b072043bb072e072
020072010ab8ffc0b3721b1e46b8ffc0407c720d104671556f5570ab6f55
6e666d556a03251f6938675568ab67556638645565ab6455633862556138
60555f385d555eab5d555c385a555bab5a55593858555703251f56385455
55ab54555338515552ab51554f384e554e03251f4d384b554cab4b554a38
485549ab4855473846554503381f001c101c201c0310b8ffc0404e1c1b1e
46001b0142301b401be01bf01b04001bb01bc01b03120f1a1f1a02290f19
01434f19016f197f198f19030f18cf18024018292c460f17cf17df17ef17
04134017292e460016101620160315b8ffc0b3164d5446b8ffc0b3163f44
46b8ffc0b316313546b8ffc0401f162326460f15010f151f150245ef1501
860003012001010001100120010308b8ffc0b401151f4603bc0100010000
0500010190b154532b2b4bb807ff524bb008505bb00188b02553b00188b0
40515ab00688b000555a5b58b101018e59b101024354b0144b515a58b101
018e59858d8db1160142001d424bb01d5358b203a0a01d42594bb0805358
b20340401d42594bb0ff5358b20300001d4259004bb0ff5358b116004259
2b5e7375732b58403e080011e011f0110315bf10cf10020f0f010f0fff0f
02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f0d
1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f0b
02400b3f4346400b2d304600030120010100011001200103085e7375732b
2b745e732b2b5e73742b73742b7374745e735e5901755e73742b2b2b2b5e
732b5e732b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e73
5f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b185f5e00000000>
[1865 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 374 2 <00020058000004c5050e001800270093b0852b58ba027d027e00582bb101
02435558b900000237400919201f100f100f091fb80105b2135120b80124
b3400954282b183f1a4ded3fed123939012fc63233d4ed31301bb3100f09
1fb80105b2135120b80124b3400954282b183f1a4ded3fed123939313059
1bb4100f09131fb80105b46c13510920b80124b36c095428ba027d027e00
582b2b3f2b3f2b12393930315901140e062321222e02371336363321321e
0207342e0223230333323e0404c512273e597596b881fee10d17100605e6
072f1e011195c48341b629588971b4c9b27aa47e58381a033c418d8d887b
684c2a07101b140482271f3f78ad7d4a7c5933fc113b6586949b>UAAAAA+Calibri-Italic AddT42Char 
1 640 3 <0002004dffed039d03ca002e003c00beb0852b58ba027f028000582bb101
02435558b62a323706040009b8020e400923110c1e031414232fb8020d40
15002306be37372a1e11110c32d12a4a0cdf401e4d282b183f1a4ded3fed
11392f1112392fed012fd4ed12392f173910ed11173931301b401306be37
372a1e11110c32d12a4a0cdf401e4d282b183f1a4ded3fed11392f111239
2fed3130591b40183706be6c37372a1e11110c2a32d16c2a4a1e0cdf6c1e
4d28ba027f028000582b2b3f2b3f2b11392f1112392f2b30315901140e02
2323060615141633323e0233321615140e02070e0323222e0235343e0433
321e0207342623220e020733323e02039d4088d4946a0705636f40664b30
09090904080d080c3d5464325986592c193656779c6254754b22a9504a41
644d371166698d552302e5456e4e2a213e1b646a1316130d0c0a1c1d1a09
0c17130c28537c5441959286663e2a425137333f2d4c65381a2d3c00>UAAAAA+Calibri-Italic AddT42Char 

1 0 1 <> UAAAAA+Calibri-Italic AddT42Char 
1 998 4 <0001003ffffa03b003ca003a00adb0852b58ba027f028000582bb1010243
55584026311a1a1b26040e03000f0114030f0e2515f940364a251b0e041a
0f312608202b49204c094c282b183f3f3f1217393f1a4ded012fc4c45f5e
5d321133c63332113331301b401615f940364a251b0e041a0f312608202b
49204c094c282b183f3f3f1217393f1a4ded3130591b40173615f96c364a
251b0e041a0f312608202b49204c094c28ba027f028000582b2b3f3f3f12
17393f2b30315901140607030e0323222e023713363635342623220e0207
030e0323222e0237133e0333321e0207073e0333321e0203b00807710209
152019181f1105016f0705343d356f5f4b1150020a142118191f110502b5
0109131d14151b0f0401220f445e713d435a381802d6234424fdce080b08
0404080b08022c1f3a163d4b3d6b9356fe6e080b080404080b080385070c
080303080c07ac224c402a294358>UAAAAA+Calibri-Italic AddT42Char 
1 1342 5 <0002004effed03d103ca0017002f007cb0852b58ba027f028000582bb101
02435558b90000021f4009001810180213031824b8021e400b0c1df5134a
29e340074d282b183f1a4ded3fed012fedd45f5e5ded31301b400a1df513
4a29e340074d282b183f1a4ded3fed3130591b400d131df56c134a0729e3
6c074d28ba027f028000582b2b3f2b3f2b30315901140e0423222e023534
3e0433321e0207342e0223220e0415141e0233323e0403d11c395877975d
6089582a1b3a5777975d6089592aae15314f383c624d39251216314e383d
614d39251202734a9a8f7e5e372e5880514a9a8e7f5e372f58805a325037
1e2b49626f75383250381e2b4a627074>UAAAAA+Calibri-Italic AddT42Char 
1 1598 6 <0001007cfffa03a303bc00310077b0852b58ba027f028000582bb1010243
5558b900210187b2121628bb021f0000002001fb400b40162d49220d1b49
0d4c282b183f3f12393f012f1a4dedd4ed10dded31301b40092d49220d1b
490d4c282b183f3f12393f3130591b40092d49220d1b490d4c28ba027f02
8000582b2b3f3f12393f303159011406070e03070e0323222e0227032626
35343e0233321e02171315373e03373e0333321e0203a30604255d718750
07121920161f2615090185010108121f1a1a201106016c053b62544b2703
0b15231a181e110703a50a150b6ddfddd5630b0c070204080e0a03550b11
070d0e080303070d09fd1a0c0659a7b2c476090d070303050900>UAAAAA+Calibri-Italic AddT42Char 
1 0 0 <00050000fe7303da050e00030007003b005500560075b0852b58b52d162d
16083c410a01ed00490007016400020020018c0008000101644012040225
370603511b0d117051015144070254003fdddedd5ddeddcd3fdddecd012f
ddedd6ed10fdd6ed1239392f2f31301b400e25370603511b0d1151440740
025400183f1adddedddeddcd3fdddecd303159011121110111211101140e
020707060623222e02373736363333323e0235342e0223220e0223222635
343e02373e0333321e0201140e0207060623222e0235343e023736363332
1e020103dafc5b034ffd06027b1f456e4e24021f1b0e140c050120051f17
083d4f2e130f21352828402f1f070a060205080608293a4422445e3a1afe
b503070b070a2016161a0e0504070c0809201913190e04fe46050efaf205
0efb43046cfb9403313467523605980a0802040606bc1b17253b4621192b
20130f13100c0e05131612060713120b263d4afd8b08171a17070a0a070c
100a0918181608090a060c10fd38>UAAAAA+Calibri-Italic AddT42Char 
UAAAAA+Calibri-Italic /CharStrings get begin
/g2 2 def
/g3 3 def
/g1 1 def
/g4 4 def
/g5 5 def
/g6 6 def
end
UAAAAA+Calibri-Italic /Encoding get
dup 33 /g2 put
dup 34 /g3 put
dup 35 /g1 put
dup 36 /g4 put
dup 37 /g5 put
dup 38 /g6 put
pop
end
%ADOEndSubsetFont
/IFKELT+Calibri-Italic /UAAAAA+Calibri-Italic findfont ct_VMDictPut/IFKELT+Calibri-Italic*1 [33{/.notdef}rp /g2 /g3 /g1 /g4 /g5 /g6 217{/.notdef}rp]IFKELT+Calibri-Italic nfIFKELT+Calibri-Italic*1 [19 0 0 -18.9897 0 0 ]msf494.043 309.2 mo(!"#$%&%)[11.668 9.04587 4.33386 9.69202 9.61591 8.30487 0 ]xshIFKELO+Calibri*1 [19 0 0 -18.9897 0 0 ]msf560.733 309.2 mo(*--.;,4:%)[9.04596 7.33606 7.336 9.44495 15.0688 9.95782 4.33392 8.51398 0 ]xsh492.162 331.285 mo(-+*+3-+30-%<%*9*4:-3-%)[7.13083 6.06683 8.87875 6.29486 4.31873 7.13086 6.2948 4.31879 8.00476 7.33984 4.31866 7.33972 4.31866 9.0498 9.96155 9.0498 4.31873 8.3468 7.33978 4.31879 7.33984 0 ]xsh477.164 342.227 mo
648.774 342.227 li
648.774 530.269 li
477.164 530.269 li
cp
0 0 0 0 cmyk
f
477.164 342.227 mo
648.824 342.227 li
648.824 530.197 li
477.164 530.197 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 477.164 342.227 ]ct
@
grestore newpath
%ADOBeginSubsetFont: MAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELP+Calibri gcheck setglobal} if
1 2246 8 <0001005bffee04780520003f00ddb0852b58401d1c1c0f181810014d1810
0f014d18100d014d180a0c014d18100b014d18b80211400d00bf27012027
4027602703270fb8ffe8b310014d0fb8fff0b30f014d0fb8ffecb30d014d
0fb8ffeeb30c014d0fb8ffe8b30b014d0fb80232b42f34013418b8010ab4
2222392f3ebb010a0005000a0129b2395314b8012cb12f56003fed3ffdd4
ed1112392fed012f5de12b2b2b2b2bd45d5dc4e12b2b2b2b2b12392f3130
1bb12218b8010ab66c2222392f053eb8010ab36c05390ab80129b46c3953
2f14b8012cb26c2f5600183f2b3f2bc42b1112392f2b30315901140e0223
222e0223220e0215141e02333236371121222635343e023321321e021511
140e0423222e0235343e0233321e04047804080c070c385e835a6baa763f
457aa9653c7b35fed4111104090c09019b0b16120a123a5c62643196eca3
565da9ed904a8265451a0a045e131d1308262e264e8abe6f7cc084441d1d
01792224131b110808101c12fe131a261d22180c5dacf0949afab0611a23
291a2200>IFKELP+Calibri AddT42Char 
1 2640 9 <000100acfffa04500514002f00e6b0852b58b43f3101230cb8ffe8b31001
4d0cb8fff0b30f014d0cb8fff0b30d014d0cb8fff6b30c014d0cb8ffe8b3
0b014d0cb80211401c17240b1810014d0b100f014d0b100d014d0b0a0c01
4d0b180b014d0bb802104017004015014d004013014d00401011014c0040
0c014d0017b8ffc0b315014d17b8ffc0b613014d172a5224b8012c400fc0
0c01d00c010c0c121d5212550555003f3f3f12392f5d71ed3f012f2b2bd4
2b2b2b2be12b2b2b2b2b3210e12b2b2b2b2b3231305d1bb32a520c24b801
2c400f6c000c0116030c0c121d521255055500183f3f3f12392f5f5e5d2b
3f30315925140e0223222e0235112111140e0223222e023511343e023332
1e0215112111343e0233321e02150450081421181a201408fdb308142119
182214080814221819211408024d0814201a182114081a080c070505070c
08023efdc2080c070505070c0804da080c070505070c08fdfa0206080c07
0505070c0800>IFKELP+Calibri AddT42Char 
IFKELP+Calibri /CharStrings get begin
/g8 8 def
/g9 9 def
end
IFKELP+Calibri /Encoding get
dup 98 /g8 put
dup 99 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELP+Calibri*1 [33{/.notdef}rp /g18 /g28 /g24 /g39 /g26 /g31 /g1 /g37 /g34 /g41 /g40 /g52 /g38 /g42 /g32 /g49 /g21 /g36 /g27 /g35 /g33 /g46 /g17 /g30 /g13 /g2 /g53 /g10 /g29 /g7 /g25 /g54 /g69 /g67 /g58 /g57 /g56 /g68 /g62 /g55 /g43 /g47 /g4 /g45 /g6 /g5 /g11 /g20 /g66 /g44 /g65 /g51 /g19 /g16 /g3 /g22 /g59 /g60 /g61 /g50 /g14 /g12 /g23 /g48 /g15 /g8 /g9 156{/.notdef}rp]IFKELP+Calibri nfIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf484.715 355.76 mo(:4#56+/+'+*"\(+0)[6.02994 5.50995 4.98004 2.36005 4.72003 4.06003 2.36005 4.06006 2.35999 4.06006 3.5401 5.23999 5.50995 4.06006 0 ]xsh484.715 367.763 mo(CH)[5.37503 0 ]xsh496.255 367.763 mo(^Mb:c<U')[8.91397 5.11404 6.55399 6.03394 6.55402 2.62396 5.11401 0 ]xsh%ADOBeginSubsetFont: QAAAAA+Calibri-Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELR+Calibri-Italic gcheck setglobal} if
1 1132 4 <00020051ffed0439056d002c003f00c2b0852b58ba027f028000582bb101
02435558400a212d3f222c003f092237b8021e401a15222c032746212d3f
090800060e30f91c4a3af8400e4d034c282b183f3f1a4ded3fed1217393f
123939012fedc4392f33327d870ec4c431301b4019222c032746212d3f09
0800060e30f91c4a3af8400e4d034c282b183f3f1a4ded3fed1217393f12
39393130591b401c222c032746212d3f090800060e1c30f96c1c4a0e3af8
6c0e4d034c28ba027f028000582b2b3f3f2b3f2b1217393f123939303159
25060623222e0237370e0323222e0435343e0433321e0217133e0333321e
020701262623220e0415141633323e0237032d03242a151a100502200d44
5d723b3b573b25150716304b6a8b582b4c3e341566010a142019181f1205
02fed62f6d443555443120104249376f604a1219110e04070b09a8214b3f
291f3445494a1f3a90918b6b4213212e1901fe070d070505070d07fd6245
4831526a716e2e61673c6a925700>IFKELR+Calibri-Italic AddT42Char 
1 4346 13 <0001007cfffa03a303bc00310077b0852b58ba027f028000582bb1010243
5558b900210187b2121628bb021f0000002001fb400b40162d49220d1b49
0d4c282b183f3f12393f012f1a4dedd4ed10dded31301b40092d49220d1b
490d4c282b183f3f12393f3130591b40092d49220d1b490d4c28ba027f02
8000582b2b3f3f12393f303159011406070e03070e0323222e0227032626
35343e0233321e02171315373e03373e0333321e0203a30604255d718750
07121920161f2615090185010108121f1a1a201106016c053b62544b2703
0b15231a181e110703a50a150b6ddfddd5630b0c070204080e0a03550b11
070d0e080303070d09fd1a0c0659a7b2c476090d070303050900>IFKELR+Calibri-Italic AddT42Char 
IFKELR+Calibri-Italic /CharStrings get begin
/g4 4 def
/g13 13 def
end
IFKELR+Calibri-Italic /Encoding get
dup 44 /g4 put
dup 45 /g13 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELR+Calibri-Italic*1 [33{/.notdef}rp /g2 /g9 /g7 /g1 /g12 /g3 /g10 /g6 /g5 /g8 /g11 /g4 /g13 210{/.notdef}rp]IFKELR+Calibri-Italic nfIFKELR+Calibri-Italic*1 [10 0 0 -9.9946 0 0 ]msf539.515 367.763 mo(,\)$*"-"$)[5.37506 4.98499 2.35498 5.37506 5.375 4.71503 5.375 0 ]xshIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf575.435 367.763 mo(#++"\)?56'24)[4.98102 4.0611 4.06104 5.24103 8.39099 5.51093 2.36102 4.72101 2.36102 5.51093 0 ]xsh496.255 380.966 mo(*&"'79:)[3.53906 5.50894 5.24902 2.35898 5.63898 6.81897 0 ]xsh531.385 380.966 mo(;)sh534.535 380.966 mo(+"-)[4.06409 5.24402 0 ]xsh551.705 380.966 mo(>:!UV'=/5"+'*$"#*)[4.84998 6.02997 4.84998 5.11005 7.08002 2.35999 3.1499 2.36005 2.36005 5.23999 4.06006 2.35999 3.5401 3.66998 5.23999 4.98004 0 ]xsh622.482 380.96 mo("3)[5.23999 0 ]xsh496.251 392.96 mo(?6'"#%&'%2\)\(#$"3'\)"*&23)[5.50595 4.716 2.35599 5.24603 4.97601 4.45605 5.50592 2.35602 4.45599 5.50592 8.38599 5.50592 4.97607 3.66595 5.24603 5.50592 2.35602 8.38593 5.24603 3.53607 5.50592 5.50592 0 ]xsh484.711 405.923 mo(YH)[5.37503 0 ]xsh496.251 405.923 mo(K24+*$.%*/24'2='#'52%#5'WO:!U4)[5.63705 5.50693 5.50696 4.06702 3.53711 3.66699 5.5069 4.45709 3.53705 2.35706 5.5069 5.50696 2.35693 5.50696 3.14691 2.35699 4.97705 2.35693 2.35706 5.50696 4.45703 4.97705 2.35699 2.35699 5.76709 4.45697 6.02692 4.84698 5.10699 0 ]xsh496.251 417.927 mo(3#*#?#+"'?#+"3'24'*&")[5.50595 4.97601 3.53607 4.97604 5.50592 4.97607 4.06604 5.24603 2.35596 5.50598 4.97601 4.06604 5.24603 5.50592 2.35602 5.50592 5.50592 2.35596 3.53607 5.50598 0 ]xsh496.251 430.889 mo(%2$$"+\(243/48'I/$.+'$"='>:!U:)[4.45703 5.50693 3.66699 3.66702 5.24701 4.06702 5.50696 5.50696 5.5069 5.50696 2.35706 5.5069 4.97693 2.35699 4.71698 2.35706 3.66699 5.5069 4.06708 2.35699 3.66699 5.24701 3.14691 2.35699 4.84698 6.02692 4.84705 5.11694 0 ]xsh484.711 442.893 mo(ZH)[5.37503 0 ]xsh496.251 442.893 mo(WO:!U4'2='*&"'8"4"$#*"3)[5.76807 4.45798 6.02792 4.84802 5.10797 5.50793 2.35803 5.50787 3.14795 2.35797 3.53809 5.50793 5.24799 2.35803 4.97791 5.24805 5.50793 5.24799 3.66797 4.97809 3.53802 5.24799 0 ]xsh496.251 455.856 mo(^Mb:c<U'%24*/8+'24'*&"'52%#5)[8.91397 5.11404 6.55396 6.03394 6.55402 2.62402 5.11401 2.36395 4.45404 5.50391 5.50397 3.53406 2.36401 4.98395 4.06409 2.36395 5.50391 5.50397 2.36395 3.53412 5.50391 5.24402 2.36395 2.36407 5.50391 4.45404 4.98407 0 ]xsh496.251 467.86 mo(I/$#5'3#*#?#+")[4.71896 2.35904 3.66898 4.97903 2.35907 2.35895 5.50897 4.979 3.53906 4.97906 5.50891 4.97906 4.06903 0 ]xsh484.711 480.823 mo([H)[5.37503 0 ]xsh496.251 480.823 mo(K#5%.5#*"')[5.63705 4.97702 2.35706 4.45703 5.50696 2.35706 4.97699 3.53711 5.24701 0 ]xshIFKELR+Calibri-Italic*1 [10 0 0 -9.9946 0 0 ]msf537.671 480.823 mo(,\)$*"-"$)[5.37506 4.98499 2.35498 5.37506 5.375 4.71503 5.375 0 ]xshIFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf573.591 480.823 mo(#++"\)?5)[4.98102 4.0611 4.06104 5.24103 8.39099 5.51093 0 ]xsh608.201 480.8 mo(6)sh496.251 492.8 mo(+*#*/+*/%+'?#+"3'24'WO:!U4'2.*\(.*)[4.06406 3.53409 4.98404 3.53403 2.36407 4.06409 3.53406 2.36401 4.45404 4.06409 2.36395 5.50397 4.98401 4.06409 5.24402 5.50391 2.36401 5.50391 5.50397 2.36395 5.7641 4.45398 6.03394 4.854 5.11395 5.50397 2.36395 5.50397 5.50391 3.53406 5.50397 5.50397 0 ]xsh496.251 505.763 mo($"\(2$*'E'I/$.+)[3.67099 5.241 5.51096 5.51096 3.67096 3.54108 2.36096 7.21106 2.36096 4.72101 2.36102 3.67102 5.51093 0 ]xsh555.631 505.763 mo(;)sh558.781 505.763 mo(+\("%/=/%'#++"\)?56)[4.06409 5.50391 5.24402 4.45404 2.36401 3.14398 2.36401 4.45404 2.36395 4.98407 4.06409 4.06403 5.24402 8.39398 5.50391 2.36407 0 ]xsh496.251 517.766 mo(\)"*$/%+)[8.38995 5.24002 3.54004 3.67004 2.35999 4.46008 0 ]xsh258.452 291.888 mo
430.062 291.888 li
430.062 336.129 li
258.452 336.129 li
cp
.111269 .0303044 .00289921 0 cmyk
f
258.452 291.888 mo
430.111 291.888 li
430.111 336.112 li
258.452 336.112 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 258.452 291.888 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELO+Calibri gcheck setglobal} if
1 3650 12 <00010022fffa0468051400240086b0852b58401d24080b014d2824011a08
0b014d261a01281701260d012c19012c180119b8ffe8b40f10014c19b8ff
e8b40c0d014c18b8ffe8b40f10014c18b8ffe840120c0d014c1918191826
251f52180512520555003f3f12393f11120139392f2f2b2b2b2b3130005d
5d015d5d5d2b5d2b1bb71f5218051252055500183f3f12393f303159250e
0323222e0427012626363633321e02170133013e0333321616060702b704
0e19271d162118110c0703fe5908011228221c2112090401730101690308
14241e1f240d03081e0b0e0803010405080b0804b2161b0e0403080d0afb
bf043f0b0e0803050e1b1600>IFKELO+Calibri AddT42Char 
1 6298 20 <00030035fe93038903c8003e004e005f0116b0852b584015122d47100f01
4d47080c014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d
3fb8ffe0b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707
b8ffe0b310014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040
340b014d0058100f014d58201012014c582a25400b12014c250f30070338
4ada0c53e81515603803e93c482a2042d9384a5bd9204f003fed3fed1239
3fed1112392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b11
12173910cd2b10cd2b2b2b10cd2b2b2b10cd31301b40270f300703380c4a
da6c0c151553e86c151560383c03e96c3c482a203842d96c384a205bd96c
204f00183f2b3f2b12393f2b1112392f2b10c62b12173930315901140623
23161615140e0223222627060615141617171e0315140e0223222e023534
3e0237262635343637262635343e023332161721321601342623220e0215
141633323e0213342627270e0315141633323e020389130f81231c325d80
4e37631b12174136eb4370522e346ba6716d99622c10213120312f32251f
24345c814c29471f01101111fefe655d30472f17655b31482f17535f51e9
2029180984764b653e1b0374231f24572f4e78532c1d16122e1e232e020a
02213d593b3e70553125405934213e383319194c2c3d6026255d424d7a54
2d090821fef15c672038492859661f3748fd5e3a3f0208192d2928154143
1d303e00>IFKELO+Calibri AddT42Char 
IFKELO+Calibri /CharStrings get begin
/g12 12 def
/g20 20 def
end
IFKELO+Calibri /Encoding get
dup 61 /g12 put
dup 62 /g20 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELO+Calibri*1 [33{/.notdef}rp /g8 /g4 /g3 /g7 /g1 /g11 /g10 /g2 /g17 /g14 /g30 /g15 /g29 /g18 /g28 /g16 /g21 /g6 /g22 /g23 /g26 /g31 /g27 /g19 /g25 /g32 /g24 /g33 /g12 /g20 193{/.notdef}rp]IFKELO+Calibri nfIFKELO+Calibri*1 [19 0 0 -18.9897 0 0 ]msf288.943 309.2 mo(=3/6-%)[10.7502 4.32828 6.55118 9.9711 7.3493 0 ]xsh332.206 309.2 mo(;*7739>%)[15.0745 9.05167 9.9635 9.96347 4.32068 9.96347 8.91849 0 ]xsh273.458 331.285 mo(-+*+3-+30-%<%*9*4:-3-%)[7.13083 6.06683 8.87875 6.29483 4.31879 7.13083 6.2948 4.31879 8.00479 7.33981 4.31866 7.33972 4.31866 9.04977 9.96158 9.04977 4.31879 8.34677 7.33978 4.31879 7.33984 0 ]xsh258.452 342.227 mo
430.062 342.227 li
430.062 425.757 li
258.452 425.757 li
cp
0 0 0 0 cmyk
f
258.452 342.227 mo
430.111 342.227 li
430.111 425.725 li
258.452 425.725 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 258.452 342.227 ]ct
@
grestore newpath
IFKELP+Calibri*1 [10 0 0 -9.9946 0 0 ]msf266.003 355.76 mo(:4#56+/+'+*"\(+0)[6.02994 5.50995 4.98004 2.36005 4.72003 4.06006 2.36005 4.06006 2.35995 4.06009 3.54007 5.23999 5.50995 4.06006 0 ]xsh266.003 367.763 mo(CH)[5.37503 0 ]xsh277.543 367.763 mo(WX:'#5/84'*&"'*$"#*"3'79:)[5.76807 9.30798 6.02795 2.35797 4.97806 2.35803 2.35803 4.97794 5.50793 2.35797 3.53806 5.50797 5.24802 2.35797 3.53806 3.668 5.24799 4.97806 3.53806 5.24802 5.50793 2.358 5.63797 6.81796 0 ]xsh392.773 367.763 mo(;)sh395.923 367.763 mo(+"-)[4.06406 5.24402 0 ]xsh277.553 380.966 mo(>:!UV'?6'"#%&'%2\)\(#$"3'\)"*&2)[4.85001 6.02994 4.85001 5.10999 7.08005 2.35999 5.50992 4.72003 2.35999 5.24002 4.98001 4.46005 5.50995 2.35999 4.46002 5.50992 8.38998 5.50992 4.98004 3.66998 5.24002 5.50995 2.35999 8.38995 5.24002 3.54004 5.50995 0 ]xsh416.779 380.96 mo(3)sh277.538 392.96 mo(24'*&"'I/$.+'$"='>:!U:)[5.50592 5.50595 2.35599 3.53604 5.50595 5.246 2.35599 4.71597 2.35602 3.66599 5.50595 4.06607 2.35599 3.66599 5.246 3.14594 2.35596 4.84601 6.02594 4.84601 5.116 0 ]xsh265.998 405.923 mo(YH)[5.37503 0 ]xsh277.538 405.923 mo(K#5%.5#*"'I/$.+'\)#\(\(/48',)[5.63705 4.97702 2.35706 4.45703 5.50696 2.35703 4.97705 3.53705 5.24701 2.35699 4.71695 2.35706 3.66699 5.50693 4.06708 2.35696 8.38696 4.97705 5.50693 5.50693 2.35703 5.50696 4.97693 2.35699 0 ]xsh277.538 417.927 mo(#5/84\)"4*'+*#*/+*/%+'?6')[4.98105 2.36102 2.36105 4.98093 5.51093 8.39096 5.24103 5.51093 3.54108 2.36099 4.06107 3.54105 4.98105 3.54108 2.36105 4.06104 3.54108 2.36105 4.46103 4.06107 2.36099 5.51093 4.72104 0 ]xsh374.678 417.927 mo(+#\)*225+)[4.06406 4.98404 8.39398 3.53406 5.50394 5.50391 2.36404 0 ]xsh213.295 227.452 mo
255.627 227.452 li
255.627 257.934 li
213.295 257.934 li
cp
0 0 0 0 cmyk
f
213.295 227.452 mo
255.639 227.452 li
255.639 257.921 li
213.295 257.921 li
cp
.749721 .679194 .670497 .901457 cmyk
1 lj
10 ml
gsave
[8.26e-05 0 0 8.25e-05 213.295 227.452 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELO+Calibri gcheck setglobal} if
1 3902 13 <0001001efffa03c70514002a0071b0852b58b90000ffe8b310014d00b8ff
f0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8ffe8b30b014d00
ba0211000cffc0b317014d0cb8ffc0400c0d014d0c25521b061252065500
3f3f12393f012f2b2be12b2b2b2b2b31301bb725521b061252065500183f
3f12393f3031590111140e0223222e023511012626363633321e02171316
161733363637133e0333321616060702490814221819211508fe920b050f
27211e25160b05b319321a02173119b4030b13221a242910050b01f7fe23
080c070505070c0801dd02da171a0e0404070d0afe8c35743b3971370176
0a0e0704050e1a16>IFKELO+Calibri AddT42Char 
1 1444 5 <000100ac0000037c050e002c00aeb0852b58b11a27b8ffe8b310014d27b8
fff0b30f014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d
27b80211400909132013200009001ab80108400d802601c02601d0260126
260619b8010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f
2f1239392f2f10e12b2b2b2b2b3231301bb1261ab80108400b6c00260116
032626060d19b8010cb46c0d510627b8010cb26c065400183f2b3f2b1239
2f5f5e5d2b30315925140e0223212226351134363321321e0215140e0223
211121321e0215140e0223211121321e02037c040a0d08fd931729291702
66080d080505080d08fe0601b2080d090404090d08fe4e0201080d0a0447
121b12081f270482271f08121b14121b1108fe6a09101c13121a1007fe31
08111b00>IFKELO+Calibri AddT42Char 
IFKELO+Calibri /CharStrings get begin
/g13 13 def
/g5 5 def
end
IFKELO+Calibri /Encoding get
dup 63 /g13 put
dup 64 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELO+Calibri*1 [33{/.notdef}rp /g8 /g4 /g3 /g7 /g1 /g11 /g10 /g2 /g17 /g14 /g30 /g15 /g29 /g18 /g28 /g16 /g21 /g6 /g22 /g23 /g26 /g31 /g27 /g19 /g25 /g32 /g24 /g33 /g12 /g20 /g13 /g5 191{/.notdef}rp]IFKELO+Calibri nfIFKELO+Calibri*1 [19 0 0 -18.9897 0 0 ]msf220.846 249.2 mo(?@&)[9.17699 8.98714 0 ]xsh383.474 112.792 mo
423.609 112.792 li
423.609 143.273 li
383.474 143.273 li
cp
0 0 0 0 cmyk
f
383.474 112.792 mo
423.62 112.792 li
423.62 143.262 li
383.474 143.262 li
cp
.749721 .679194 .670497 .901457 cmyk
gsave
[8.26e-05 0 0 8.25e-05 383.474 112.792 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IFKELO+Calibri gcheck setglobal} if
1 2504 9 <00020063ffed04e8052100130027009db0852b58401a141810014d14100f
014d14140d014d14120c014d14180b014d14b80233400920003000800003
001eb8ffe8b310014d1eb8fff0b30f014d1eb8ffecb30d014d1eb8ffeeb3
0c014d1eb8ffe8b30b014d1ebb0233000a00190129b20f5323b8012bb105
56003fed3fed012fe12b2b2b2b2bd45de12b2b2b2b2b31301bb10f19b801
29b46c0f530523b8012bb26c055600183f2b3f2b30315901140e0223222e
0235343e0233321e0207342e0223220e0215141e0233323e0204e84a93de
9492d58b444a94de948fd48d45b5275b987070985f29265a9772719a5e28
02969dfcb15f57a6f6a099faaf5f56a5f3a96ebd8b4e548cbb6772c08b4d
548fbc00>IFKELO+Calibri AddT42Char 
IFKELO+Calibri /CharStrings get begin
/g9 9 def
end
IFKELO+Calibri /Encoding get
dup 65 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IFKELO+Calibri*1 [33{/.notdef}rp /g8 /g4 /g3 /g7 /g1 /g11 /g10 /g2 /g17 /g14 /g30 /g15 /g29 /g18 /g28 /g16 /g21 /g6 /g22 /g23 /g26 /g31 /g27 /g19 /g25 /g32 /g24 /g33 /g12 /g20 /g13 /g5 /g9 190{/.notdef}rp]IFKELO+Calibri nfIFKELO+Calibri*1 [19 0 0 -18.9897 0 0 ]msf391.024 134.72 mo(!A)[12.1903 0 ]xshgrestore
set_def_flat
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: MCAAAA+Calibri-Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (MCAAAA+Calibri-Bold)%%Title: (MCAAAA+Calibri-Bold Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /MCAAAA+Calibri-Bold def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {-519 -306 1240 1039} def/FontInfo 4 dict dup begin/FSType 8 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 3878 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 17 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B7A086528E2CBE7FD4F03CC6CDCA18E09BCC917FA5F119478AAC0A696931453BF661861F40ACE8D15EA0278E8F88478BB0248E8D19042FB8B7F2BB2D4ECFE961B3EEB80565197E481D427DFF375EC95F16C0E36FE28AEC2A0702F6CB5ACA5B242B6593847C74B58C6FBE25BCF0D4AFF25D49578CAB0D929B025DECF86FE8C45E91FC3804785896842CEEC7085BA98EF5BCC94B208BF43A5FA51448171853E476E618A0AB76D0CDCEE51B8CF3FCD6DA051824D7EFC40D8D270BAD39624CE3E5CBFE64B165BA24EF48FCEC82F8DEB8BFCD829A07FF03FFE381E622BF0967DB53309A79D2F393F52C4B535EC59CAFAAC152061A92D31A3A6E83C18D63056F4453027EAA702C494809677EB8C59BD219046DE492EABC7DF19D085C93C98D2A8DDC68AF0F5D7D82447ED6165A8DE95E6965A0F15A3F7696EAE508CE290FD5B2FFA8A49A20B157645C3C3FEFBC64E2B40E75B90474094AF1599689FA1EAB0D131F6DB991FC0D5943DE54CA9E5ECDA986A63CDF0394AF79DB398CE8AC4F02FDBD88EE6AE535CFB6C3B33C157AAFFBEC52BA3DACE77ABDA0C787220FBA75DA1E45C945> |94 <001C60D8A8C9B742B2428B22C58173B85783D75A797DBCB372A0CB326482474FAB61F063E0140601EC7FF01420397E5BDA67D4F9EDAE8E10230A79EC92A8830D2282FCE48C14D6255C2ED38A9227193C8E6C63D4DDC56C1677AD4EE7A081BF7E8A0FF7039F31DB9E38AA3D9C2EB519583088084AA15E2BB9360A4E499CAC66644008970F6456622973EBC19ABE9CB7A2E2E1E436FF7CFF17A456DD4F34C9425E8B0FD7DE46D10D79C35ECAF346DB73750038187DFDA7C08FA4F48F7113F63AFD0A79F7B60ED56D2ECBD0518AE5F6486AECEBC538DAAA88840DE9FD61A7C5CE810708E5D83B5B7C944D9C1E933328832CB2C1C15FF59A769DC54012A003CD2D939547D59BB8CA0EDD6EE29AE032391BAF39F38DA1EDFC771E0FCA4EC6DCF952E839737B2539E516D209F792B48305C6FAB4D747AEC9E9C287FF4145435610A8CE0D829239E17AD471B7D50F49EAEE2D4789B01FCDAE85BE94E4A248F072817ADE20C93B792AF7C1262529AB3872BFC67D038B73B9815822C383A38940639918361A4A73948EE1A93B0DB78FD9D96349705DBB9BAADC27C924FF385CADAA15DB528408E800871EF0C31C6F3F452B977A4424498006B5AFF12D057DDA48B3582FED5A4C> |437 <001C60D8A8C9B78256DD14A9D4CFBED1BDC0F18C95C4082E386E4202EC316A773D8A30F080ADEC91D0110972258C98F99D057AA4BEADF7377C0737CBC02B0283A44BC0695ADE1B267F48E12CE2216B2E9CE1F46FA8F6A7E394206FAB10EC5A9623D4E38E3233F4B79961F3FC497A2341DE4C19EF987B2BBD60C6954F7C2A66BFAC441FC6EF5D70CAE4B9D18C6C234C845D9B5C1128E01D7EED3EBACBCEAA81555CE1104ABBEE3361A0DA732C15BFA88A8DC8AC2892954D8120CDA8D9F901B38677E84A025079FEBC3F90CA210E453321C393CC904D5039FFAB58A79ABCF1EF3103597A64D9EFE158B9CA965B63D2279CEC94C047DCAAE96F0583EF883AECBA4354D2178D47E9266659EB4ED782FE0D3BB7E0DF2E8F26E4> |393 <001C60D8A8C9B78256DD05CEB4DA9E965AB07EBB69AB364D14F4B8A1E6129E1A1B57A9F6AF54A3080C4C156F4713FDECBA67C18FBD4873468229BF2E56E47555C842162EA8AFD838229FDC9DDEF310896F702CA81E89654B1920C456B6122904925826DCCF02D5C1E273B9B70F686A52F233CB0BF53CA99DE0726AB8843AE18A2F544EEFCCB9368EBBD2EAF30818B845E8A149610E23EA632E165F5F7A4520EBF45E5F0A7C6C568F3780A23188579ACA934B1151F60150BE69611E3BBA1C15169CC459A53E1BC79B4E95D0D1E38FE34738BA484CC420DDF487453BC7EA44E7585361232849BCEDF40AAC7FE11F5957D235AD9EDF320D6585B01D68C46BE5D9691D1F0D2A2633C87BEE9F7062A178C86B69B109CEB96764C1C8FBD01DA9DDE36AB596536073622CAD7E9206511E05DBC09A13A3DCE8DBA476EE29BA282BA82967374BCFCA66C6C7134003DFF5B8CBD8A2DF42CA27C9663DE571271A8218E1F5A8F5301D> |367 <001C60D8A8C9B874A685BEE6A5E28F9948AE1E7D147199A7FD5C3385C67EA3BE0E4BDDEEBED94EEAEFFC708E6FBFBB110A4FD3B0B2C6A50B9DF51D26DA8F79E50A98C439853420902774615E5C4AA802BC14286E49C6715A4394D046A1685B7F2557950D872EDAE985E8B69D5B3A1679FE91E5F44DD94A755B4DC7CB2094A762633492> |286 <001C60D8A8C9B7A4C86C545A4AC8A7D7F6C345E834CA1213E882E926387794826A205EEEE689D37E8FC5A261291E47A8EB37515D6AFF3E8D4C2927EEA10BDEE7B9C51B7C7E29EC21F969487478C80B6DD492C8CB06797735DBFAA0767835E16CF60557FF99669574049AC02AF815FE3A71EC95AE08115F25C3E55D5B1FD10CA1E741534F0E60416081D7FA16D9DFEF57FF91FD82FC7BA4FB9689D718D9A71DED1EF9DCA51AF0BBC79B40093EF91CBC3D8C48A3FDFEA41B5047A65EAFDD5AF1021F9C948AAB35D583226126C585E079DEB6D479075845CECA8ED7ED10944C11C924501DD381B71E2F7690C30AF54ADDDF92DD4099EA219A54E3CF84E276FA7871C8A6ED23473DBBAA6EDA7BEF929816C1760D14417F454980C243ACB7FEEE422DBAD62FF97870FD2250B1790169B64F76> |373 <001C60D8A8C9B6A0FC22F7FDE4D70269FAA3ABCE84D83E02588B58324048A29EDA3366025ED35011C3387E67BBE9855BC9117A7F78166278323249BA674DCEE9AE9196653285F341F22A75D7A524C07ADB322A3968B0FE8E6C4637BB81D36C67F8701364C2FC3DF17B599D67F1171C1AE68C5656E14227198F5B75BDCAA6CB9FD5CB83960FD443FF0E2A9347589D2B52A0B502D664A1FECF415B888C78C95332B5951EC5EFF92616EAE4ECA8B9D3B943C765E7EE8E2867E53EC3D42AA7F4F367795C4524B73E7FBC0DDC9EDE4B202217BC4D75DCBFB156273EF107894CBB2461A6FC49EDD928715F2DD04BBCA7A926AC7B68321CAEFE4FB87B0610008516F3EA45AC0B8E9A606F2C7B0F442EF2AC478DB2CCA5A9E3A06A53FFBF5FE74008C53ABA0EB809A9BDD336F369692EDD0748FD400455C74E743F57DE4D0ABD30AF90BB658997874F6FD991BF214F0044AF0FD83B05E8FBB85B5F594B2318479B4B46D9C72FE71135EC8E0CEF9B75ADDD8FA2549A36F4C5A3BA0E174F8F9933BCFE927331B75B263902852A8C7A8E55AF4AB72C3603BE325B0C76C762D28397C0100D336270F43AEAB0947E477C82A82BD10036213E1512830E77> |374 <001C60D8A8C9B78256DD09855002C1F642102EC28B82F48E21B28CD8D1161804F5A9A747AD2624D941564B1DAE90411653B58E89369C53390A39373C180E921901CFF6CB5B97D1E2F6881105A39AF049AF7BAB6A1217A5C2B8A9279563CA1276FC02BACD1EEE8432C4000AF8AC8B81C2B3B82F6968BF9741308293C4341FD8C1BF06F82527B4BB1BFEB05C7AAE16687F72280798047F2DE0F0B0C1A73D4FFEFAEDFA40DAB27F9393250746B607E6DD1B8488942E5E65DC28EF4BF61000038A490B102DA889E711AC446FA2AE5AF546DC759185DC2C75747BB2C76E9F900921B79B64F414F07BA72B97757066640FBFE321B86C7EC04E0E0AD1B078011E479036E3D4D1746C4387436B0F75E38AB678D2BFE9BAAAF021F8> |410 <001C60D8A8C9B811DA5D4543EFE763FE07FB96B6C57E1041B720B12395755AD170E1C95BCAF4A2E07F08B3527B85FB4B749D3F56190F68B968E525451C3AE3228733358D3B0A4C671159FB2D66F4623773F95AB53B6E5F82C4D1162EF1F1D4E57FDA1EEF70327DBE4F94D4CA953DA49B009A6CE451FDF5FD819F6892B657B7073F3DB90026C98348CDA83213F5FE3803287637443B9875961ADEC93A662F367D30B1D64FEC94C3B7D13A776301EC9C6F446E01C4556C7599D35348744BB4C07BEDF72B7B19A9909847F0BA47C222B2E533F87C4B7AA516B5A1E0E7365242B5879EFE81A74993AD272F8F9838C2A26DF98C12A45718CB59AC62E5107E8E34F27910F2367476C7C04E0E4233AFE86333074EFF0032ECDB6435F19DBFBCDB19D0579CF4055335373B7C3C1BD559B22725F49EA0166722B1401585> |258 <001C60D8A8C9B7AD0A34D5A33DA54D708C09070E3263DB3F8B204742934F45464C864E5219DC64C17C21334728C70A28136E97F8B50DED54E9169E494DCFFBE08054CD1ABEDFE9442047B18ABC511F07776D5525C7536F54A7020A4D06660444EA4587557797F3D30E946423D7B549AB2AE4911FA9B4137E2A2722357A506A6A05F91A214894E28FEC6B492CDF90F6872AAE0C40180F5DD11FF249C62B7437E3A71BA232F3D2872FD555E1C9AC4E7F4B48457EB6186F604DC3EE6103F0F881A966A4A53DB93C1C7AD28044A61CF0FCE7D40BA68015641BB746FB7DDE0D2F135B3E72C27DE147EB6127162600CEE2FE996BF71B8B39FDE57DFC392DDA09C4BF60254D74CA373499967C5100501D06A31B9AF30F8F868E5E3B054E309214BEED4F999B3B55712B0FD812D6575581ED3C4A080C3FC359594852C6FA23B784C4DB4B1AC424E90B4505E356F1C575F8C57FE52642AA261D219ED5B82760638581CA02> |396 <001C60D8A8C9B8096E3702EF2E87B058AE842B207DEF574BB847CCD95112A7D3AF2292BD58741562B9BCC6292F597F1D5EBCE0E807704FFEEE94A1C26C1217A6936D01C623E2C5895684B5E303EB80975424515B84C7D69EC348651F11929DBDB8CCFDA7B6F9C1B9009E28D94026AB5BD0038F56495AC64C32BF2B47869240B887B12AEF109BCAC343F49ECBE16F183F080759D157DB3263D01310CAAE2C54DDFFEC62D46A41ECF6143B8F31D2939D6A574F5434EA593BC099DA68B97E5EC7884FCC239BC4456DDBC4F814CD1EB45CF26D8A7ABC526080AD2183CF51F786640C20279AD04AC16902E6B89034C7C376D1FE7A7CD7A590466C8F02B429577E182F4F0EAD1CF88B5E7E78E67C50CD4796431188A92962F05200A8DB3D5ACE7A4B4F41560DE12E28A90ED4FC728B93C15758> |455 <001C60D8A8C9B741FC3342012EA60F1002BDD0438156B641629D59554CF7CB9EAD9463221AEC8B8F5B253729623B7A2EF0D3CFCE8A0130ACFED15CC8931C576C134F7B0DC6BA69FCC1D3B142D638D30211D94FC190C6BA94FCE9E281D4266EF1E1305A6F90C18351A8F4A9A33B5818F8EC054C92678D4BE0D61C5CE294403BEE15CA5325E2AAAD3AEB808F7725DFC94D606CACC435FD59BA7C1EA17757FE45E337025587E49E7B457DFA96B9D8F7AF852A0E6D6A474CF9C7627B8F6CD7158A8A50DC613ABA1515C2> |3 <001C60D8A8C9B888C146> |296 <001C60D8A8C9B82E34BA8345420AB5B56C87B3324072F79B333A2AD398ABD9C1C2EA51C46F3AA79B9C5266C362128101000FF25B7A09C7921D6A60C7D0E2302A477F9DC8532CE311A572FE415EAC33F5FC6FE7C4AC619462BA3766FA3CE7BE5313F186A0229CA736603FEB693F616D863B5B4610A5D1DDE34F5BDDDB1A7B7561887626CC89D1027D74B6A998B7626618615399077A821334F1F5A19E1F452D28FFB1112D5B47580426B77C77FD9755334A2C539E1B1B16EDBD30BAAC896BDFB62834EE3B21E483B720E8F54CFA44EF352AD3E1EF66415D18B0B1EDC21E170EF0C474188E1941A2E77A77C7A324282126B693416515B1B7991E79AF0D9D9EADCFE7BA25EA1E03872AF7BBCDBEFEFF2D0DF2E3DB323ADEA69D5185321166F6E12C828675970E363E6F0FEA1326F0F80F9B9751A4A0339F653F69FA8ECC3338F90338A7FE0450C8F1D9> |349 <001C60D8A8C9B874A685BEE7073E3D9BEB2350BB486AC62AB5FFB3F3055796FFA7201F6E4CDF32059564C619C9CC449E2E13D3438C6F3A00A8C33DF67EED72B4A703E19615397FBD65B8F41AB93A2D076C7948B4D6A7E1920548D052C7AB1831CD8F1E6F01CDE398A3464141E18D2DB8A524CC3BE1885811A2FA4464E9BFA44F3B137A209AC07BC2D4DC8265BE2C3CDB96FC76B4E494C7989F89FD865B563D37857FCA1A5FB165B3A362BB87A93EC69254C2AAA91985E82347B6547083A306CE> |336 <001C60D8A8C9B741FC33483764299A12FECF5B424B921F1638B418D49AD8CC9963C63B3AA219A5D4BE1E61602E0A46D9B7EFE172316C6D5B892D6ADDE5D2528F58404262014692776607ED9FEF376902580B8C02BD731773D6FB7F2B7E8EB85C23FCC5E1AF9DFBBC90E2E61912ECD90630A69F23FF0B8C4EE724E61487824F0AD0E39D6070F4E4045884E75A2063D1947EBCB0E10D1BE681823C4CDB758BE763EF892DC6733924007429A4A2787F28FEA57B2FFB5ABDDFA7D9E9074D9F3756D6F34C0CF43B19360B382394D183AF45B0B3B98FC3F1D24257EBFF530F2F277B17FA1E0C87E667FD5F85997B524610195116A8FE72672B292B06D63E095A2E86A919F48751EA4D1B00566804965EA47D6EEDA872F76C4297F60EB4DB86C215A3ABBA39D53700A0373989904046CD6FF12E13667085134B6D432AC6DF8D6B8D4A1E48A3CB9A9B89F04E1FA7F186F4239393424E4D2D80048B3B74D449F9056EFDA684BFA5A5756929753C434B4ECBD6DA1C66BD87629F33C7FB19CC2BFD3906732A4B9F90C757E2A2AD993D4CCBB93191D5606033A5FB35BDD63214D3B0478ED8768EC2FD124C41DB78452CEBD65904535C9E7E425B9032F384103F708FC89C6168EB599D175B46EF0FF68E2E1C705DCAA4668D7FE56C29AE86E26C1109490736A57C4139D482B4A559434FC9EA8FE3D7CF06BDE7DB76036EF6D4AD6F172AEC1AB158F9> |1005 <001C60D8A8C9B7A0860A08766484DD98ACD9B7603C3BEB562EF73D61A05B5DE8017F13F266C92D24BB1BFB1F10862D1ECEF20CD68A682CFB2B6B8C8D4ACC07437E905967E49582EBFB7D7DBEE5AD89B57488088CB90B344312A00E3A768F1A71AA7FE928885ED762CFCBE708040927416AA164E088AD1002EB33FCE0AF46257A3940922440C00BA7E7A7473C8156D179D16C2AD8A140315C11572410BA2D809C47C6FEFFF5CE5397A409F885D7D48F970A3D066B0BEB8881CFFB031485F28034B9C01B50982B8B5CF88D481078410E6E5527A96584B5B0D98325924A95F3E8ECEF6BE4ED4F2334D96E1E4275648EF87EA38AF46A8563DFEB52852B798D29CF4419BFAEF5> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /MCAAAA+Calibri-Bold-Identity-H /Identity-H 0 [/MCAAAA+Calibri-Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/IFKELU+Calibri-Bold /MCAAAA+Calibri-Bold-Identity-H findfont ct_VMDictPutIFKELU+Calibri-Bold [10.0005 0 0 -9.995 0 0 ]msf187.712 583.619 mo(\000^\001\265\001\211\001\211\001o\001\036\001u\001\036\001v\001\232\001\002\001\214\001\307\000\003\001\(\001]\001P\001\265\001\214\001\036\000\003\003\355)[4.96637 5.60635 5.60635 5.60635 2.6962 5.26637 8.3665 5.26636 5.60635 3.70624 5.17633 3.78619 4.97629 2.49615 3.39615 2.69623 4.97629 5.60635 3.78619 5.26636 2.49615 0 ]xsh%ADOBeginSubsetFont: LCAAAA+Calibri-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (LCAAAA+Calibri)%%Title: (LCAAAA+Calibri Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /LCAAAA+Calibri def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {-476 -194 1214 952} def/FontInfo 4 dict dup begin/FSType 8 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 1121 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 24 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C692334252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F5302816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6FECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C032449885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D5A11AF573B17CF9F38> |3 <001C60D8A8C9B888C146> |38 <001C60D8A8C9B770DA42EB776051437272AB3109214F2F5AF299B91EDE1F768C5024668BC49B69066FA908CF8FE87EDFDF17A758EE488BEC994A194C62BD1C9426343C7C81CA3B3F963FDAD914A0EC9F4FE665084402A52314B863A06B82A12C3F91EE9C0F2B145AA7D2782C4C7297D5A7A4C8227440D2EB6A6858EEAF3E8D5172513D85C8059F336BE8B10563AA3DFEF476A6E0B2054B979D1F9B4679850776A59C7497BC538F93679A65B973B2A534700FFE8CC98CDC2940E7759A9043FA0F4AD602EBE420E53281F2FA075E541FDAF915055861D63FE68E0F45> |367 <001C60D8A8C9B887F0644B8EDF7E394B2B17D648B60040EB6DBE2B8847CEEB752ACB6F5AD37E1FA4A050E94786AD18088ED8DC4464B0DE1BE6F00A802A61F4A34EAA84659717045B37042963C71284B8AC29AE9E0F8305F213AE4489E2DB55EC12AFE94E44F64596D135D1BEB997D5B9A0BB5A35AE0E0CE05B7B1F893729319FB81429> |381 <001C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C12EAC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F6F54555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B31EE69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433EC67800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660CE98DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C46B48C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC06964A16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |449 <001C60D8A8C9B63EE6FBAC6FE430D4C472A6935E9E4E2C9D9C4ACB16C71B032F18FE575C6256D49A59D28FA55A64B8F4250FF7EF0F6440082EA55E50C72515DB779850B563F18307F56C5AA0381D53908E3AA5F7BCF9144924A2084F07EBED39B22484214EF3445C58E2A31D32B14DA61C85069056233A7D69EDE7D6EAE9095E582A487ACDCAAEC9B696D9F56177DFCBED54097D97E802545B35B3AFF093952061133C2164E4C99E14CC43C1C5FB57627E18AF07CB58B73BD1200A30349006897A1314704F9560B7EE765A767050BD02ED4C3CB6891E5FA019219CAF9310B124D9AF8C5E5547F89705BF1E11BA18C8C6F80D46BFB4F08BBC66AE29B2E81702937C5AB98472DEAC74C8794C288DBFA220B7F896E2B36F9ECF06883A45930B940AFF017D9F3C209761AB734C6F3F199505CD5974FFC0917AC4E2B317FA15146D5F8C2D8B2A0366984D71D35A1EAF824F2AB69DDEEC3EC469FA5796A63F524D8EC40E97981C19E148BD51BA03455ACA08443ED8962BD3AB9091> |272 <001C60D8A8C9B714A578818061920CBD3BB0F0FEC7EB28869C0269DBFC02625554E339FA8F23FF202BF6BBA51F73386176CF41E41162B391BD65C46864E1EDBE38C4A175836382F89D1B282918F37F6A98A1C310371E84DC05CA4D214BBF40D0904F28663CAA2B1AF41B75D4680E3731D792C10C395648F8CE6283B6D2EA4EA25EB0077385CC26E37C0D4F9F091C8BC196661820383DC1CFC26D318A92B1398AE8D24532A475AF0A93A6DC660BFF9F07C9678F9C3412071B0DAC612FC7D6B5FAE3214E7C7AB18E3145411FCE0CA8B75D2C8C25C05252A375257E1693A2B9D11EE377C95BA1746CBCD896C9D8284A96EC1B8BEF12D6460B6828EC26350E91CC593B47372BD95FFBF8C2322BFC435A5494ED398AAAE3E6E4293369CDCFAC01478225F7C60BA6A2722907E6FF92F4B9457F52836FAB37F27C55593B43AB457EA291D6DE23> |346 <001C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4C30D8A20FB7C70B167834EB7C5767A7762DBDEADBE99BB9DD1507EDF7CB5B44CFB5AE7F50CE798A09AFFC2F8A1E21C8BA96A3248C2464366A8BF234A7465BA6B08C9AB7474ED94583744D778660448C601BC1D9C2E8788B65F173F45C272BBE3CD6AC55E870CEE94D478E3D51C8A2E608A02982A9D048914B7569407A83B9D3CDA9FE7ECB2AF4F7816F117CC85330A774976280DEB1A8C317A8A170186F61B3F5FC1D130A0DA1A6A5AE24C0FB08191CD76F47EDEDB0EAC8DE369D515B3B14661497F94A2412A37D63D31ABC4AE50DD37B3DDB58CFDBCD2A17246A6058BA85E12DAD2711083774A128264C809F70CFC31D164703798D4642E5D> |258 <001C60D8A8C9B75CBB53379352952B97D633633CE49B1F5650B8155AFDFA57F94D359804093E4912F3B89577762AB5877203F1CDAD240C521DE74183EDA10501967DB6487C182138B12C453C5DB9629F7EF021028117511EFEAB941896E32D9CC68D6E66540771999A4E30C4826A52D7536EDDF7E00016C895CE43408B44BE33E2D9A6163827E05AB8B1144BC909A74F6D7828DE6E08164A25E320920E354020A41D59E9E3B008A20EC107F9E18745DE21F9AF293EB0F319B529D840D8BA9319522EDDCACA13336C059581181C082BF0D7F4117FAEB429D871E099AEE4394FED2FB3A1C712D1799055BA832AD846B95DA8BB4E63B103C908FA309FAA3B78140CE2A22AE06B2A1EA5BD3AA13DD1ED75DA4AD37493780FE662EF5D1B53C4AF41845C0C77655CE94F0C9DEBE29248A1EAAF3A6EA79D5BB5C090457B818DD62F70E197CEA94F90229AB4FD685A1ADB5E4E4C1DBDB28AA3854323EE2FD22692EC70> |396 <001C60D8A8C9B80F37F21112BA81A46E1A1A16E843530DEF66F6901DB9A722A358478F1B0799F6041BFFF7D05EE602307D474F1DB84BF73C4EC1FF13A4D2D5B370042C9A314A700782F944BCE36786AFBD72FA62259FABABA90F1F2BE008B7993D5E1813324C60BD953524A1040FB1A790007846FA5DED6ACE6C7D436FF1C0B97E4BBDDDA28F066E204B37F8321753E1473DDD8EE76C12A0011B04832F5C47D3FF30EE31FE70EF82623D628622FAE52A70984ACD43F9718BC02CE5AA3F5832FAB343FD6D53F2375C811D54E6B415E257D8BB3A2542930D7E0D6DF96FAA0688822B6655966904164F87FA904C272BFAD51FAFF11CA14EBB5F6472235CA20889D111211CF90F83807D99EF12B3B6827C1CA4720D03729BEEEA22A1313C4BDCE878453F5E6DCAD449D1F3B7D54D32C49DA0> |410 <001C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B533C9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8435DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA67EEAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D104730DECDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C66195714151061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABEC190F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80DF322060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1C4E0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB55082A1E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |296 <001C60D8A8C9B83BB8632FB1D3D91BD66E5512F6DD2CCB59074315803E2F430B096626F50C9126DF15B1D22935F28B97AB5D3B7DB8B1B8EC17F9868DFC8B9BA6A909CA8727D3C9D8FCF13C3B6D5F4F33EA07DFD158F20416D4C6EEC8FD3EF14FC86346A94355FA1C2B6FA55C0124FFA9705858D4628EE39DA0E3A156A386DF00613D8189EFFC0AEADC5BE3915D9C022BA6356303A46539775608C62B3D24CB372AF4E663162E7C4ACC81D2F2C5F206BB702A5D73C1A974C0BFD7875757B79AA73010AE51501D97B980E0F2ACE1EF1ED3F60A9C6E02B8D29057E3D98A68500306E46C9A2B914F56A55773A150BF63B33B5E351FC714462135973FE682DBCBC0C1B38B7A71A2F4C684D75344384C54C140B13A70313E2F4EDF68E127B4C55F26525A530E7BB82AEC944EFDC27B6BB93FA6C499E5069AA3B6387EF0576DB7B6BEE15BB0B269E8ACB562> |286 <001C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E0839C715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62FCBF09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AAE22E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF99D24AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB02DD61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013CF0832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD8D58BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBEAAFA402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A567478E4C81011D9D8D5DAD9CB1F948F5FCE67> |373 <001C60D8A8C9B6D24F7D3842850F4949AEB6B9100F2B78F4C8889450CED823786FEB32A1B63E88AD56EE02413123CB64791A93EF92133FE4595DA2691E3035F9F72C6031AE554C5E100D6D83A5170AEAC660F3CD2D2E423C32E393EEDCE69B38CE6373F6B6777FFB71A30474298882FF21A6474EA00B23874CB701D4949FDAB683EF52B401CF01FBFB5320858391C36D1B0A5131B6AD88B31FBA5AF7369B538683192205F94F973772FC0D1A80750F5CA55E65F4A8760D9FFB5A3E462EB76AF894987A3AB123C31C6F61A2DE381C11A73194BB9FA663DEB4E0E047953FDCCB40254C512459EA81EABD29705BEDA8917220B4CD736962EC932D0F91B2A5DC808623631D3854D7B6297589945BF94293721596CC4C62C71F5A8040654672D59A8C73FC39F2C6919502A1FD8EB49A6BB72701DD42520B2F6CD223AC11A22A5CED8614ABBE01C624D0AED39BB3AE4E8B513F61C37C6BA440280E139545B39C87A06867746DDC81F39BACA8E048A7276011988ACE081223D841AEA6DE2418F28BD59A30A454BE8DAE3786DDCC7D1BEEFB13E445F279EE7EA8CB61C194C9B25497E6925AF3BEE4F64F897F4A57BD4C4A1E06EBC8223C35049061> |393 <001C60D8A8C9B78E05EA9D973060387C73D1F6FC5283CF49F42B90E35722532C0305E99FC2B2F5E8253F0317294CB5BA6F51657EA79E1841CF363B43BBE54B9E5F683986378119A60103220843BA6B4E1CF012F4407937B0EDEEE409EED971ED71424C1DE9F58B3C06F2342302220C155C0C840BFB4693FFF8A2CFEEF274FFE1F4AFBE9757FB2568EE33B9D585CBE0600A7110E1A53D85847EA919EFD9BF18F44D7EE9518AE64D9DFE7C7267D6429C8F5FD0EF0AF9ABA737132F4E330A330877D5AECA1F6DF97EC1ACF219E33EDD988EC9A670EC23A43243C991A099EEE9430EF67488C01ED11E3C4B1CEB11239FEDA600217AC3F2A3708004F1E2E90E296730C207690B19E7D8BB6E1920E2F46C4C2E0CC81AE0ED43696970A1FBC9D409BB55BDECDE83A356A07B210C4055759107919A9C98A0B1493E8E6816D87FE47A8C1A70E30E74BD97D6D39D9D984A0D52D9B81565B3C3A0B773497C465883E3095964CC84> |349 <001C60D8A8C9B887F0644B8F9A77200B5B21E7A46843656F48CC872DF3AFB58D86B9B1B70DF0F8BF4F1A9D845350075385C2FAC40F64A57A633024956B42D2D155265D68692B1DD96FCB1CFEA6F03B67B191D75D9251636A71B366F484AC7DD61A648087A690F42FCD56728047D5F145B28180BC49A70304D616C17E08688BC2AB34D235D029750826D6A02D57888DCAF080A15DCB2D8AE91CB7938E088D7426B3BCAD6531F243F29763FBDE3F087E3965B6148DD52590D1BA20021D15293CFC> |448 <001C60D8A8C9B77771B09AD302B4CB2C18543FBB2E7E6342969838CF2C334035065E921A40A75882974808107F0F5C3AC1CD7A10BA6075C83F1DE48B37CB4A8C976EF88D75006F44747CDCEE5069475B014DB29A6BE7A1F25A9ABA2642AE0B12F169B7C26C5BB2C6831FDDDADD15DE53220C2A354D3DB65E39662BC3F52DBE3E6F55BA2941DB48175EDD867619C5C4F72AF6BDE0336B64DD708A70A9B3043446299A2061A5B31F71BCE056DDAEEEA357563374E361165ED57E4A9861B82CE26F9B6BF6D6DD8B8E105752A19647DA81C937CF2BEAF032E992A09CE082764919EAB1094210448A121FEB79BB41C951E6B43D3384AE29644009EB9FEBB553A8B95EE31D86> |282 <001C60D8A8C9B78E05EAA3CECCCC7ABA6A35E55F211820F669BFFF2D107F3F003F84456D947B5557966A2009812B81B51372EB70EB729C8C82B63A473DB5161C83385AAD04B71C9D388B2F86E7C2E91E06E59E76C532F8A600B530589A218BCA1E889366120C885033631C7850C65A7F9274D24F9BF6FA89E174B53B0E1A2CF6D783F32D4C0BE4ACD3EEAF66A8BEC8DB7AC7ADBF3C9CDF5485D002662D310ACCD320AD0234A2F2251E7C0B1667BFFC7E10EE40C7CB623518E3E168137CE699E133B767C86E16CACCA64A58BD9D7F6E66BED6D6FE5D80E0381141549FFB2FBF94ECD2D262EB097909F9092B71E3573FC9B4FD273505C685B327AE9095A2A15545986A397AE2796BDB3888D16AF3DD82BF32621BC8C1393814540227FC926F77872F2FAF5DD33717EB461ACFE3EE5C279294EBB5AADC09C8B10C3F2CB25CCD97C6> |336 <001C60D8A8C9B7445140600976780BBEB6A3D2658D3A4C7F919C88C52D412C8E364C5F7636792196FD221C121AC8A143979AFAA3A09359F0F2A21E651450F6F05ACC0E82C2760ECA4A653600DE52AE0D5358458AF930D6BDEB0904E4313A0CBCA78B5C6EE35CCCF928264F350C0A023EDD3B664C736748E408C524202A3326D95C7DCABC59764E7D97C53C3E04189FF055F0A0F707215CE9EBCE6A5429EBED17A701726A8DEDD69C85101530BFD06F1546D47732DA28D5440C29DB9FD392812122E25828F7402340CB2AAD1BBC054F22EBE3B4068E1189E1BBFDEDCE3380BE2A1BC64D61665F8EA89BD12E55203D2F412C82771F2C0ABF3E56A249110A5F4DFD7E943B7CBB3957D78564ABEBC14037C62116307C9CC2770007504568A496F0E371B5E27EA91CE4ED6B158CDD56E512A87B38DA763ADE44907E57CB7229D283C8A7D867519E31285088BE518A70B9193ED1297DE2FF3E929169124C3A44E72EDA1A3B2C0E0DA57F0E79BC1C7BEFED8509DD8CC00683DBCDE9C2A776B95D5831197913BF75A301F1EB13F5C4E48D99B31FDB0B54BB7B640060AFF7A1619C4EE7C3CA0DE734198387C7205D8F2F952A1BC7A9DB628AB7F298888007AA604549FA9EA5ECD6ED4A814A52FD636085B1A8D57F31E70472C30EB60858254A7B95E2F6778797B84C60B2ED0823FE7265B0CE1B1A64D8F159C443134DC16E39D207947A0FD5903276> |455 <001C60D8A8C9B776A06C625D9575F6DBFFEE93EC1CB9A335325BD9E365428EEA1BD5B7A305D96437BF24D2E59BF0DFE2360EDCA01120D4DA769624265DE9866EA970971BD84B20E81D769B1F13D7A21674FB5E8C4844518680BB1DE710B7438090302965C932285C6A137B1923CFCED74D1C71B686BDF1263BE348B2F06F534EDA8A2856376F820F03A76FD878686946B3B179B9CD823AA55541A535E0CCC6D2D21B3D6A73597DDD43BBEFD829B55A26664F2F8221FA6814449CF6D0CFA13492A2A7CF82E9D18F6E0413> |374 <001C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4C30D8A20FB7C70B167834EB1FCB2A451DA55CBA774B9C40CA48F3B7AD8E41B3F0C2665E2AF85619561E070ABE3E4EFEC9983825210D2A0599E48D162F31337982CE0D843D2D41F1F7924A343E37439CC75937984C88A0080C28B8BFBFB8F444AFA11CBAA4BCF4C8D3087770F88F26B0A8B30E46AE29C6BF9720949C50E19D6248BB58DE961D63651843F9B3B8EE9AA75CDE28D1F95D7703116FE7AA23945B5808B97F9947888D114BE2523F872057145410E975A2CA83D430B49A7CAE26619012C2444BEBF6DC1397EFC38FADD0435CE6D4A1478744BC983827B31CF502C4487AF1E48BBC2EB6153C1C5367B96A212BCD3FEE3B9DEC12C4E> |400 <001C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A082679294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C4E83D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED0BFD271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357B5665CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B499704749747869638F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC0EAA7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB954E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301370300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E188B3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74E0349313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A5688299352E62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C25861BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE67C2BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21B0D386F88> |437 <001C60D8A8C9B78E05EAA3CFED1A062DA00ACB6556B6D2C444D52FE211DC3688D13631F07F87D2F0851361DDE2CB13BAE303424A55D9BD107D56D22322818FC76F125ECA1DADD7E1E8164E2DF3A65B67CFAE338C319FC7D07BDCC1CF896B708E125021996E87E6805D1416B537CED172F9478027FB9FD1A978C49E725968E2F5FFC6B56799F9B1D16FFE2085471316923AC7BFBC4E3BBEBA71950AD60EAA4BEA84B8EB89079B6BEAD01C4E2BC5BF11F5FD2CB41D465D8AD649D765F2A952E22AC4EF1DF8297E4E5405180477A9E4F70BB10D787681535F61379438A6888E4F660E2B1CD68547F69ECDD808A3CD50B9FBBDA239A40EE62332FADD878CD5F875BAC27E0BDDA94455E030928A249A166F13D134EF255F5783> |856 <001C60D8A8C9B86ED904792469819B411F782D644953F5FB87FEF664579CE5AF47E01D6D9A7DF6EB24F15E9AD1EE074A41E03462D7DE0F1E92BD9640F3458F7DADF49E5D4EB0B3> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /LCAAAA+Calibri-Identity-H /Identity-H 0 [/LCAAAA+Calibri] ct_ComposeFont pop end end
%ADOEndSubsetFont
/IFKELV+Calibri /LCAAAA+Calibri-Identity-H findfont ct_VMDictPutIFKELV+Calibri [10.0005 0 0 -9.995 0 0 ]msf290.372 583.619 mo(\000\003\000&\001o\001}\001\301\001\020\001Z\001\002\001\214\001\232\000\003\001}\001\(\000\003\001\232\001Z\001\036\000\003\001\020\001}\001u\001\211\001\002\001\214\001\002\001\232\001]\001\300\001\036\000\003\001\300\001]\001\214\001}\001u\001\036\000\003\001u\001\036\001\232\001Z\001}\001\032\001}\001o\001}\001P\001\307\000\003\001\002\001v\001\002\001o\001\307\001\220\001]\001\220\000\003\001\211\001\036\001\214\001\(\001}\001\214\001u\001\036\001\032\000\003\001]\001v\000\003\001\232\001Z\001]\001\220\000\003\001\220\001\232\001\265\001\032\001\307\003X)[2.49615 4.82629 2.52621 5.50623 7.38638 4.46631 5.48627 5.02634 3.72623 3.5863 2.49615 5.50626 3.28613 2.49615 3.5863 5.48624 5.21634 2.49615 4.46631 5.50623 8.22644 5.48624 5.02634 3.72623 5.02634 3.5863 2.52621 4.75626 5.21097 2.49615 4.75626 2.52618 3.72626 5.50623 8.22641 5.21634 2.49615 8.22638 5.21634 3.58627 5.48627 5.50626 5.48627 5.50626 2.52618 5.50629 4.94623 4.7663 2.49615 5.02637 5.48621 5.02637 2.52618 4.76636 4.1463 2.52625 4.1463 2.49615 5.48621 5.21637 3.72626 3.28613 5.50623 3.7262 8.22644 5.21631 5.48627 2.49615 2.52625 5.48621 2.49615 3.5863 5.48627 2.52625 4.14624 2.49622 4.1463 3.5863 5.48627 5.48621 4.76636 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/IFKELS+Calibri-Bold*1 uf/IFKELS+Calibri-Bold uf/SAAAAA+Calibri-Bold uf/IFKELR+Calibri-Italic*1 uf/IFKELR+Calibri-Italic uf/QAAAAA+Calibri-Italic uf/IFKELQ+ArialMT*1 uf/IFKELQ+ArialMT uf/OAAAAA+ArialMT uf/IFKELP+Calibri*1 uf/IFKELP+Calibri uf/MAAAAA+Calibri uf/IFKELO+Calibri*1 uf/IFKELO+Calibri uf/KAAAAA+Calibri uf/IFKELT+Calibri-Italic*1 uf/IFKELT+Calibri-Italic uf/UAAAAA+Calibri-Italic uf/IFKELU+Calibri-Bold-Identity-H uf/IFKELU+Calibri-Bold /CIDFont ur/IFKELV+Calibri-Identity-H uf/IFKELV+Calibri /CIDFont urAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
